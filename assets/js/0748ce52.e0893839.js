"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[9702],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=o(n),d=l,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(f,r(r({ref:t},u),{},{components:n})):a.createElement(f,r({ref:t},u))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:l,r[1]=p;for(var o=2;o<i;o++)r[o]=n[o];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3078:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return m}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],p={id:"popgensims_samples",title:"Samples.jl",sidebar_label:"Samples.jl"},s=void 0,o={unversionedId:"api/PopGenSims/popgensims_samples",id:"api/PopGenSims/popgensims_samples",title:"Samples.jl",description:"PopGenSims.jl/src/Samples.jl",source:"@site/docs/api/PopGenSims/Samples.md",sourceDirName:"api/PopGenSims",slug:"/api/PopGenSims/popgensims_samples",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_samples",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenSims/Samples.md",tags:[],version:"current",lastUpdatedAt:1653413800,formattedLastUpdatedAt:"May 24, 2022",frontMatter:{id:"popgensims_samples",title:"Samples.jl",sidebar_label:"Samples.jl"},sidebar:"docs",previous:{title:"Cross.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_cross"},next:{title:"Sibship.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_sibship"}},u={},m=[{value:"PopGenSims.jl/src/Samples.jl",id:"popgensimsjlsrcsamplesjl",level:2},{value:"\ud83d\udce6 sample_locus",id:"-sample_locus",level:3},{value:"\ud83d\udce6 _simulatearbitrary",id:"-_simulatearbitrary",level:3},{value:"\ud83d\udce6 _simulateflat",id:"-_simulateflat",level:3},{value:"\ud83d\udce6 _simulatescale",id:"-_simulatescale",level:3},{value:"\ud83d\udfea simulate",id:"-simulate",level:3}],c={toc:m},d="wrapper";function f(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"popgensimsjlsrcsamplesjl"},"PopGenSims.jl/src/Samples.jl"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,i.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udfea  exported by PopGenSims.jl")))),(0,i.kt)("h3",{id:"-sample_locus"},"\ud83d\udce6 sample_locus"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"sample_locus(locus::Dict, n::Int, ploidy::Signed)\n")),(0,i.kt)("p",null,"Internal function used by ",(0,i.kt)("inlineCode",{parentName:"p"},"simulate")," to take a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dict")," of alleles => frequencies of a locus and return\n",(0,i.kt)("inlineCode",{parentName:"p"},"n")," number of genotypes (n_alleles = ",(0,i.kt)("inlineCode",{parentName:"p"},"ploidy"),") by using weighted sampling of the\nallele-frequency pairs."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"d = Dict(133 => 0.125,135 => 0.5625,143 => 0.25,137 => 0.0625)\n\njulia> sample_locus(d, 3, 2)\n5-element Array{Tuple{Int16,Int16},1}:\n (133, 135)\n (135, 135)\n (143, 137)\n\njulia> sample_locus(d, 3, 3)\n5-element Array{Tuple{Int16,Int16,Int16},1}:\n (135, 135, 133)\n (143, 135, 133)\n (137, 135, 135)\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-_simulatearbitrary"},"\ud83d\udce6 _simulatearbitrary"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"_simulatearbitrary(data::PopData, n::Dict{String, Int})\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-_simulateflat"},"\ud83d\udce6 _simulateflat"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"_simulateflat(data::PopData, n::Int)\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-_simulatescale"},"\ud83d\udce6 _simulatescale"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"_simulatescale(data::PopData, scale::Int)\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-simulate"},"\ud83d\udfea simulate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\n")),(0,i.kt)("p",null,"Simulate ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," number of individuals per population using per-population\nallele frequencies derived from a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object. Returns a new ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object with ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," * ",(0,i.kt)("inlineCode",{parentName:"p"},"n_populations")," samples."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nanycats;\n\njulia> sims = simulate(cats, n = 100)\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 1700\n  Populations: 17\n")),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Dict{String, Int})\n")),(0,i.kt)("p",null,"Simulate an arbitrary number of samples per populations specified in the Dict ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", given by ",(0,i.kt)("inlineCode",{parentName:"p"},"Population => #samples"),". Uses\nper-population allele frequencies derived from a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats;\n\njulia> simscheme = Dict("1" => 5, "8" => 3, "11" => 20) ;\n\njulia> simulate(cats, n = simscheme)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 28\n  Populations: 3\n')),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; scale::Int)\n")),(0,i.kt)("p",null,"Simulate individuals per population in the same proportions they appear in the PopData\nusing per-population allele frequencies. Simulation volume can be multiplied using ",(0,i.kt)("inlineCode",{parentName:"p"},"scale"),",\ni.e. if you want to keep the same proportions but generate twice the number of samples, ",(0,i.kt)("inlineCode",{parentName:"p"},"scale"),"\nwould be ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),". Returns a new ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object with ",(0,i.kt)("inlineCode",{parentName:"p"},"n_samples")," * ",(0,i.kt)("inlineCode",{parentName:"p"},"scale")," samples.    "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nanycats;\n\njulia> sims_prop = simulate(cats, scale = 3)\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 711\n  Populations: 17\n")))}f.isMDXComponent=!0}}]);