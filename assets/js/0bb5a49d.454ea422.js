"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[5983],{4137:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),c=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(f,i(i({ref:n},s),{},{components:t})):a.createElement(f,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},425:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(7294),r=t(6010),o={tabItem:"tabItem_Ymn6"};function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:t},n)}},3992:function(e,n,t){t.d(n,{Z:function(){return k}});var a=t(7462),r=t(7294),o=t(6010),i=t(2957),l=t(6550),u=t(5238),c=t(3609),s=t(2560);function d(e){return function(e){var n,t;return null!=(n=null==(t=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function p(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:d(t);return function(e){var n=(0,c.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function m(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function f(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,o=(0,l.k6)(),i=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,u._X)(i),(0,r.useCallback)((function(e){if(i){var n=new URLSearchParams(o.location.search);n.set(i,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[i,o])]}function g(e){var n,t,a,o,i=e.defaultValue,l=e.queryString,u=void 0!==l&&l,c=e.groupId,d=p(e),g=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var r=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:d})})),v=g[0],b=g[1],h=f({queryString:u,groupId:c}),y=h[0],N=h[1],k=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),t=(0,s.Nk)(n),a=t[0],o=t[1],[a,(0,r.useCallback)((function(e){n&&o.set(e)}),[n,o])]),w=k[0],j=k[1],x=function(){var e=null!=y?y:w;return m({value:e,tabValues:d})?e:null}();return(0,r.useLayoutEffect)((function(){x&&b(x)}),[x]),{selectedValue:v,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);b(e),N(e),j(e)}),[N,j,d]),tabValues:d}}var v=t(1048),b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){var n=e.className,t=e.block,l=e.selectedValue,u=e.selectValue,c=e.tabValues,s=[],d=(0,i.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=s.indexOf(n),a=c[t].value;a!==l&&(d(n),u(a))},m=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,r=s.indexOf(e.currentTarget)+1;t=null!=(a=s[r])?a:s[0];break;case"ArrowLeft":var o,i=s.indexOf(e.currentTarget)-1;t=null!=(o=s[i])?o:s[s.length-1]}null==(n=t)||n.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},c.map((function(e){var n=e.value,t=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:function(e){return s.push(e)},onKeyDown:m,onClick:p},i,{className:(0,o.Z)("tabs__item",b.tabItem,null==i?void 0:i.className,{"tabs__item--active":l===n})}),null!=t?t:n)})))}function y(e){var n=e.lazy,t=e.children,a=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var i=o.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})})))}function N(e){var n=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},r.createElement(h,(0,a.Z)({},e,n)),r.createElement(y,(0,a.Z)({},e,n)))}function k(e){var n=(0,v.Z)();return r.createElement(N,(0,a.Z)({key:String(n)},e))}},8550:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(4137)),i=(t(3992),t(425),["components"]),l={id:"advancedindexing",title:"Advanced PopData Indexing",sidebar_label:"Advanced Indexing"},u=void 0,c={unversionedId:"popdata/advancedindexing",id:"popdata/advancedindexing",title:"Advanced PopData Indexing",description:"In version 0.7.0, we introduce a powerful new way to index PopData...",source:"@site/docs/popdata/advancedindexing.md",sourceDirName:"popdata",slug:"/popdata/advancedindexing",permalink:"/PopGen.jl/docs/popdata/advancedindexing",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/popdata/advancedindexing.md",tags:[],version:"current",lastUpdatedAt:1646148647,formattedLastUpdatedAt:"Mar 1, 2022",frontMatter:{id:"advancedindexing",title:"Advanced PopData Indexing",sidebar_label:"Advanced Indexing"},sidebar:"docs",previous:{title:"Data exploration",permalink:"/PopGen.jl/docs/popdata/dataexploration"},next:{title:"Hardy-Weinberg Equilibrium",permalink:"/PopGen.jl/docs/analyses/hardyweinberg"}},s={},d=[{value:"Basic conditional indexing",id:"basic-conditional-indexing",level:3},{value:"Advanced conditional indexing",id:"advanced-conditional-indexing",level:3}],p={toc:d},m="wrapper";function f(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In version ",(0,o.kt)("inlineCode",{parentName:"p"},"0.7.0"),", we introduce a powerful new way to index PopData...\nby directly piggy-backing off of the incredible work done in ",(0,o.kt)("inlineCode",{parentName:"p"},"DataFrames.jl"),".\nNow, you can index and subset PopData ","[almost]"," as though you were directly\nsubsetting the ",(0,o.kt)("inlineCode",{parentName:"p"},"genodata")," dataframe, and it will return a new subsetted\nPopData object (or other stuff). We'll go through some examples using the ",(0,o.kt)("inlineCode",{parentName:"p"},"nancycats")," data.\nThe conceptual syntax (the arrows are for demonstration) looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"# return new PopData\npopdata[column -> condition]\n\n# return a new genodata table\npopdata[column -> condition, :]\n\n# return a specific column\npopdata[column -> condition, :column]\n\n# return specific columns\npopdata[column -> condition, [:col1, :col2]]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"#julia> using PopGen\njulia> ncats = @nancycats\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n")),(0,o.kt)("h3",{id:"basic-conditional-indexing"},"Basic conditional indexing"),(0,o.kt)("p",null,'Basic conditional indexing is a fancy way of saying "pulling out specific\ninformation". Let\'s say we wanted to omit locus ',(0,o.kt)("inlineCode",{parentName:"p"},"fca8"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).locus .!= "fca8"]\nPopData{Diploid, 8 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n')),(0,o.kt)("p",null,"Or, maybe we only want loci ",(0,o.kt)("inlineCode",{parentName:"p"},"fca8")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"fca23"),". We use the ",(0,o.kt)("inlineCode",{parentName:"p"},"\u2208")," (",(0,o.kt)("inlineCode",{parentName:"p"},"\\in<TAB>"),") operator and wrap the loci in ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref()")," to keep the set from being broadcasted."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).locus .\u2208  Ref(["fca8", "fca23"])]\nPopData{Diploid, 2 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n')),(0,o.kt)("p",null,"Perhaps we want only populations 1 through 5. Again, we bind the set in ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref()")," to prevent broadcasting over its elements. We also need to change the integers to strings because population names are always strings."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"julia> ncats[genodata(ncats).population .\u2208  Ref(string.(1:5))]\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 82\n  Populations: 5\n")),(0,o.kt)("p",null,"Maybe we just wanted to know the names of the samples in population ",(0,o.kt)("inlineCode",{parentName:"p"},"5"),". Although for something like this you can just as well index the ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleinfo")," dataframe. Note that we need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"unique")," here because the ",(0,o.kt)("inlineCode",{parentName:"p"},"genodata")," table is in long-format, meaning there are as many occurances of each sample name as there are loci. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).population .== "5", :name] |> unique\n15-element Vector{InlineStrings.String7}:\n "N55"\n "N56"\n "N57"\n "N58"\n "N59"\n "N60"\n "N61"\n "N62"\n "N63"\n "N64"\n "N65"\n "N66"\n "N67"\n "N68"\n "N69"\n')),(0,o.kt)("h3",{id:"advanced-conditional-indexing"},"Advanced conditional indexing"),(0,o.kt)("p",null,"Just like in ",(0,o.kt)("inlineCode",{parentName:"p"},"DataFrames.jl"),', we can chain conditions with a broadcasted\n"and" operator (',(0,o.kt)("inlineCode",{parentName:"p"},".&"),') and really pull out information of interest. This also works for a broadcasted\n"or" operator (',(0,o.kt)("inlineCode",{parentName:"p"},".|"),"). Something to keep in mind is that each statement needs to be wrapped in\nparentheses like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"popdata[(statement1) .& (statement2)]\n")),(0,o.kt)("p",null,"Let's find all the samples in population ",(0,o.kt)("inlineCode",{parentName:"p"},"2")," that are heterozygous for allele ",(0,o.kt)("inlineCode",{parentName:"p"},"133")," in locus ",(0,o.kt)("inlineCode",{parentName:"p"},"fca8")," and return just a dataframe.\nNotice we are using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ishet")," method ",(0,o.kt)("inlineCode",{parentName:"p"},"ishet(genotype, allele)")," and broadcasting it with ",(0,o.kt)("inlineCode",{parentName:"p"},"ishet.()")," over an array of genotypes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'julia> gd = genodata(ncats) ;\njulia> ncats[(gd.locus .== "fca8") .& (gd.population .== "2") .& (ishet.(gd.genotype, 133)), :]\n\n6\xd74 DataFrame\n Row \u2502 name      population  locus   genotype   \n     \u2502 String7\u2026  String      String  Tuple\u2026?    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 N141      2           fca8    (129, 133)\n   2 \u2502 N142      2           fca8    (129, 133)\n   3 \u2502 N146      2           fca8    (129, 133)\n   4 \u2502 N151      2           fca8    (129, 133)\n   5 \u2502 N154      2           fca8    (133, 135)\n   6 \u2502 N155      2           fca8    (131, 133)\n')),(0,o.kt)("p",null,"How about which samples are missing data for locus ",(0,o.kt)("inlineCode",{parentName:"p"},"fca8"),"?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'julia> gd = genodata(ncats) ;\njulia> ncats[(gd.locus .== "fca8") .& (ismissing.(gd.genotype)), :name]\n20-element PooledArrays.PooledVector{InlineStrings.String7, UInt8, Vector{UInt8}}:\n "N215"\n "N216"\n "N188"\n "N189"\n "N190"\n "N191"\n "N192"\n \u22ee\n "N197"\n "N198"\n "N199"\n "N200"\n "N201"\n "N206"\n')),(0,o.kt)("p",null,"This should get you started on thinking of ways to explore your data \ud83d\ude04."))}f.isMDXComponent=!0}}]);