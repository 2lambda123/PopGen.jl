"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[3005],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),k=i,c=m["".concat(s,".").concat(k)]||m[k]||d[k]||l;return n?a.createElement(c,r(r({ref:t},u),{},{components:n})):a.createElement(c,r({ref:t},u))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5079:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return u},toc:function(){return d},default:function(){return k}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],o={id:"latest",title:"What's New",sidebar_label:"What's New"},s=void 0,p={unversionedId:"latest",id:"latest",title:"What's New",description:"v0.8",source:"@site/docs/latest.md",sourceDirName:".",slug:"/latest",permalink:"/PopGen.jl/docs/latest",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/latest.md",tags:[],version:"current",lastUpdatedAt:1649706949,formattedLastUpdatedAt:"4/11/2022",frontMatter:{id:"latest",title:"What's New",sidebar_label:"What's New"}},u={},d=[{value:"v0.8",id:"v08",level:2},{value:"v0.8.0",id:"v080",level:3},{value:"\u26a0\ufe0f\u26a0\ufe0f Breaking Changes",id:"\ufe0f\ufe0f-breaking-changes",level:4},{value:"\u2728\u2728 New Things",id:"-new-things",level:4},{value:"\u26a1\u26a1 Improvements",id:"-improvements",level:4},{value:"\ud83d\udc1b\ud83d\udc1b Bug fixes",id:"-bug-fixes",level:4},{value:"v0.7",id:"v07",level:2},{value:"v0.7.0",id:"v070",level:3},{value:"\u26a0\ufe0f\u26a0\ufe0f Breaking Changes",id:"\ufe0f\ufe0f-breaking-changes-1",level:4},{value:"\u26a1\u26a1 Improvements",id:"-improvements-1",level:4},{value:"\ud83d\udc1b\ud83d\udc1b Bug fixes",id:"-bug-fixes-1",level:4},{value:"v.0.6",id:"v06",level:2},{value:"v.0.6.5",id:"v065",level:3},{value:"\u26a1\u26a1 Improvements",id:"-improvements-2",level:4},{value:"\ud83d\udc1b\ud83d\udc1b Bug fixes",id:"-bug-fixes-2",level:4},{value:"v.0.6.1",id:"v061",level:3},{value:"\u2728\u2728 New Features",id:"-new-features",level:4},{value:"\u26a1\u26a1 Improvements",id:"-improvements-3",level:4},{value:"\ud83d\udc1b\ud83d\udc1b Bug fixes",id:"-bug-fixes-3",level:4},{value:"v.0.5",id:"v05",level:2},{value:"v.0.5.2",id:"v052",level:3},{value:"\u26a1\u26a1 Improvements",id:"-improvements-4",level:4},{value:"\u2728\u2728 New Features",id:"-new-features-1",level:4},{value:"v.0.5.1",id:"v051",level:3},{value:"\u2728\u2728 New features",id:"-new-features-2",level:4},{value:"v.0.5.0",id:"v050",level:3},{value:"v.0.4",id:"v04",level:2},{value:"v0.4.5",id:"v045",level:3},{value:"v0.4.3",id:"v043",level:3},{value:"Changes",id:"changes",level:4},{value:"v0.4.0",id:"v040",level:3},{value:"\u26a0\ufe0f\u26a0\ufe0f Breaking changes",id:"\ufe0f\ufe0f-breaking-changes-2",level:4},{value:"\u2728\u2728 New features",id:"-new-features-3",level:4},{value:"\u26a1\u26a1 Improvements",id:"-improvements-5",level:4}],m={toc:d};function k(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"v08"},"v0.8"),(0,l.kt)("h3",{id:"v080"},"v0.8.0"),(0,l.kt)("h4",{id:"\ufe0f\ufe0f-breaking-changes"},"\u26a0\ufe0f\u26a0\ufe0f Breaking Changes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"dropped support for Julia <v1.6",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"new ",(0,l.kt)("inlineCode",{parentName:"li"},"count")," methods we use aren't supported by previous versions")))),(0,l.kt)("h4",{id:"-new-things"},"\u2728\u2728 New Things"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"k-means clustering using Kmeans++ via ",(0,l.kt)("inlineCode",{parentName:"li"},"kmeans()")),(0,l.kt)("li",{parentName:"ul"},"Principcal Component Analysis via ",(0,l.kt)("inlineCode",{parentName:"li"},"pca()")),(0,l.kt)("li",{parentName:"ul"},"Jason and Pavel both completed their doctorates!")),(0,l.kt)("h4",{id:"-improvements"},"\u26a1\u26a1 Improvements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"allele matrix creation methods (internal) have >50% fewer LOC and are >2x faster!")),(0,l.kt)("h4",{id:"-bug-fixes"},"\ud83d\udc1b\ud83d\udc1b Bug fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"none, I think")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"v07"},"v0.7"),(0,l.kt)("h3",{id:"v070"},"v0.7.0"),(0,l.kt)("h4",{id:"\ufe0f\ufe0f-breaking-changes-1"},"\u26a0\ufe0f\u26a0\ufe0f Breaking Changes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"all PopData functionality moved to separate package PopGenCore.jl"),(0,l.kt)("li",{parentName:"ul"},"PopGen.jl reexports functions from PopGenCore.jl for familiar functionality"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".meta")," and ",(0,l.kt)("inlineCode",{parentName:"li"},".loci")," have been renamed ",(0,l.kt)("inlineCode",{parentName:"li"},".metadata")," and ",(0,l.kt)("inlineCode",{parentName:"li"},".genodata")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".metadata")," is no longer a DataFrame and instead a new ",(0,l.kt)("inlineCode",{parentName:"li"},"PopDataInfo")," type"),(0,l.kt)("li",{parentName:"ul"},"latitude and longitude columns no longer mandatory and omitted in cases where not used")),(0,l.kt)("h4",{id:"-improvements-1"},"\u26a1\u26a1 Improvements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"PopData can be indexed like a DataFrame and it will return a brand new PopData!"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PopDataInfo")," is self-updating (in most cases)"),(0,l.kt)("li",{parentName:"ul"},"preliminary plink .bed file importing (not writing, yet)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show")," for PopData is now smaller and cleaner"),(0,l.kt)("li",{parentName:"ul"},"INFO text for data importing now elides abs paths longer than the terminal width"),(0,l.kt)("li",{parentName:"ul"},"VCF/BCF support no longer lazy loaded"),(0,l.kt)("li",{parentName:"ul"},"VCF/BCF uses VariantCallFormat.jl now (instead of GeneticVariations.jl)"),(0,l.kt)("li",{parentName:"ul"},"VCF/BCF uses different GZ library for decompression"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"try...catch")," blocks used in file io for faster file reading and fewer lines of code"),(0,l.kt)("li",{parentName:"ul"})),(0,l.kt)("h4",{id:"-bug-fixes-1"},"\ud83d\udc1b\ud83d\udc1b Bug fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"super slow structure io on larger files")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"v06"},"v.0.6"),(0,l.kt)("h3",{id:"v065"},"v.0.6.5"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Summary of changes from 0.6.2-5")),(0,l.kt)("h4",{id:"-improvements-2"},"\u26a1\u26a1 Improvements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bumped compat for ",(0,l.kt)("inlineCode",{parentName:"li"},"DataFrames.jl")," to 1.0"),(0,l.kt)("li",{parentName:"ul"},"VCF/BCF importing now naturally sorts the loci names",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"includes new ",(0,l.kt)("inlineCode",{parentName:"li"},"NaturalSort.jl")," dep"))),(0,l.kt)("li",{parentName:"ul"},"file import ",(0,l.kt)("inlineCode",{parentName:"li"},"INFO")," text consolidated somewhat"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PopData")," show method information consolidated somehwat")),(0,l.kt)("h4",{id:"-bug-fixes-2"},"\ud83d\udc1b\ud83d\udc1b Bug fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hudson fst works as expected"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"isbiallelic")," returns correct answer when used on ",(0,l.kt)("inlineCode",{parentName:"li"},"PopData")," object"),(0,l.kt)("li",{parentName:"ul"},"[internal]"," conditional functions moved to ",(0,l.kt)("inlineCode",{parentName:"li"},"Conditionals.jl")," file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"keep")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"keep!")," are exported")),(0,l.kt)("h3",{id:"v061"},"v.0.6.1"),(0,l.kt)("h4",{id:"-new-features"},"\u2728\u2728 New Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Hudson pairwise FST & Permutation",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"adds the Hudson et al. 1992 method"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"isbiallelic"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"adds boolean test if a ",(0,l.kt)("inlineCode",{parentName:"li"},"PopData")," object has only biallelic loci"),(0,l.kt)("li",{parentName:"ul"},"adds boolean test if a ",(0,l.kt)("inlineCode",{parentName:"li"},"GenoArray")," is biallelic"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"drop_multiallelic"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"mutating and non-mutating methods to remove non-biallelic loci from a ",(0,l.kt)("inlineCode",{parentName:"li"},"PopData")," object")))),(0,l.kt)("h4",{id:"-improvements-3"},"\u26a1\u26a1 Improvements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"drop_monomorphic")," now uses the same logic as ",(0,l.kt)("inlineCode",{parentName:"li"},"drop_multiallelic"),", which should make it faster and leaner")),(0,l.kt)("h4",{id:"-bug-fixes-3"},"\ud83d\udc1b\ud83d\udc1b Bug fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vcf")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"bcf")," kwarg ",(0,l.kt)("inlineCode",{parentName:"li"},"rename_loci")," now consistent in functions and docstrings"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"generate_meta")," now uses a comprehension rather than deprecated ",(0,l.kt)("inlineCode",{parentName:"li"},"map(fn, groupeddataframe)")," method")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"v05"},"v.0.5"),(0,l.kt)("h3",{id:"v052"},"v.0.5.2"),(0,l.kt)("h4",{id:"-improvements-4"},"\u26a1\u26a1 Improvements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a rewrite of nei and weir-cockerham fst methods to be matrix-based (faster!)")),(0,l.kt)("h4",{id:"-new-features-1"},"\u2728\u2728 New Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"fully implements permutation testing for both pairwise fst methods"),(0,l.kt)("li",{parentName:"ul"},"adds method for ",(0,l.kt)("inlineCode",{parentName:"li"},"avg_allele_freq")," to accommodate new ",(0,l.kt)("inlineCode",{parentName:"li"},"pairwise_nei")),(0,l.kt)("li",{parentName:"ul"},"extends ",(0,l.kt)("inlineCode",{parentName:"li"},"pairwise_fst")," to include iterations keyword to activate permutation testing")),(0,l.kt)("h3",{id:"v051"},"v.0.5.1"),(0,l.kt)("h4",{id:"-new-features-2"},"\u2728\u2728 New features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pairwise_fst")," is now available for Weir & Cockerham (1984) and Nei (1987) methods",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"check out the ",(0,l.kt)("a",{parentName:"li",href:"/docs/gettingstarted/comparison"},"benchmarks"),"!"))),(0,l.kt)("li",{parentName:"ul"},"added ",(0,l.kt)("inlineCode",{parentName:"li"},"skipinf"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"skipnan"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},"skipinfnan")," methods (unexported) to ",(0,l.kt)("inlineCode",{parentName:"li"},"Utils.jl")),(0,l.kt)("li",{parentName:"ul"},"dropped ",(0,l.kt)("inlineCode",{parentName:"li"},"safemean")," because the skip___ methods are a lot faster and slimmer")),(0,l.kt)("h3",{id:"v050"},"v.0.5.0"),(0,l.kt)("p",null,"This release fixes a critical bug in all the file importing functions that returned nothing when dropping monomorphic loci. Other changes include"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Dropping ",(0,l.kt)("inlineCode",{parentName:"li"},"JLD2.jl")," suport due to its version-to-version instability. Two fewer dependencies!",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"As a result, ",(0,l.kt)("inlineCode",{parentName:"li"},"datasets()")," now reads nancycats and gulfsharks directly from their source data files"),(0,l.kt)("li",{parentName:"ul"},"To maintain all of the information, gulfsharks reads from a delimited file rather than a genepop file"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"populations")," type signature and behavior has been changed:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the default returns an array of the unique population names"),(0,l.kt)("li",{parentName:"ul"},"the keyword ",(0,l.kt)("inlineCode",{parentName:"li"},"listall::Bool")," has been replaced with ",(0,l.kt)("inlineCode",{parentName:"li"},"counts::Bool"),", which now returns a dataframe of the number of samples per population")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"v04"},"v.0.4"),(0,l.kt)("h3",{id:"v045"},"v0.4.5"),(0,l.kt)("p",null,"This release builds off of ",(0,l.kt)("inlineCode",{parentName:"p"},"0.4.3")," and does a better job with the VCF loading logic. Along with that, ",(0,l.kt)("inlineCode",{parentName:"p"},"vcf")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bcf")," exist in the namespace before loading in ",(0,l.kt)("inlineCode",{parentName:"p"},"GeneticVariation.jl"),", meaning you can always view the docstrings. These stripped-down methods in the namespace will give helpful errors to remind you to load in ",(0,l.kt)("inlineCode",{parentName:"p"},"GeneticVariation.jl")," and/or ",(0,l.kt)("inlineCode",{parentName:"p"},"GZip.jl"),"."),(0,l.kt)("h3",{id:"v043"},"v0.4.3"),(0,l.kt)("p",null,"This release fixes and simplifies the under-the-hood ",(0,l.kt)("inlineCode",{parentName:"p"},"allele_freq"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"geno_freq"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"geno_count_xxx")," functions. The are faster now, and they infer types, making the output have expected type behavior. "),(0,l.kt)("h4",{id:"changes"},"Changes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You no longer need to import both ",(0,l.kt)("inlineCode",{parentName:"li"},"GeneticVariations.jl")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"GZip.jl")," to have the ",(0,l.kt)("inlineCode",{parentName:"li"},"vcf")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"bcf")," functions work. The reason is that if your file isn't gzipped, then why load in an unnecessary library? Therefore, if your file is gzipped, then you'll need to load in ",(0,l.kt)("inlineCode",{parentName:"li"},"GZip.jl")," too, otherwise you just need ",(0,l.kt)("inlineCode",{parentName:"li"},"GeneticVariation.jl"),". \ud83c\udd92"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"avg_allele_freq")," now has a different method, where the second positional argument is ",(0,l.kt)("inlineCode",{parentName:"li"},"power"),", which will raise the calculated frequencies to the given value (default = ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),"). This simplifies having to do things like square the values of the resulting ",(0,l.kt)("inlineCode",{parentName:"li"},"Dict"),".")),(0,l.kt)("h3",{id:"v040"},"v0.4.0"),(0,l.kt)("p",null,"This release adds a slew of relatedness estimators, which can be bootstrapped and are performed in parallel. Paired with release of ",(0,l.kt)("inlineCode",{parentName:"p"},"PopGenSims.jl v0.0.2"),"."),(0,l.kt)("h4",{id:"\ufe0f\ufe0f-breaking-changes-2"},"\u26a0\ufe0f\u26a0\ufe0f Breaking changes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"CategoricalArrays replaced with PooledArrays"),(0,l.kt)("li",{parentName:"ul"},"VCF/BCF now lazy load and require ",(0,l.kt)("inlineCode",{parentName:"li"},"GeneticVariations.jl")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"GZip.jl")," separately")),(0,l.kt)("h4",{id:"-new-features-3"},"\u2728\u2728 New features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"relatedness estimators (see blog for tutorial)"),(0,l.kt)("li",{parentName:"ul"},"internal functions:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"loci_dataframe")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"loci_matrix")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nonmissings")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pairwise_pairs")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"pairwiseidentical()")," to compare percent identical loci"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"phase()")," method"),(0,l.kt)("li",{parentName:"ul"},"Structure/fastStructure file IO")),(0,l.kt)("h4",{id:"-improvements-5"},"\u26a1\u26a1 Improvements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"some internal function locations moved around (housekeeping)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nancycats()")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"gulfsharks()")," are being phased out in favor of ",(0,l.kt)("inlineCode",{parentName:"li"},"@nancycats")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"@gulfsharks"),". (You will see deprecation warning)"),(0,l.kt)("li",{parentName:"ul"},"documentation (Docusaurus) upgrades",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"edit button now correctly works on blog posts"))),(0,l.kt)("li",{parentName:"ul"},"B/VCF reader rewritten (see docs)")))}k.isMDXComponent=!0}}]);