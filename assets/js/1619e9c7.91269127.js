"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[2343],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return s}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,s=m["".concat(p,".").concat(f)]||m[f]||u[f]||l;return n?a.createElement(s,o(o({ref:t},d),{},{components:n})):a.createElement(s,o({ref:t},d))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2245:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return s},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return m}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={id:"variantcall",title:"VariantCall.jl",sidebar_label:"VariantCall.jl"},p=void 0,c={unversionedId:"api/PopGenCore/variantcall",id:"api/PopGenCore/variantcall",title:"VariantCall.jl",description:"PopGenCore.jl/src/io/VariantCall.jl",source:"@site/docs/api/PopGenCore/VariantCall.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/variantcall",permalink:"/PopGen.jl/docs/api/PopGenCore/variantcall",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/VariantCall.md",tags:[],version:"current",lastUpdatedAt:1653413800,formattedLastUpdatedAt:"May 24, 2022",frontMatter:{id:"variantcall",title:"VariantCall.jl",sidebar_label:"VariantCall.jl"},sidebar:"docs",previous:{title:"PopData.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/types"},next:{title:"Cross.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_cross"}},d={},m=[{value:"PopGenCore.jl/src/io/VariantCall.jl",id:"popgencorejlsrciovariantcalljl",level:2},{value:"\ud83d\udce6  openvcf",id:"--openvcf",level:3},{value:"\ud83d\udfea bcf",id:"-bcf",level:3},{value:"Mixed-ploidy data",id:"mixed-ploidy-data",level:4},{value:"\ud83d\udfea vcf",id:"-vcf",level:3},{value:"Mixed-ploidy data",id:"mixed-ploidy-data-1",level:4}],u={toc:m},f="wrapper";function s(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)(f,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"popgencorejlsrciovariantcalljl"},"PopGenCore.jl/src/io/VariantCall.jl"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,l.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udfea  exported by PopGenCore.jl"),(0,l.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,l.kt)("h3",{id:"--openvcf"},"\ud83d\udce6  openvcf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"openvcf(::String)\n")),(0,l.kt)("p",null,"Open VCF file (",(0,l.kt)("inlineCode",{parentName:"p"},".vcf(.gz)")," or ",(0,l.kt)("inlineCode",{parentName:"p"},".bcf(.gz)"),") and return an ",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," stream in reading mode ",(0,l.kt)("inlineCode",{parentName:"p"},'"r"'),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-bcf"},"\ud83d\udfea bcf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bcf(infile::String; ; rename_loci::Bool, silent::Bool, allow_monomorphic::Bool)\n")),(0,l.kt)("p",null,"Load a BCF file into memory as a PopData object. Population information needs to be provided separately. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"infile")," : path to BCF file (can be gzipped)")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Keyword Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rename_loci"),' : true/false of whether to simplify loci names to "snp_#" (default: ',(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_monomorphic")," : true/false of whether to keep monomorphic loci (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"silent"),": true/false of whether to print extra file information (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),").\nAlleles are recoded according to the following schema:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Base"),(0,l.kt)("th",{parentName:"tr",align:"center"},"A"),(0,l.kt)("th",{parentName:"tr",align:"center"},"T"),(0,l.kt)("th",{parentName:"tr",align:"center"},"C"),(0,l.kt)("th",{parentName:"tr",align:"center"},"G"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"Allele")),(0,l.kt)("td",{parentName:"tr",align:"center"},"1"),(0,l.kt)("td",{parentName:"tr",align:"center"},"2"),(0,l.kt)("td",{parentName:"tr",align:"center"},"3"),(0,l.kt)("td",{parentName:"tr",align:"center"},"4")))),(0,l.kt)("h4",{id:"mixed-ploidy-data"},"Mixed-ploidy data"),(0,l.kt)("p",null,"If importing mixed-ploidy data (such as poolseq), you will need to perform an additional\nstep to convert the genotype column into the correct ",(0,l.kt)("inlineCode",{parentName:"p"},"GenoArray")," type:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},'julia> mydata = bcf("path/to/file.bcf", silent = true, rename_loci = true) ;\njulia> mydata.genodata.genotype =  mydata.genodata.genotype |> Array{Union{Missing, NTuple}}\n')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-vcf"},"\ud83d\udfea vcf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"vcf(infile::String; ; rename_loci::Bool, silent::Bool, allow_monomorphic::Bool)\n")),(0,l.kt)("p",null,"Load a VCF file into memory as a PopData object. Population information needs to be provided separately. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"infile")," : path to VCF file (can be gzipped)")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Keyword Arguments")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"rename_loci"),' : true/false of whether to simplify loci names to "snp_#" (default: ',(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_monomorphic")," : true/false of whether to keep monomorphic loci (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"silent"),": true/false of whether to print extra file information (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),").\nAlleles are recoded according to the following schema:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Base"),(0,l.kt)("th",{parentName:"tr",align:"center"},"A"),(0,l.kt)("th",{parentName:"tr",align:"center"},"T"),(0,l.kt)("th",{parentName:"tr",align:"center"},"C"),(0,l.kt)("th",{parentName:"tr",align:"center"},"G"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"Allele")),(0,l.kt)("td",{parentName:"tr",align:"center"},"1"),(0,l.kt)("td",{parentName:"tr",align:"center"},"2"),(0,l.kt)("td",{parentName:"tr",align:"center"},"3"),(0,l.kt)("td",{parentName:"tr",align:"center"},"4")))),(0,l.kt)("h4",{id:"mixed-ploidy-data-1"},"Mixed-ploidy data"),(0,l.kt)("p",null,"If importing mixed-ploidy data (such as poolseq), you will need to perform an additional\nstep to convert the genotype column into the correct ",(0,l.kt)("inlineCode",{parentName:"p"},"GenoArray")," type:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},'julia> mydata = vcf("path/to/file.vcf", silent = true, rename_loci = true) ;\njulia> mydata.genodata.genotype =  mydata.genodata.genotype |> Array{Union{Missing, NTuple}}\n')))}s.isMDXComponent=!0}}]);