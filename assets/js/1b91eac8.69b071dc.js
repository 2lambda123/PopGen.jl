"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[6802],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var r=a.createContext({}),s=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(r.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=l,f=d["".concat(r,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var r in t)hasOwnProperty.call(t,r)&&(p[r]=t[r]);p.originalType=e,p.mdxType="string"==typeof e?e:l,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3049:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return r},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),o=["components"],p={id:"popgensims_utils",title:"Utils.jl",sidebar_label:"Utils.jl"},r=void 0,s={unversionedId:"api/PopGenSims/popgensims_utils",id:"api/PopGenSims/popgensims_utils",isDocsHomePage:!1,title:"Utils.jl",description:"PopGenSims.jl/src/Utils.jl",source:"@site/docs/api/PopGenSims/Utils.md",sourceDirName:"api/PopGenSims",slug:"/api/PopGenSims/popgensims_utils",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_utils",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenSims/Utils.md",tags:[],version:"current",lastUpdatedAt:1635528951,formattedLastUpdatedAt:"10/29/2021",frontMatter:{id:"popgensims_utils",title:"Utils.jl",sidebar_label:"Utils.jl"},sidebar:"docs",previous:{title:"Sibship.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_sibship"}},c=[{value:"PopGenSims.jl/src/Utils.jl",id:"popgensimsjlsrcutilsjl",children:[{value:"\u26ab append!",id:"-append",children:[],level:3},{value:"\u26ab append",id:"-append-1",children:[],level:3},{value:"\u2757allele_pool",id:"allele_pool",children:[],level:3},{value:"\u2757simulate_sample",id:"simulate_sample",children:[],level:3},{value:"\u2757feature_req",id:"feature_req",children:[],level:3}],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,l.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"popgensimsjlsrcutilsjl"},"PopGenSims.jl/src/Utils.jl"),(0,i.kt)("p",null,"\u2757 => not exported |\n\u26ab => exported by PopGenSims.jl"),(0,i.kt)("h3",{id:"-append"},"\u26ab append!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"append!(data::PopData, data2::PopData)\n")),(0,i.kt)("p",null,"Add the rows of ",(0,i.kt)("inlineCode",{parentName:"p"},"data2")," to the end of ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),". This will add the samples present\nin the second ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object to the first ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object (mutating it).\n",(0,i.kt)("strong",{parentName:"p"},"Note")," that this is a simple appending, and you risk corrupting your ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," if\nthe two ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," objects do not have identical loci."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'julia> cats = @nancycats\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 237\n  Populations: 17\n\njulia> purrfect_pairs = cross(cats, "N200", "N7", generation = "F1")\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 100\n  Populations: 1\n\njulia> append!(cats, purrfect_pairs);\n\njulia> cats\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 337\n  Populations: 18\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-append-1"},"\u26ab append"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"append(data::PopData, data2::PopData)\n")),(0,i.kt)("p",null,"Add the rows of ",(0,i.kt)("inlineCode",{parentName:"p"},"data2")," to the end of ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),". This will combine the samples present\nin both ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," objects and return a new ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object. ",(0,i.kt)("strong",{parentName:"p"},"Note")," that this is\na simple appending, and you risk corrupting your ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," if the two ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData"),"\nobjects do not have identical loci."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'julia> cats = @nanycats\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 237\n  Populations: 17\n\n\njulia> purrfect_pairs = cross(cats, "N200", "N7", generation = "F1")\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 100\n  Populations: 1\n\njulia> merged_cats = append(cats, purrfect_pairs)\nPopData{Diploid, 9 Microsatellite Loci}\n  Samples: 337\n  Populations: 18\n')),(0,i.kt)("h3",{id:"allele_pool"},"\u2757allele_pool"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"allele_pool(locus::T) where T <: GenoArray\nallele_pool(data::PopData)\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"simulate_sample"},"\u2757simulate_sample"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate_sample(alleles::Dict{String,NTuple}, loc::Vector{String}; ploidy::Int)\n")),(0,i.kt)("p",null,"Using a global allele pool given by a Dict{loci,alleles} and a list of loci (",(0,i.kt)("inlineCode",{parentName:"p"},"loc"),"), simulate\nan individual with a given ",(0,i.kt)("inlineCode",{parentName:"p"},"ploidy"),". Returns a Vector of genotypes."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"julia> cats = @nancycats ;\njulia> loc, alleles = allele_pool(cats) ;\njulia> simulate_sample(alleles, loc, ploidy = 2)\n9-element Array{Array{Int16,1},1}:\n [139, 129]\n [146, 146]\n [145, 141]\n [126, 126]\n [150, 148]\n [148, 140]\n [185, 199]\n [91, 113]\n [208, 208]\n")),(0,i.kt)("h3",{id:"feature_req"},"\u2757feature_req"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"feature_req\n")),(0,i.kt)("p",null,"Returns the text: ",(0,i.kt)("inlineCode",{parentName:"p"},'"Please open an Issue or Pull Request on https://www.github.com/pdimens/PopGenSims.jl if you would like this feature implemented"')))}d.isMDXComponent=!0}}]);