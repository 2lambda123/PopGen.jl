"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[2512],{3905:function(e,a,n){n.d(a,{Zo:function(){return c},kt:function(){return f}});var t=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=t.createContext({}),s=function(e){var a=t.useContext(u),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=s(e.components);return t.createElement(u.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=l,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||r;return n?t.createElement(f,o(o({ref:a},c),{},{components:n})):t.createElement(f,o({ref:a},c))}));function f(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var u in a)hasOwnProperty.call(a,u)&&(i[u]=a[u]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:function(e,a,n){n.d(a,{Z:function(){return o}});var t=n(7294),l=n(6010),r={tabItem:"tabItem_Ymn6"};function o(e){var a=e.children,n=e.hidden,o=e.className;return t.createElement("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,o),hidden:n},a)}},4866:function(e,a,n){n.d(a,{Z:function(){return N}});var t=n(7462),l=n(7294),r=n(6010),o=n(2466),i=n(6550),u=n(1980),s=n(7392),c=n(12);function p(e){return function(e){var a,n;return null!=(a=null==(n=l.Children.map(e,(function(e){if(!e||(0,l.isValidElement)(e)&&(a=e.props)&&"object"==typeof a&&"value"in a)return e;var a;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?a:[]}(e).map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes,default:a.default}}))}function d(e){var a=e.values,n=e.children;return(0,l.useMemo)((function(){var e=null!=a?a:p(n);return function(e){var a=(0,s.l)(e,(function(e,a){return e.value===a.value}));if(a.length>0)throw new Error('Docusaurus error: Duplicate values "'+a.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[a,n])}function m(e){var a=e.value;return e.tabValues.some((function(e){return e.value===a}))}function f(e){var a=e.queryString,n=void 0!==a&&a,t=e.groupId,r=(0,i.k6)(),o=function(e){var a=e.queryString,n=void 0!==a&&a,t=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,u._X)(o),(0,l.useCallback)((function(e){if(o){var a=new URLSearchParams(r.location.search);a.set(o,e),r.replace(Object.assign({},r.location,{search:a.toString()}))}}),[o,r])]}function g(e){var a,n,t,r,o=e.defaultValue,i=e.queryString,u=void 0!==i&&i,s=e.groupId,p=d(e),g=(0,l.useState)((function(){return function(e){var a,n=e.defaultValue,t=e.tabValues;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+t.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var l=null!=(a=t.find((function(e){return e.default})))?a:t[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:o,tabValues:p})})),b=g[0],y=g[1],v=f({queryString:u,groupId:s}),k=v[0],h=v[1],N=(a=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),n=(0,c.Nk)(a),t=n[0],r=n[1],[t,(0,l.useCallback)((function(e){a&&r.set(e)}),[a,r])]),T=N[0],w=N[1],j=function(){var e=null!=k?k:T;return m({value:e,tabValues:p})?e:null}();return(0,l.useLayoutEffect)((function(){j&&y(j)}),[j]),{selectedValue:b,selectValue:(0,l.useCallback)((function(e){if(!m({value:e,tabValues:p}))throw new Error("Can't select invalid tab value="+e);y(e),h(e),w(e)}),[h,w,p]),tabValues:p}}var b=n(2389),y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){var a=e.className,n=e.block,i=e.selectedValue,u=e.selectValue,s=e.tabValues,c=[],p=(0,o.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var a=e.currentTarget,n=c.indexOf(a),t=s[n].value;t!==i&&(p(a),u(t))},m=function(e){var a,n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var t,l=c.indexOf(e.currentTarget)+1;n=null!=(t=c[l])?t:c[0];break;case"ArrowLeft":var r,o=c.indexOf(e.currentTarget)-1;n=null!=(r=c[o])?r:c[c.length-1]}null==(a=n)||a.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},a)},s.map((function(e){var a=e.value,n=e.label,o=e.attributes;return l.createElement("li",(0,t.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:function(e){return c.push(e)},onKeyDown:m,onClick:d},o,{className:(0,r.Z)("tabs__item",y.tabItem,null==o?void 0:o.className,{"tabs__item--active":i===a})}),null!=n?n:a)})))}function k(e){var a=e.lazy,n=e.children,t=e.selectedValue,r=(Array.isArray(n)?n:[n]).filter(Boolean);if(a){var o=r.find((function(e){return e.props.value===t}));return o?(0,l.cloneElement)(o,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map((function(e,a){return(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==t})})))}function h(e){var a=g(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",y.tabList)},l.createElement(v,(0,t.Z)({},e,a)),l.createElement(k,(0,t.Z)({},e,a)))}function N(e){var a=(0,b.Z)();return l.createElement(h,(0,t.Z)({key:String(a)},e))}},5938:function(e,a,n){n.r(a),n.d(a,{assets:function(){return d},contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var t=n(7462),l=n(3366),r=(n(7294),n(3905)),o=n(4866),i=n(5162),u=["components"],s={id:"dataexploration",title:"Data Exploration",sidebar_label:"Data exploration"},c=void 0,p={unversionedId:"popdata/dataexploration",id:"popdata/dataexploration",title:"Data Exploration",description:"Allele frequency table",source:"@site/docs/popdata/dataexploration.md",sourceDirName:"popdata",slug:"/popdata/dataexploration",permalink:"/PopGen.jl/docs/popdata/dataexploration",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/popdata/dataexploration.md",tags:[],version:"current",lastUpdatedAt:1659107979,formattedLastUpdatedAt:"Jul 29, 2022",frontMatter:{id:"dataexploration",title:"Data Exploration",sidebar_label:"Data exploration"},sidebar:"docs",previous:{title:"Location data",permalink:"/PopGen.jl/docs/popdata/locationdata"},next:{title:"Advanced Indexing",permalink:"/PopGen.jl/docs/popdata/advancedindexing"}},d={},m=[{value:"Allele frequency table",id:"allele-frequency-table",level:2},{value:"Genotype frequency table",id:"genotype-frequency-table",level:2},{value:"Missing Data",id:"missing-data",level:2},{value:"Pairwise Identical Genotypes",id:"pairwise-identical-genotypes",level:2},{value:"Allelic Richness",id:"allelic-richness",level:2},{value:"Average Number of Alleles",id:"average-number-of-alleles",level:2},{value:"Summary Statistics",id:"summary-statistics",level:2}],f={toc:m},g="wrapper";function b(e){var a=e.components,n=(0,l.Z)(e,u);return(0,r.kt)(g,(0,t.Z)({},f,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"allele-frequency-table"},"Allele frequency table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'allelefreqtable(data::PopData; by::Union{String, Symbol} = "global")\n')),(0,r.kt)("p",null,"Return a table of the observed ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," (default) or ",(0,r.kt)("inlineCode",{parentName:"p"},"population")," allele frequencies in a PopData object. Use this if you want to see what the frequencies are for every allele at every locus."),(0,r.kt)(o.Z,{block:!0,defaultValue:"g",values:[{label:"global",value:"g"},{label:"population",value:"p"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"g",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats ;\n\njulia> allelefreqtable(cats)\n108\xd74 DataFrame\n Row \u2502 locus   allele  count  frequency  \n     \u2502 String  Int16?  Int64  Float64    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8       135    105  0.241935\n   2 \u2502 fca8       143     44  0.101382\n   3 \u2502 fca8       133     33  0.0760369\n   4 \u2502 fca8       137     83  0.191244\n  \u22ee  \u2502   \u22ee       \u22ee       \u22ee        \u22ee\n 105 \u2502 fca37      226      2  0.00421941\n 106 \u2502 fca37      216      7  0.0147679\n 107 \u2502 fca37      224      2  0.00421941\n 108 \u2502 fca37      204      6  0.0126582\n                         100 rows omitted\n"))),(0,r.kt)(i.Z,{value:"p",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats ;\n\njulia> allelefreqtable(cats, by = "population")\n839\xd75 DataFrame\n Row \u2502 locus   population  allele  count  frequency \n     \u2502 String  String      Int16?  Int64  Float64   \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8    1              135      9  0.5625\n   2 \u2502 fca8    1              143      4  0.25\n   3 \u2502 fca8    1              133      2  0.125\n   4 \u2502 fca8    1              137      1  0.0625\n  \u22ee  \u2502   \u22ee         \u22ee         \u22ee       \u22ee        \u22ee\n 836 \u2502 fca37   16             210      5  0.208333\n 837 \u2502 fca37   17             208     22  0.846154\n 838 \u2502 fca37   17             182      3  0.115385\n 839 \u2502 fca37   17             220      1  0.0384615\n                                    831 rows omitted\n')))),(0,r.kt)("h2",{id:"genotype-frequency-table"},"Genotype frequency table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'genofreqtable(data::PopData; by::Union{String, Symbol} = "global")\n')),(0,r.kt)("p",null,"Return a table of the observed ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," (default) or ",(0,r.kt)("inlineCode",{parentName:"p"},"population")," genotype frequencies in a PopData object. Use this if you want to see what the frequencies are for every genotype at every locus."),(0,r.kt)(o.Z,{block:!0,defaultValue:"g",values:[{label:"global",value:"g"},{label:"population",value:"p"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"g",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats ;\n\njulia> genofreqtable(cats)\n341\xd74 DataFrame\n Row \u2502 locus   genotype    count  frequency  \n     \u2502 String  Tuple\u2026      Int64  Float64    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8    (135, 143)     16  0.0737327\n   2 \u2502 fca8    (133, 135)      9  0.0414747\n   3 \u2502 fca8    (135, 135)     23  0.105991\n   4 \u2502 fca8    (137, 143)      8  0.0368664\n  \u22ee  \u2502   \u22ee         \u22ee         \u22ee        \u22ee\n 338 \u2502 fca37   (206, 220)      1  0.00421941\n 339 \u2502 fca37   (208, 218)      1  0.00421941\n 340 \u2502 fca37   (184, 184)      3  0.0126582\n 341 \u2502 fca37   (208, 210)      3  0.0126582\n                             333 rows omitted\n"))),(0,r.kt)(i.Z,{value:"p",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats ;\n\njulia> genofreqtable(cats, by = "population")\n1094\xd75 DataFrame\n  Row \u2502 locus   population  genotype    count  frequency         \n      \u2502 String  String      Tuple\u2026      Int64  Float64           \n\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500        \n    1 \u2502 fca8    1           (135, 143)      3  0.375\n    2 \u2502 fca8    1           (133, 135)      2  0.25\n    3 \u2502 fca8    1           (135, 135)      2  0.25\n    4 \u2502 fca8    1           (137, 143)      1  0.125\n  \u22ee   \u2502   \u22ee         \u22ee           \u22ee         \u22ee        \u22ee\n 1091 \u2502 fca37   17          (208, 208)     10  0.769231\n 1092 \u2502 fca37   17          (182, 182)      1  0.0769231\n 1093 \u2502 fca37   17          (182, 208)      1  0.0769231\n 1094 \u2502 fca37   17          (208, 220)      1  0.0769231\n                                        1086 rows omitted \n')))),(0,r.kt)("h2",{id:"missing-data"},"Missing Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'missingdata(data::PopData; by::Union{String, Symbol} = "sample")\n')),(0,r.kt)("p",null,"Get missing genotype information in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object. Specify a mode of operation using the ",(0,r.kt)("inlineCode",{parentName:"p"},"by =")," keyword to return a table corresponding with that missing information type."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"by"),(0,r.kt)("th",{parentName:"tr",align:null},"what it does"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},'"sample"')),(0,r.kt)("td",{parentName:"tr",align:null},"returns a count of missing loci per individual (default)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},'"population"')),(0,r.kt)("td",{parentName:"tr",align:null},"returns a count of missing genotypes per population")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},'"locus"')),(0,r.kt)("td",{parentName:"tr",align:null},"returns a count of missing genotypes per locus")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},'"locusxpopulation"')),(0,r.kt)("td",{parentName:"tr",align:null},"returns a count of missing genotypes per locus per population")))),(0,r.kt)(o.Z,{block:!0,defaultValue:"s",values:[{label:"sample",value:"s"},{label:"population",value:"p"},{label:"locus",value:"l"},{label:"locusxpopulation",value:"f"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"s",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"julia> sharks = @gulfsharks ;\n\njulia> missingdata(sharks)\n212\xd72 DataFrame\n Row \u2502 name     missing\n     \u2502 String   Int64\n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 cc_001       124\n   2 \u2502 cc_002        94\n   3 \u2502 cc_003       100\n   4 \u2502 cc_005         0\n   5 \u2502 cc_007         2\n   6 \u2502 cc_008         1\n   7 \u2502 cc_009         2\n  \u22ee  \u2502    \u22ee        \u22ee\n 206 \u2502 seg_025        0\n 207 \u2502 seg_026        0\n 208 \u2502 seg_027        2\n 209 \u2502 seg_028       25\n 210 \u2502 seg_029        0\n 211 \u2502 seg_030        1\n 212 \u2502 seg_031        1\n        198 rows omitted\n"))),(0,r.kt)(i.Z,{value:"p",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'julia> sharks = @gulfsharks ;\n\njulia> missingdata(sharks, by = "population")\n7\xd72 DataFrame\n Row \u2502 population      missing\n     \u2502 String          Int64\n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 Cape Canaveral      666\n   2 \u2502 Georgia             423\n   3 \u2502 South Carolina      233\n   4 \u2502 Florida Keys       1241\n   5 \u2502 Mideast Gulf         99\n   6 \u2502 Northeast Gulf      472\n   7 \u2502 Southeast Gulf     1504\n'))),(0,r.kt)(i.Z,{value:"l",mdxType:"TabItem"},"s",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'julia> sharks = @gulfsharks ;\n\njulia> missingdata(sharks, by = "locus")\n2209\xd72 DataFrame\n  Row \u2502 locus         missing\n      \u2502 String        Int64\n\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    1 \u2502 contig_35208        0\n    2 \u2502 contig_23109        6\n    3 \u2502 contig_4493         3\n    4 \u2502 contig_10742        2\n    5 \u2502 contig_14898        0\n    6 \u2502 contig_8483         0\n    7 \u2502 contig_8065         0\n  \u22ee   \u2502      \u22ee           \u22ee\n 2203 \u2502 contig_18959        0\n 2204 \u2502 contig_43517        6\n 2205 \u2502 contig_27356        2\n 2206 \u2502 contig_475          0\n 2207 \u2502 contig_19384        5\n 2208 \u2502 contig_22368        3\n 2209 \u2502 contig_2784         7\n             2195 rows omitted\n'))),(0,r.kt)(i.Z,{value:"f",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'julia> sharks = @gulfsharks ;\n\njulia> missingdata(sharks, by = "locusxpopulation")\n15463\xd73 DataFrame\n   Row \u2502 locus         population      missing\n       \u2502 String        String          Int64\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n     1 \u2502 contig_35208  Cape Canaveral        0\n     2 \u2502 contig_35208  Georgia               0\n     3 \u2502 contig_35208  South Carolina        0\n     4 \u2502 contig_35208  Florida Keys          0\n     5 \u2502 contig_35208  Mideast Gulf          0\n     6 \u2502 contig_35208  Northeast Gulf        0\n     7 \u2502 contig_35208  Southeast Gulf        0\n   \u22ee   \u2502      \u22ee              \u22ee            \u22ee\n 15457 \u2502 contig_2784   Cape Canaveral        0\n 15458 \u2502 contig_2784   Georgia               2\n 15459 \u2502 contig_2784   South Carolina        1\n 15460 \u2502 contig_2784   Florida Keys          2\n 15461 \u2502 contig_2784   Mideast Gulf          1\n 15462 \u2502 contig_2784   Northeast Gulf        0\n 15463 \u2502 contig_2784   Southeast Gulf        1\n                             15449 rows omitted\n')))),(0,r.kt)("h2",{id:"pairwise-identical-genotypes"},"Pairwise Identical Genotypes"),(0,r.kt)("p",null,"While not a substitute for a ",(0,r.kt)("a",{parentName:"p",href:"docs/analyses/kinship"},"kinship analysis"),", it may be useful to know or verify how similar your data are in a very literal sense:\nhow many identical genotypes do two individuals have across all loci? To do this, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"pairwiseidentical()")," to perform an all x all comparison of identical genotypes. This can be done for all individuals in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object, or restricted to a specific set of individuals:"),(0,r.kt)(o.Z,{block:!0,defaultValue:"a",values:[{label:"all samples",value:"a"},{label:"some samples",value:"s"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"a",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> pairwiseidentical(cats)\n27966\xd74 DataFrame\n   Row \u2502 sample_1  sample_2  identical  n     \n       \u2502 String    String    Float64    Int64 \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n     1 \u2502 N215      N216           0.5       8\n     2 \u2502 N215      N217           0.25      8\n     3 \u2502 N215      N218           0.38      8\n     4 \u2502 N215      N219           0.38      8\n   \u22ee   \u2502    \u22ee         \u22ee          \u22ee        \u22ee\n 27963 \u2502 N297      N290           0.29      7\n 27964 \u2502 N281      N289           0.25      8\n 27965 \u2502 N281      N290           0.43      7\n 27966 \u2502 N289      N290           0.14      7\n                            27958 rows omitted\n"))),(0,r.kt)(i.Z,{value:"s",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats;\n\njulia> interesting_cats = samplenames(cats)[1:5]\n5-element Array{String,1}:\n "N215"\n "N216"\n "N217"\n "N218"\n "N219"\n\njulia> pairwiseidentical(cats, interesting_cats)\n10\xd74 DataFrame\n Row \u2502 sample_1  sample_2  identical  n     \n     \u2502 String    String    Float64    Int64 \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 N215      N216           0.5       8 \n   2 \u2502 N215      N217           0.25      8 \n   3 \u2502 N215      N218           0.38      8 \n   4 \u2502 N215      N219           0.38      8 \n   5 \u2502 N216      N217           0.12      8 \n   6 \u2502 N216      N218           0.25      8 \n   7 \u2502 N216      N219           0.38      8 \n   8 \u2502 N217      N218           0.0       9 \n   9 \u2502 N217      N219           0.11      9 \n  10 \u2502 N218      N219           0.33      9 \n')))),(0,r.kt)("h2",{id:"allelic-richness"},"Allelic Richness"),(0,r.kt)("p",null,"If you were curious about allelic richness (number of alleles per locus), then you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"richness()")," to find that out. Use ",(0,r.kt)("inlineCode",{parentName:"p"},'by = "population"')," to return a table by locus by population."),(0,r.kt)(o.Z,{block:!0,defaultValue:"l",values:[{label:"by locus",value:"l"},{label:"by locusxpopulation",value:"p"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"l",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> richness(cats)\n9\xd72 DataFrame\n Row \u2502 locus   richness \n     \u2502 String  Int64    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8          16\n   2 \u2502 fca23         11\n   3 \u2502 fca43         10\n   4 \u2502 fca45          9\n   5 \u2502 fca77         12\n   6 \u2502 fca78          8\n   7 \u2502 fca90         12\n   8 \u2502 fca96         12\n   9 \u2502 fca37         18\n"))),(0,r.kt)(i.Z,{value:"p",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> richness(cats, by = "population")\n153\xd73 DataFrame\n Row \u2502 locus   population  richness \n     \u2502 String  String      Int64    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8    1                  4\n   2 \u2502 fca8    2                  6\n   3 \u2502 fca8    3                  7\n   4 \u2502 fca8    4                 10\n  \u22ee  \u2502   \u22ee         \u22ee          \u22ee\n 150 \u2502 fca37   14                 3\n 151 \u2502 fca37   15                 4\n 152 \u2502 fca37   16                 3\n 153 \u2502 fca37   17                 3\n                    145 rows omitted\n')))),(0,r.kt)("h2",{id:"average-number-of-alleles"},"Average Number of Alleles"),(0,r.kt)("p",null,"Similar to richness, if you wanted to know the average number of alleles per locus, use ",(0,r.kt)("inlineCode",{parentName:"p"},"alleleavg()"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"rounding = false")," if you don't want the answer rounded to 4 decimal places."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> alleleavg(@nancycats)\n(mean = 12.0, stdev = 0.2668)\n\njulia> alleleavg(@nancycats, rounding = false)\n(mean = 12.0, stdev = 0.2667968432263687)\n")),(0,r.kt)("h2",{id:"summary-statistics"},"Summary Statistics"),(0,r.kt)("p",null,"Population genetics famously includes all manner of coefficients with which to summarize data. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"summary()")," to view FST, DST, HT, etc. (like ",(0,r.kt)("inlineCode",{parentName:"p"},"Hierfstat::basic.stats"),"). "),(0,r.kt)(o.Z,{block:!0,defaultValue:"g",values:[{label:"global",value:"g"},{label:"by locus",value:"l"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"g",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> summary(@nancycats)\n1\xd710 DataFrame\n Row \u2502 Het_obs  HS       HT       DST      HT\u2032      DST\u2032     FST      FST\u2032     FIS      DEST\n     \u2502 Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64\n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502  0.6299   0.7083   0.7717   0.0634   0.7757   0.0674   0.0821   0.0869   0.1108    0.231\n"))),(0,r.kt)(i.Z,{value:"l",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> summary(@nancycats, by = "locus")\n9\xd711 DataFrame\n Row \u2502 locus   Het_obs  HS       HT       DST      HT\u2032      DST\u2032     FST      FST\u2032     FIS      DEST\n     \u2502 String  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64  Float64\n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8     0.667    0.779    0.8619   0.0829   0.8671   0.0881   0.0962   0.1016   0.1438   0.3987\n   2 \u2502 fca23    0.6838   0.7439   0.7994   0.0555   0.8029   0.0589   0.0694   0.0734   0.0809   0.2302\n   3 \u2502 fca43    0.6814   0.7442   0.7937   0.0495   0.7968   0.0526   0.0623   0.066    0.0844   0.2054\n   4 \u2502 fca45    0.71     0.7085   0.7642   0.0557   0.7679   0.0594   0.0729   0.0774  -0.0021   0.2039\n   5 \u2502 fca77    0.6295   0.7828   0.8659   0.0831   0.8711   0.0883   0.096    0.1014   0.1958   0.4067\n   6 \u2502 fca78    0.5773   0.6339   0.6773   0.0434   0.6801   0.0462   0.0641   0.0679   0.0893   0.1261\n   7 \u2502 fca90    0.6454   0.7408   0.8144   0.0736   0.819    0.0782   0.0904   0.0955   0.1287   0.3017\n   8 \u2502 fca96    0.6259   0.6747   0.7657   0.091    0.7714   0.0967   0.1189   0.1254   0.0723   0.2973\n   9 \u2502 fca37    0.4485   0.5671   0.6027   0.0356   0.6049   0.0379   0.0591   0.0626   0.2091   0.0874\n')))),(0,r.kt)("admonition",{title:"prime symbol",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The column names above use the unicode prime symbol ",(0,r.kt)("inlineCode",{parentName:"p"},"\u2032"),' to better reflect the actual coefficient ("FST prime" etc.). To print that character, press ',(0,r.kt)("inlineCode",{parentName:"p"},"\\prime<TAB>"),", which reads \"backslash, the word 'prime', and the TAB button\".")))}b.isMDXComponent=!0}}]);