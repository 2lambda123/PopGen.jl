"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[5883],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=m(n),c=i,k=d["".concat(p,".").concat(c)]||d[c]||s[c]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2110:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(4137)),l=["components"],o={id:"plink",title:"Plink",sidebar_label:"Plink"},p=void 0,m={unversionedId:"io/plink",id:"io/plink",title:"Plink",description:"Import PLINK files as PopData",source:"@site/docs/io/plink.md",sourceDirName:"io",slug:"/io/plink",permalink:"/PopGen.jl/docs/io/plink",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/io/plink.md",tags:[],version:"current",lastUpdatedAt:1658771861,formattedLastUpdatedAt:"Jul 25, 2022",frontMatter:{id:"plink",title:"Plink",sidebar_label:"Plink"},sidebar:"docs",previous:{title:"Genepop",permalink:"/PopGen.jl/docs/io/genepop"},next:{title:"Structure",permalink:"/PopGen.jl/docs/io/structure"}},u={},d=[{value:"Import PLINK files as <code>PopData</code>",id:"import-plink-files-as-popdata",level:2},{value:"Keyword Arguments",id:"keyword-arguments",level:3},{value:"Write PopData to PLINK format",id:"write-popdata-to-plink-format",level:2}],s={toc:d},c="wrapper";function k(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"import-plink-files-as-popdata"},"Import PLINK files as ",(0,r.kt)("inlineCode",{parentName:"h2"},"PopData")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"plink(infile::String; keepfields::Symbol|Vector{Symbol}, silent::Bool)\n")),(0,r.kt)("p",null,"Read a PLINK ",(0,r.kt)("inlineCode",{parentName:"p"},".ped")," or binary ",(0,r.kt)("inlineCode",{parentName:"p"},".bed")," file into memory as a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object.\nRequires an accompanying ",(0,r.kt)("inlineCode",{parentName:"p"},".fam")," file in the same directory, but an accompanying ",(0,r.kt)("inlineCode",{parentName:"p"},".bim")," file is optional."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"infile::String")," : path to ",(0,r.kt)("inlineCode",{parentName:"li"},".ped")," or ",(0,r.kt)("inlineCode",{parentName:"li"},".bed")," file")),(0,r.kt)("h3",{id:"keyword-arguments"},"Keyword Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"famfields::Symbol|Vector{Symbol}"),": which additional fields to import from the ",(0,r.kt)("inlineCode",{parentName:"li"},".fam")," file",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":all")," (default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":none")),(0,r.kt)("li",{parentName:"ul"},"any one or combination of ",(0,r.kt)("inlineCode",{parentName:"li"},"[:sire, :dam, :sex, :phenotype]")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bimfields::Symbol|Vector{Symbol}"),": which additional fields to import from the optional ",(0,r.kt)("inlineCode",{parentName:"li"},".bim")," file",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":all")," (default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":none")),(0,r.kt)("li",{parentName:"ul"},"any one or combination of ",(0,r.kt)("inlineCode",{parentName:"li"},"[:chromosome, :cm, :bp]")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"silent::Bool"),": whether to print file information during import (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'# assumes there is parakeet.ped + parakeet.fam in same directory\njulia> parakeet = plink("datadir/parakeet.ped", famfields = :sex)\n\n# assumes there is parrot.ped + parrot.fam in same directory\njulia> parrot = plink("datadir/parrot.bed", famfields = [:sire, :dam], bimfields = :chromosome)\n')),(0,r.kt)("h2",{id:"write-popdata-to-plink-format"},"Write PopData to PLINK format"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"plink(data::PopData; filename::String)\n")),(0,r.kt)("p",null,"Write a biallelic ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object to PLINK ",(0,r.kt)("inlineCode",{parentName:"p"},".ped")," format with an accompanying\n",(0,r.kt)("inlineCode",{parentName:"p"},".fam")," file. Genotypes are coded by the PLINK standard:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Integers are the alleles"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," encodes missing"),(0,r.kt)("li",{parentName:"ul"},"After column 6, every two numbers indicate a diploid genotype such that:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"00")," Homozygous for first allele"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"01")," Missing genotype"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"10")," Heterozygous"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"11")," Homozygous for second allele")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> sharks = dropmultiallelic(@gulfsharks) ;\njulia> plink(sharks, filename = "biallelic_sharks.ped")\n')))}k.isMDXComponent=!0}}]);