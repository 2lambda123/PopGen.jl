"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[7751],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),l=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(p.Provider,{value:e},t.children)},c="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,p=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),c=l(n),f=a,d=c["".concat(p,".").concat(f)]||c[f]||m[f]||o;return n?r.createElement(d,i(i({ref:e},u),{},{components:n})):r.createElement(d,i({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s[c]="string"==typeof t?t:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4442:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"fstpermutations",title:"FstPermutations.jl",sidebar_label:"FstPermutations.jl"},p=void 0,l={unversionedId:"api/PopGen/fstpermutations",id:"api/PopGen/fstpermutations",title:"FstPermutations.jl",description:"PopGen.jl/src/FStatistics/FstPermutations.jl",source:"@site/docs/api/PopGen/FstPermutations.md",sourceDirName:"api/PopGen",slug:"/api/PopGen/fstpermutations",permalink:"/PopGen.jl/docs/api/PopGen/fstpermutations",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGen/FstPermutations.md",tags:[],version:"current",lastUpdatedAt:1658766707,formattedLastUpdatedAt:"Jul 25, 2022",frontMatter:{id:"fstpermutations",title:"FstPermutations.jl",sidebar_label:"FstPermutations.jl"},sidebar:"docs",previous:{title:"FstGlobal.jl",permalink:"/PopGen.jl/docs/api/PopGen/fstglobal"},next:{title:"HardyWeinberg.jl",permalink:"/PopGen.jl/docs/api/PopGen/hardyweinberg"}},u={},c=[{value:"PopGen.jl/src/FStatistics/FstPermutations.jl",id:"popgenjlsrcfstatisticsfstpermutationsjl",level:2},{value:"\ud83d\udce6 _fst_permutate",id:"-_fst_permutate",level:3},{value:"\ud83d\udce6 _fst_permutation",id:"-_fst_permutation",level:3}],m={toc:c},f="wrapper";function d(t){var e=t.components,n=(0,a.Z)(t,i);return(0,o.kt)(f,(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"popgenjlsrcfstatisticsfstpermutationsjl"},"PopGen.jl/src/FStatistics/FstPermutations.jl"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,o.kt)("h3",{id:"-_fst_permutate"},"\ud83d\udce6 _fst_permutate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"_fst_permute(population_1::T, population_2::T) where T<:AbstractMatrix\n")),(0,o.kt)("p",null,"Returns two matrices with rows (samples) shuffled between them. Respects the\nnumber of rows of the original matrices (i.e. population sizes)."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-_fst_permutation"},"\ud83d\udce6 _fst_permutation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"_fst_permution(data::PopData, method::Function, iterations::Int64)\n")),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"PairwiseFST")," object containing a dataframe of Pairwise FST calculations. The contained\ndataframe has FST values below the diagonal and P values above it. This method is used internally\nand wrapped by the public API provided in ",(0,o.kt)("inlineCode",{parentName:"p"},"pairwisefst()"),"."))}d.isMDXComponent=!0}}]);