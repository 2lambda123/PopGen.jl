"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[7751],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(r),d=o,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4442:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],p={id:"fstpermutations",title:"FstPermutations.jl",sidebar_label:"FstPermutations.jl"},l=void 0,s={unversionedId:"api/PopGen/fstpermutations",id:"api/PopGen/fstpermutations",isDocsHomePage:!1,title:"FstPermutations.jl",description:"PopGen.jl/src/FStatistics/FstPermutations.jl",source:"@site/docs/api/PopGen/FstPermutations.md",sourceDirName:"api/PopGen",slug:"/api/PopGen/fstpermutations",permalink:"/PopGen.jl/docs/api/PopGen/fstpermutations",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGen/FstPermutations.md",tags:[],version:"current",lastUpdatedAt:1636029729,formattedLastUpdatedAt:"11/4/2021",frontMatter:{id:"fstpermutations",title:"FstPermutations.jl",sidebar_label:"FstPermutations.jl"},sidebar:"docs",previous:{title:"FstGlobal.jl",permalink:"/PopGen.jl/docs/api/PopGen/fstglobal"},next:{title:"HardyWeinberg.jl",permalink:"/PopGen.jl/docs/api/PopGen/hardyweinberg"}},u=[{value:"PopGen.jl/src/FStatistics/FstPermutations.jl",id:"popgenjlsrcfstatisticsfstpermutationsjl",children:[{value:"\ud83d\udce6 _fst_permutation",id:"-_fst_permutation",children:[],level:3},{value:"\ud83d\udce6 _permuted_Hudson",id:"-_permuted_hudson",children:[],level:3},{value:"\ud83d\udce6 _permuted_Nei",id:"-_permuted_nei",children:[],level:3},{value:"\ud83d\udce6 _permuted_WeirCockerham",id:"-_permuted_weircockerham",children:[],level:3}],level:2}],c={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"popgenjlsrcfstatisticsfstpermutationsjl"},"PopGen.jl/src/FStatistics/FstPermutations.jl"),(0,a.kt)("p",null,"\ud83d\udce6  => not exported |\n\ud83d\udd35 => exported by PopGen.jl"),(0,a.kt)("h3",{id:"-_fst_permutation"},"\ud83d\udce6 _fst_permutation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-julia"},"_fst_permutation(population_1::T, population_2::T) where T<:AbstractMatrix\n")),(0,a.kt)("p",null,"Returns two matrices with rows (samples) shuffled between them. Respects the\nnumber of rows of the original matrices (i.e. population sizes)."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"-_permuted_hudson"},"\ud83d\udce6 _permuted_Hudson"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-julia"},"_permuted_hudson(data::PopData, iterations::Int64)\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"-_permuted_nei"},"\ud83d\udce6 _permuted_Nei"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-julia"},"_permuted_Nei(data::PopData, iterations::Int64)\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"-_permuted_weircockerham"},"\ud83d\udce6 _permuted_WeirCockerham"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-julia"},"_permuted_WeirCockerham(data::PopData, iterations::Int64)\n")))}m.isMDXComponent=!0}}]);