"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[2876],{3905:function(e,a,t){t.d(a,{Zo:function(){return s},kt:function(){return d}});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),u=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},s=function(e){var a=u(e.components);return n.createElement(p.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(t),d=o,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||r;return t?n.createElement(h,i(i({ref:a},s),{},{components:t})):n.createElement(h,i({ref:a},s))}));function d(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8215:function(e,a,t){var n=t(7294);a.Z=function(e){var a=e.children,t=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:o},a)}},6396:function(e,a,t){t.d(a,{Z:function(){return m}});var n=t(7462),o=t(7294),r=t(2389),i=t(9443);var l=function(){var e=(0,o.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},p=t(9521),u=t(6010),s="tabItem_vU9c";function c(e){var a,t,n,r=e.lazy,i=e.block,c=e.defaultValue,m=e.values,d=e.groupId,h=e.className,f=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:f.map((function(e){var a=e.props;return{value:a.value,label:a.label}})),k=(0,p.lx)(v,(function(e,a){return e.value===a.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===c?c:null!=(a=null!=c?c:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?a:null==(n=f[0])?void 0:n.props.value;if(null!==g&&!v.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=l(),w=N.tabGroupChoices,y=N.setTabGroupChoices,b=(0,o.useState)(g),C=b[0],j=b[1],T=[],D=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var P=w[d];null!=P&&P!==C&&v.some((function(e){return e.value===P}))&&j(P)}var x=function(e){var a=e.currentTarget,t=T.indexOf(a),n=v[t].value;n!==C&&(D(a),j(n),null!=d&&y(d,n))},O=function(e){var a,t=null;switch(e.key){case"ArrowRight":var n=T.indexOf(e.currentTarget)+1;t=T[n]||T[0];break;case"ArrowLeft":var o=T.indexOf(e.currentTarget)-1;t=T[o]||T[T.length-1]}null==(a=t)||a.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":i},h)},v.map((function(e){var a=e.value,t=e.label;return o.createElement("li",{role:"tab",tabIndex:C===a?0:-1,"aria-selected":C===a,className:(0,u.Z)("tabs__item",s,{"tabs__item--active":C===a}),key:a,ref:function(e){return T.push(e)},onKeyDown:O,onFocus:x,onClick:x},null!=t?t:a)}))),r?(0,o.cloneElement)(f.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},f.map((function(e,a){return(0,o.cloneElement)(e,{key:a,hidden:e.props.value!==C})}))))}function m(e){var a=(0,r.Z)();return o.createElement(c,(0,n.Z)({key:String(a)},e))}},9443:function(e,a,t){var n=(0,t(7294).createContext)(void 0);a.Z=n},5104:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return h}});var n=t(7462),o=t(3366),r=(t(7294),t(3905)),i=t(6396),l=t(8215),p=["components"],u={id:"populationdata",title:"Population data",sidebar_label:"Population data"},s=void 0,c={unversionedId:"workingwithpopdata/populationdata",id:"workingwithpopdata/populationdata",isDocsHomePage:!1,title:"Population data",description:"Needless to say, population information is crucial for population genetics, so there are several handy tools for dealing with that information.",source:"@site/docs/workingwithpopdata/populationdata.md",sourceDirName:"workingwithpopdata",slug:"/workingwithpopdata/populationdata",permalink:"/PopGen.jl/docs/workingwithpopdata/populationdata",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/workingwithpopdata/populationdata.md",tags:[],version:"current",lastUpdatedAt:1637160245,formattedLastUpdatedAt:"11/17/2021",frontMatter:{id:"populationdata",title:"Population data",sidebar_label:"Population data"},sidebar:"docs",previous:{title:"Conditionals",permalink:"/PopGen.jl/docs/workingwithpopdata/conditionals"},next:{title:"Location data",permalink:"/PopGen.jl/docs/workingwithpopdata/locationdata"}},m=[{value:"View unique population names",id:"view-unique-population-names",children:[],level:3},{value:"Rename populations",id:"rename-populations",children:[],level:3}],d={toc:m};function h(e){var a=e.components,t=(0,o.Z)(e,p);return(0,r.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Needless to say, population information is crucial for population genetics, so there are several handy tools for dealing with that information.\nIf you need to see the population for every sample, then use ",(0,r.kt)("inlineCode",{parentName:"p"},"sampleinfo(popdata)")," to retrieve the dataframe containing sample information."),(0,r.kt)("h3",{id:"view-unique-population-names"},"View unique population names"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"populations(data::PopData; counts::Bool = false)\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"counts = false"),", returns a Vector of the unique populations present in the ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},"counts = true"),", returns a\ntable of sample counts per population."),(0,r.kt)(i.Z,{block:!0,defaultValue:"unq",values:[{label:"unique populations",value:"unq"},{label:"counts per population",value:"cou"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"unq",mdxType:"TabItem"},(0,r.kt)("p",null,"Return a vector of the unique populations. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> populations(sharks)\n7-element Array{String,1}:\n "CapeCanaveral"\n "Georgia"\n "SouthCarolina"\n "FloridaKeys"\n "MideastGulf"\n "NortheastGulf"\n "SoutheastGulf"\n'))),(0,r.kt)(l.Z,{value:"cou",mdxType:"TabItem"},(0,r.kt)("p",null,"Retrun a table of the populations and their counts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> populations(sharks, counts = true)\n7\xd72 DataFrame\n Row \u2502 population      count \n     \u2502 String          Int64 \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 Cape Canaveral     21\n   2 \u2502 Georgia            30\n   3 \u2502 South Carolina     28\n   4 \u2502 Florida Keys       65\n   5 \u2502 Mideast Gulf       28\n   6 \u2502 Northeast Gulf     20\n   7 \u2502 Southeast Gulf     20\n")))),(0,r.kt)("h3",{id:"rename-populations"},"Rename populations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, rename::Dict)\npopulations!(data::PopData, rename::Vector{String})\npopulations!(data::PopData, samples::Vector{String}, populations::Vector{String})\n")),(0,r.kt)("p",null,"There are a handful of methods to alter ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," population names depending on what you find most convenient. Each of these methods start with ",(0,r.kt)("inlineCode",{parentName:"p"},"populations!()")," and vary in their inputs. It's for that reason this function has an uncharacteristically long docstring. However, all the methods for ",(0,r.kt)("inlineCode",{parentName:"p"},"populations!")," are unified in that they edit ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," in place."),(0,r.kt)(i.Z,{block:!0,defaultValue:"dict",values:[{label:"with a Dictionary",value:"dict"},{label:"with a Vector of names",value:"vec"},{label:"reassign by sample",value:"samp"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"dict",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, rename::Dict)\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Recommended for renaming existing populations\t"))),(0,r.kt)("p",null,"Rename existing population ID's of ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," using a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dict")," of\n",(0,r.kt)("inlineCode",{parentName:"p"},"population_name => replacement"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'# create a dictionary of name conversions\njulia> new_popnames = \nDict(\n  "CapeCanaveral" => "Atlantic",\n  "Georgia" => "Atlantic",\n  "SouthCarolina" => "Atlantic",\n  "FloridaKeys" => "Gulf",\n  "MideastGulf" => "Gulf",\n  "NortheastGulf" => "Gulf",\n  "SoutheastGulf" => "Gulf"\n);  \n\njulia> populations!(sharks, new_popnames)\njulia> populations(sharks, counts = true)\n2\xd72 DataFrame\n Row \u2502 population  count \n     \u2502 String      Int64 \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 Atlantic       79\n   2 \u2502 Gulf          133\n'))),(0,r.kt)(l.Z,{value:"vec",mdxType:"TabItem"},(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"not recommended")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"These methods ",(0,r.kt)("em",{parentName:"p"},"are")," available, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dict")," method is recommended instead of (1) and the reassign-by-sample method is recommended\ninstead of (2)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, rename::Vector{String})\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"rename the unique populations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"condition"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"length(rename) == length(unique(populations))")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rename")," is a vector of new unique population names in the order that they appear in ",(0,r.kt)("inlineCode",{parentName:"li"},"sampleinfo(popdata)"),"."))),(0,r.kt)("li",{parentName:"ol"},"rename the population association for every sample",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"condition"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"length(rename) == length(samplenames(data))")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rename")," is a vector of new populations names for the samples in the order that they appear in ",(0,r.kt)("inlineCode",{parentName:"li"},"sampleinfo(popdata)"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> new_popnames = ["Atlantic", "Atlantic", "Atlantic", "Gulf", "Gulf", "Gulf", "Gulf"] ;\n\njulia> populations!(sharks, new_popnames)\njulia> populations(sharks, counts = true)\n2\xd72 DataFrame\n Row \u2502 population  count \n     \u2502 String      Int64 \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 Atlantic       79\n   2 \u2502 Gulf          133\n'))),(0,r.kt)(l.Z,{value:"samp",mdxType:"TabItem"},(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Recommended for assigning population ID's for specific samples.\t"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"populations!(data::PopData, samples::Vector{String}, populations::Vector{String})\n")),(0,r.kt)("p",null,"You may want outright overwrite all current population information. This is particularly useful when importing from VCF format when population information is not provided. This method will completely replace the population names of ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," regardless of what they currently are. "),(0,r.kt)("p",null,"This method takes a vector of sample names and a vector of the new population names of the samples in the order that they appear in the name-vector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'# creating a vector of sample names\njulia> ch_names = samplenames(sharks)[1:5]\n5-element Array{String,1}:\n "cc_001"\n "cc_002"\n "cc_003"\n "cc_005"\n "cc_007"\n')),(0,r.kt)("p",null,"and we then also create the vector of these samples' new population names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> popnames = ["North Cape", "North Cape", "North Cape", "South Cape", "South Cape"] ;\n')),(0,r.kt)("p",null,"Now we can combine them with ",(0,r.kt)("inlineCode",{parentName:"p"},"populations!")," to rename the first 5 Cape Canaveral samples."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> populations!(sharks, ch_names, popnames)\njulia> sampleinfo(sharks)[1:6,:]\n6\xd75 DataFrame\n Row \u2502 name     population     ploidy  longitude  latitude \n     \u2502 String7  String         Int8    Float64    Float64  \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 cc_001   North Cape          2    28.3062  -80.5993\n   2 \u2502 cc_002   North Cape          2    28.3079  -80.5995\n   3 \u2502 cc_003   North Cape          2    28.3023  -80.5996\n   4 \u2502 cc_005   South Cape          2    28.6123  -80.4225\n   5 \u2502 cc_007   South Cape          2    27.8666  -80.3578\n   6 \u2502 cc_008   CapeCanaveral       2    27.8666  -80.3579\n")))))}h.isMDXComponent=!0}}]);