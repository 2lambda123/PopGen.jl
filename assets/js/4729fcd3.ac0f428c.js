"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[3944],{3905:function(e,a,t){t.d(a,{Zo:function(){return p},kt:function(){return d}});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),u=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},p=function(e){var a=u(e.components);return n.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),d=i,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return t?n.createElement(f,r(r({ref:a},p),{},{components:t})):n.createElement(f,r({ref:a},p))}));function d(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=t[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8215:function(e,a,t){t.d(a,{Z:function(){return i}});var n=t(7294);function i(e){var a=e.children,t=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:i},a)}},9877:function(e,a,t){t.d(a,{Z:function(){return p}});var n=t(7462),i=t(7294),l=t(2389),r=t(5450),o=t(6010),s="tabItem_LplD";function u(e){var a,t,l,u=e.lazy,p=e.block,m=e.defaultValue,c=e.values,d=e.groupId,f=e.className,h=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=c?c:h.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),b=(0,r.lx)(v,(function(e,a){return e.value===a.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===m?m:null!=(a=null!=m?m:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?a:null==(l=h[0])?void 0:l.props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,r.UB)(),w=g.tabGroupChoices,y=g.setTabGroupChoices,N=(0,i.useState)(k),P=N[0],D=N[1],j=[],x=(0,r.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var T=w[d];null!=T&&T!==P&&v.some((function(e){return e.value===T}))&&D(T)}var C=function(e){var a=e.currentTarget,t=j.indexOf(a),n=v[t].value;n!==P&&(x(a),D(n),null!=d&&y(d,n))},O=function(e){var a,t=null;switch(e.key){case"ArrowRight":var n=j.indexOf(e.currentTarget)+1;t=j[n]||j[0];break;case"ArrowLeft":var i=j.indexOf(e.currentTarget)-1;t=j[i]||j[j.length-1]}null==(a=t)||a.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},f)},v.map((function(e){var a=e.value,t=e.label,l=e.attributes;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:P===a?0:-1,"aria-selected":P===a,key:a,ref:function(e){return j.push(e)},onKeyDown:O,onFocus:C,onClick:C},l,{className:(0,o.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":P===a})}),null!=t?t:a)}))),u?(0,i.cloneElement)(h.filter((function(e){return e.props.value===P}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},h.map((function(e,a){return(0,i.cloneElement)(e,{key:a,hidden:e.props.value!==P})}))))}function p(e){var a=(0,l.Z)();return i.createElement(u,(0,n.Z)({key:String(a)},e))}},7678:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return m},assets:function(){return c},toc:function(){return d},default:function(){return h}});var n=t(7462),i=t(3366),l=(t(7294),t(3905)),r=t(9877),o=t(8215),s=["components"],u={id:"simulate_samples",title:"Simulating Samples",sidebar_label:"Simulating Samples"},p=void 0,m={unversionedId:"simulations/simulate_samples",id:"simulations/simulate_samples",title:"Simulating Samples",description:"To perfom simulations, you will need add and import the package PopGenSims.jl (available here).",source:"@site/docs/simulations/simulations.md",sourceDirName:"simulations",slug:"/simulations/",permalink:"/PopGen.jl/docs/simulations/",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/simulations/simulations.md",tags:[],version:"current",lastUpdatedAt:1646327686,formattedLastUpdatedAt:"3/3/2022",frontMatter:{id:"simulate_samples",title:"Simulating Samples",sidebar_label:"Simulating Samples"},sidebar:"docs",previous:{title:"Pairwise F-Statistics",permalink:"/PopGen.jl/docs/analyses/fstatistics"},next:{title:"Breeding Crosses",permalink:"/PopGen.jl/docs/simulations/breedingcrosses"}},c={},d=[{value:"Simulate samples within populations",id:"simulate-samples-within-populations",level:2}],f={toc:d};function h(e){var a=e.components,t=(0,i.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},f,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Requires PopGenSims.jl")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"To perfom simulations, you will need add and import the package ",(0,l.kt)("inlineCode",{parentName:"p"},"PopGenSims.jl")," (available ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pdimens/PopGenSims.jl"},"here"),")."))),(0,l.kt)("h2",{id:"simulate-samples-within-populations"},"Simulate samples within populations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\nsimulate(data::PopData; n::Dict{String,Int})\nsimulate(data::PopData; scale::Int)\n")),(0,l.kt)("p",null,"Simulate data using per-population allele frequencies. The simulated samples will have the naming convention ",(0,l.kt)("inlineCode",{parentName:"p"},"sim_1...sim_#")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"#")," is the total number of simulated samples in the new PopData."),(0,l.kt)(r.Z,{block:!0,defaultValue:"f",values:[{label:"fixed samples",value:"f"},{label:"arbitrary samples",value:"a"},{label:"proportional samples",value:"p"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"f",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\n")),(0,l.kt)("p",null,"If you want to simulate data with a fixed number of individuals per population, you can do so with ",(0,l.kt)("inlineCode",{parentName:"p"},"simulate(PopData, n = Int)"),", which takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," number of individuals per population. Returns a new PopData with samples having the same ploidy as the source ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,l.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data. "),(0,l.kt)("p",null,"In the example below, we simulate 100 individuals per\npopulation using the nancycats data, which has 17 populations, therefore the resulting ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," will have 1700 samples (100 samples x 17 populations)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> sims = simulate(cats , n = 100)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 1700\n  Populations: 17\n"))),(0,l.kt)(o.Z,{value:"a",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Dict{Population,Int})\n")),(0,l.kt)("p",null,"If you want to simulate an arbitrary number of individuals for arbitrary populations, use ",(0,l.kt)("inlineCode",{parentName:"p"},"simulate(PopData, n = Dict{String, Int})"),", which takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates samples within populations as specified in the input ",(0,l.kt)("inlineCode",{parentName:"p"},"Dict"),". Returns a new PopData with samples having the same ploidy as the source ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,l.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data."),(0,l.kt)("p",null,"In the example below, we create a dictionary with the notation ",(0,l.kt)("inlineCode",{parentName:"p"},"Population => #samples"),' to simulate a specific number of samples for 3 particular populations. The resulting PopData will have 28 samples (5+3+20) across 3 populations ("1", "8", "11").'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats;\n\njulia> simscheme = Dict("1" => 5, "8" => 3, "11" => 20) ;\n\njulia> simulate(cats, n = simscheme)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 28\n  Populations: 3\n'))),(0,l.kt)(o.Z,{value:"p",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\n")),(0,l.kt)("p",null,"If you want to simulate data while keeping the proportion of individuals per population consistent with the source PopData, use ",(0,l.kt)("inlineCode",{parentName:"p"},"simulate(PopData, scale = Int)"),", which takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates the same number of individuals per population multiplied by ",(0,l.kt)("inlineCode",{parentName:"p"},"scale")," (i.e. if ",(0,l.kt)("inlineCode",{parentName:"p"},"scale=2"),", there will be twice the number of simulated individuals compared to the original PopData). Returns a new PopData with samples having the same ploidy as the source ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,l.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data. "),(0,l.kt)("p",null,"In the example below, we simulate 3x the number of samples of the original nancycats data, which has 237 samples x 17 populations, therefore the resulting ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," will have 711 samples (237 samples x 3). In this example, each population will have 3x the number of samples as the original nancycats data."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> sims = simulate(cats , scale = 1)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 711\n  Populations: 17\n")))))}h.isMDXComponent=!0}}]);