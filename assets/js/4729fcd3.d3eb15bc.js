"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[3944],{4137:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return f}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(a),d=r,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||l;return a?n.createElement(f,i(i({ref:t},p),{},{components:a})):n.createElement(f,i({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},425:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(7294),r=a(6010),l={tabItem:"tabItem_Ymn6"};function i(e){var t=e.children,a=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:a},t)}},3992:function(e,t,a){a.d(t,{Z:function(){return w}});var n=a(7462),r=a(7294),l=a(6010),i=a(2957),o=a(6550),u=a(5238),s=a(3609),p=a(2560);function c(e){return function(e){var t,a;return null!=(t=null==(a=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function m(e){var t=e.values,a=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:c(a);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function d(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function f(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId,l=(0,o.k6)(),i=function(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:a,groupId:n});return[(0,u._X)(i),(0,r.useCallback)((function(e){if(i){var t=new URLSearchParams(l.location.search);t.set(i,e),l.replace(Object.assign({},l.location,{search:t.toString()}))}}),[i,l])]}function h(e){var t,a,n,l,i=e.defaultValue,o=e.queryString,u=void 0!==o&&o,s=e.groupId,c=m(e),h=(0,r.useState)((function(){return function(e){var t,a=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!d({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}var r=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:c})})),b=h[0],v=h[1],g=f({queryString:u,groupId:s}),k=g[0],y=g[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),a=(0,p.Nk)(t),n=a[0],l=a[1],[n,(0,r.useCallback)((function(e){t&&l.set(e)}),[t,l])]),N=w[0],P=w[1],D=function(){var e=null!=k?k:N;return d({value:e,tabValues:c})?e:null}();return(0,r.useLayoutEffect)((function(){D&&v(D)}),[D]),{selectedValue:b,selectValue:(0,r.useCallback)((function(e){if(!d({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);v(e),y(e),P(e)}),[y,P,c]),tabValues:c}}var b=a(1048),v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){var t=e.className,a=e.block,o=e.selectedValue,u=e.selectValue,s=e.tabValues,p=[],c=(0,i.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,a=p.indexOf(t),n=s[a].value;n!==o&&(c(t),u(n))},d=function(e){var t,a=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var n,r=p.indexOf(e.currentTarget)+1;a=null!=(n=p[r])?n:p[0];break;case"ArrowLeft":var l,i=p.indexOf(e.currentTarget)-1;a=null!=(l=p[i])?l:p[p.length-1]}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},s.map((function(e){var t=e.value,a=e.label,i=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return p.push(e)},onKeyDown:d,onClick:m},i,{className:(0,l.Z)("tabs__item",v.tabItem,null==i?void 0:i.className,{"tabs__item--active":o===t})}),null!=a?a:t)})))}function k(e){var t=e.lazy,a=e.children,n=e.selectedValue,l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){var i=l.find((function(e){return e.props.value===n}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function y(e){var t=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",v.tabList)},r.createElement(g,(0,n.Z)({},e,t)),r.createElement(k,(0,n.Z)({},e,t)))}function w(e){var t=(0,b.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},567:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return b},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=a(7462),r=a(3366),l=(a(7294),a(4137)),i=a(3992),o=a(425),u=["components"],s={id:"simulate_samples",title:"Simulating Samples",sidebar_label:"Simulating Samples"},p=void 0,c={unversionedId:"simulations/simulate_samples",id:"simulations/simulate_samples",title:"Simulating Samples",description:"To perfom simulations, you will need add and import the package PopGenSims.jl (available here).",source:"@site/docs/simulations/simulations.md",sourceDirName:"simulations",slug:"/simulations/",permalink:"/PopGen.jl/docs/simulations/",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/simulations/simulations.md",tags:[],version:"current",lastUpdatedAt:1660676857,formattedLastUpdatedAt:"Aug 16, 2022",frontMatter:{id:"simulate_samples",title:"Simulating Samples",sidebar_label:"Simulating Samples"},sidebar:"docs",previous:{title:"t-SNE",permalink:"/PopGen.jl/docs/analyses/tsne"},next:{title:"Breeding Crosses",permalink:"/PopGen.jl/docs/simulations/breedingcrosses"}},m={},d=[{value:"Simulate samples within populations",id:"simulate-samples-within-populations",level:2}],f={toc:d},h="wrapper";function b(e){var t=e.components,a=(0,r.Z)(e,u);return(0,l.kt)(h,(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{title:"Requires PopGenSims.jl",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"To perfom simulations, you will need add and import the package ",(0,l.kt)("inlineCode",{parentName:"p"},"PopGenSims.jl")," (available ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pdimens/PopGenSims.jl"},"here"),").")),(0,l.kt)("h2",{id:"simulate-samples-within-populations"},"Simulate samples within populations"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\nsimulate(data::PopData; n::Dict{String,Int})\nsimulate(data::PopData; scale::Int)\n")),(0,l.kt)("p",null,"Simulate data using per-population allele frequencies. The simulated samples will have the naming convention ",(0,l.kt)("inlineCode",{parentName:"p"},"sim_1...sim_#")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"#")," is the total number of simulated samples in the new PopData."),(0,l.kt)(i.Z,{block:!0,defaultValue:"f",values:[{label:"fixed samples",value:"f"},{label:"arbitrary samples",value:"a"},{label:"proportional samples",value:"p"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"f",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\n")),(0,l.kt)("p",null,"If you want to simulate data with a fixed number of individuals per population, you can do so with ",(0,l.kt)("inlineCode",{parentName:"p"},"simulate(PopData, n = Int)"),", which takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," number of individuals per population. Returns a new PopData with samples having the same ploidy as the source ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,l.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data. "),(0,l.kt)("p",null,"In the example below, we simulate 100 individuals per\npopulation using the nancycats data, which has 17 populations, therefore the resulting ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," will have 1700 samples (100 samples x 17 populations)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> sims = simulate(cats , n = 100)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 1700\n  Populations: 17\n"))),(0,l.kt)(o.Z,{value:"a",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Dict{Population,Int})\n")),(0,l.kt)("p",null,"To simulate an arbitrary number of individuals for arbitrary populations, use ",(0,l.kt)("inlineCode",{parentName:"p"},"simulate(PopData, n = Dict{String, Int})"),", which takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates samples within populations as specified in the input ",(0,l.kt)("inlineCode",{parentName:"p"},"Dict"),", where ",(0,l.kt)("inlineCode",{parentName:"p"},"keys => values")," are ",(0,l.kt)("inlineCode",{parentName:"p"},"population => n_samples"),". Returns a new PopData with samples having the same ploidy as the source ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,l.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data."),(0,l.kt)("p",null,"In the example below, we create a dictionary with the notation ",(0,l.kt)("inlineCode",{parentName:"p"},"Population => #samples"),' to simulate a specific number of samples for 3 particular populations. The resulting PopData will have 28 samples (5+3+20) across 3 populations ("1", "8", "11").'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats;\n\njulia> simscheme = Dict("1" => 5, "8" => 3, "11" => 20) ;\n\njulia> simulate(cats, n = simscheme)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 28\n  Populations: 3\n'))),(0,l.kt)(o.Z,{value:"p",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; scale::Int)\n")),(0,l.kt)("p",null,"If you want to simulate data while keeping the proportion of individuals per population consistent with the source PopData, use ",(0,l.kt)("inlineCode",{parentName:"p"},"simulate(PopData, scale = Int)"),", which takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates the same number of individuals per population multiplied by ",(0,l.kt)("inlineCode",{parentName:"p"},"scale")," (i.e. if ",(0,l.kt)("inlineCode",{parentName:"p"},"scale=2"),", there will be twice the number of simulated individuals compared to the original PopData). Returns a new PopData with samples having the same ploidy as the source ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,l.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data. "),(0,l.kt)("p",null,"In the example below, we simulate 3x the number of samples of the original nancycats data, which has 237 samples x 17 populations, therefore the resulting ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," will have 711 samples (237 samples x 3)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> sims = simulate(cats , scale = 3)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 711\n  Populations: 17\n")))))}b.isMDXComponent=!0}}]);