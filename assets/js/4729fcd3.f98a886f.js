"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[3944],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(a),d=l,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return a?n.createElement(f,r(r({ref:t},p),{},{components:a})):n.createElement(f,r({ref:t},p))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var u=2;u<i;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5162:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(7294),l=a(6010),i="tabItem_Ymn6";function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,r),hidden:a},t)}},5488:function(e,t,a){a.d(t,{Z:function(){return d}});var n=a(7462),l=a(7294),i=a(6010),r=a(2389),o=a(7392),s=a(7094),u=a(2466),p="tabList__CuJ",m="tabItem_LNqP";function c(e){var t,a,r=e.lazy,c=e.block,d=e.defaultValue,f=e.values,h=e.groupId,b=e.className,v=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,o.l)(k,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===d?d:null!=(t=null!=d?d:null==(a=v.find((function(e){return e.props.default})))?void 0:a.props.value)?t:v[0].props.value;if(null!==y&&!k.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,s.U)(),N=w.tabGroupChoices,P=w.setTabGroupChoices,D=(0,l.useState)(y),j=D[0],x=D[1],C=[],T=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var S=N[h];null!=S&&S!==j&&k.some((function(e){return e.value===S}))&&x(S)}var O=function(e){var t=e.currentTarget,a=C.indexOf(t),n=k[a].value;n!==j&&(T(t),x(n),null!=h&&P(h,String(n)))},E=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,l=C.indexOf(e.currentTarget)+1;a=null!=(n=C[l])?n:C[0];break;case"ArrowLeft":var i,r=C.indexOf(e.currentTarget)-1;a=null!=(i=C[r])?i:C[C.length-1]}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},b)},k.map((function(e){var t=e.value,a=e.label,r=e.attributes;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,key:t,ref:function(e){return C.push(e)},onKeyDown:E,onFocus:O,onClick:O},r,{className:(0,i.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":j===t})}),null!=a?a:t)}))),r?(0,l.cloneElement)(v.filter((function(e){return e.props.value===j}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}function d(e){var t=(0,r.Z)();return l.createElement(c,(0,n.Z)({key:String(t)},e))}},7678:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return d}});var n=a(7462),l=a(3366),i=(a(7294),a(3905)),r=a(5488),o=a(5162),s=["components"],u={id:"simulate_samples",title:"Simulating Samples",sidebar_label:"Simulating Samples"},p=void 0,m={unversionedId:"simulations/simulate_samples",id:"simulations/simulate_samples",title:"Simulating Samples",description:"To perfom simulations, you will need add and import the package PopGenSims.jl (available here).",source:"@site/docs/simulations/simulations.md",sourceDirName:"simulations",slug:"/simulations/",permalink:"/PopGen.jl/docs/simulations/",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/simulations/simulations.md",tags:[],version:"current",lastUpdatedAt:1660676694,formattedLastUpdatedAt:"Aug 16, 2022",frontMatter:{id:"simulate_samples",title:"Simulating Samples",sidebar_label:"Simulating Samples"},sidebar:"docs",previous:{title:"t-SNE",permalink:"/PopGen.jl/docs/analyses/tsne"},next:{title:"Breeding Crosses",permalink:"/PopGen.jl/docs/simulations/breedingcrosses"}},c={},d=[{value:"Simulate samples within populations",id:"simulate-samples-within-populations",level:2}],f={toc:d};function h(e){var t=e.components,a=(0,l.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Requires PopGenSims.jl",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"To perfom simulations, you will need add and import the package ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGenSims.jl")," (available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pdimens/PopGenSims.jl"},"here"),").")),(0,i.kt)("h2",{id:"simulate-samples-within-populations"},"Simulate samples within populations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\nsimulate(data::PopData; n::Dict{String,Int})\nsimulate(data::PopData; scale::Int)\n")),(0,i.kt)("p",null,"Simulate data using per-population allele frequencies. The simulated samples will have the naming convention ",(0,i.kt)("inlineCode",{parentName:"p"},"sim_1...sim_#")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," is the total number of simulated samples in the new PopData."),(0,i.kt)(r.Z,{block:!0,defaultValue:"f",values:[{label:"fixed samples",value:"f"},{label:"arbitrary samples",value:"a"},{label:"proportional samples",value:"p"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"f",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Int)\n")),(0,i.kt)("p",null,"If you want to simulate data with a fixed number of individuals per population, you can do so with ",(0,i.kt)("inlineCode",{parentName:"p"},"simulate(PopData, n = Int)"),", which takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," number of individuals per population. Returns a new PopData with samples having the same ploidy as the source ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,i.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data. "),(0,i.kt)("p",null,"In the example below, we simulate 100 individuals per\npopulation using the nancycats data, which has 17 populations, therefore the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," will have 1700 samples (100 samples x 17 populations)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> sims = simulate(cats , n = 100)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 1700\n  Populations: 17\n"))),(0,i.kt)(o.Z,{value:"a",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; n::Dict{Population,Int})\n")),(0,i.kt)("p",null,"To simulate an arbitrary number of individuals for arbitrary populations, use ",(0,i.kt)("inlineCode",{parentName:"p"},"simulate(PopData, n = Dict{String, Int})"),", which takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates samples within populations as specified in the input ",(0,i.kt)("inlineCode",{parentName:"p"},"Dict"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"keys => values")," are ",(0,i.kt)("inlineCode",{parentName:"p"},"population => n_samples"),". Returns a new PopData with samples having the same ploidy as the source ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,i.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data."),(0,i.kt)("p",null,"In the example below, we create a dictionary with the notation ",(0,i.kt)("inlineCode",{parentName:"p"},"Population => #samples"),' to simulate a specific number of samples for 3 particular populations. The resulting PopData will have 28 samples (5+3+20) across 3 populations ("1", "8", "11").'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats;\n\njulia> simscheme = Dict("1" => 5, "8" => 3, "11" => 20) ;\n\njulia> simulate(cats, n = simscheme)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 28\n  Populations: 3\n'))),(0,i.kt)(o.Z,{value:"p",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simulate(data::PopData; scale::Int)\n")),(0,i.kt)("p",null,"If you want to simulate data while keeping the proportion of individuals per population consistent with the source PopData, use ",(0,i.kt)("inlineCode",{parentName:"p"},"simulate(PopData, scale = Int)"),", which takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object and simulates the same number of individuals per population multiplied by ",(0,i.kt)("inlineCode",{parentName:"p"},"scale")," (i.e. if ",(0,i.kt)("inlineCode",{parentName:"p"},"scale=2"),", there will be twice the number of simulated individuals compared to the original PopData). Returns a new PopData with samples having the same ploidy as the source ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData"),", but will ",(0,i.kt)("strong",{parentName:"p"},"not")," work on mixed-ploidy data. "),(0,i.kt)("p",null,"In the example below, we simulate 3x the number of samples of the original nancycats data, which has 237 samples x 17 populations, therefore the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," will have 711 samples (237 samples x 3). In this example, each population will have 3x the number of samples as the original nancycats data."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"julia> cats = @nancycats;\n\njulia> sims = simulate(cats , scale = 3)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 711\n  Populations: 17\n")))))}h.isMDXComponent=!0}}]);