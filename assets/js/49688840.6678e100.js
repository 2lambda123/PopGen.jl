"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[7931],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,f=p["".concat(u,".").concat(m)]||p[m]||c[m]||o;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:function(e,t,a){a.d(t,{Z:function(){return i}});var n=a(7294),r=a(6010),o="tabItem_Ymn6";function i(e){var t=e.children,a=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:a},t)}},5488:function(e,t,a){a.d(t,{Z:function(){return m}});var n=a(7462),r=a(7294),o=a(6010),i=a(2389),l=a(7392),u=a(7094),s=a(2466),d="tabList__CuJ",c="tabItem_LNqP";function p(e){var t,a,i=e.lazy,p=e.block,m=e.defaultValue,f=e.values,g=e.groupId,h=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,l.l)(k,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(t=null!=m?m:null==(a=v.find((function(e){return e.props.default})))?void 0:a.props.value)?t:v[0].props.value;if(null!==y&&!k.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,u.U)(),w=N.tabGroupChoices,C=N.setTabGroupChoices,j=(0,r.useState)(y),O=j[0],T=j[1],P=[],D=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var E=w[g];null!=E&&E!==O&&k.some((function(e){return e.value===E}))&&T(E)}var x=function(e){var t=e.currentTarget,a=P.indexOf(t),n=k[a].value;n!==O&&(D(t),T(n),null!=g&&C(g,String(n)))},_=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,r=P.indexOf(e.currentTarget)+1;a=null!=(n=P[r])?n:P[0];break;case"ArrowLeft":var o,i=P.indexOf(e.currentTarget)-1;a=null!=(o=P[i])?o:P[P.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},h)},k.map((function(e){var t=e.value,a=e.label,i=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return P.push(e)},onKeyDown:_,onFocus:x,onClick:x},i,{className:(0,o.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":O===t})}),null!=a?a:t)}))),i?(0,r.cloneElement)(v.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function m(e){var t=(0,i.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},4966:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=(a(5488),a(5162),["components"]),l={id:"locationdata",title:"Location data",sidebar_label:"Location data"},u=void 0,s={unversionedId:"popdata/locationdata",id:"popdata/locationdata",title:"Location data",description:"Also known as geographic or coordinate data. The sampleinfo in the metadata can contain this information, which is not currently used in",source:"@site/docs/popdata/locationdata.md",sourceDirName:"popdata",slug:"/popdata/locationdata",permalink:"/PopGen.jl/docs/popdata/locationdata",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/popdata/locationdata.md",tags:[],version:"current",lastUpdatedAt:1646148647,formattedLastUpdatedAt:"Mar 1, 2022",frontMatter:{id:"locationdata",title:"Location data",sidebar_label:"Location data"},sidebar:"docs",previous:{title:"Population data",permalink:"/PopGen.jl/docs/popdata/populationdata"},next:{title:"Data exploration",permalink:"/PopGen.jl/docs/popdata/dataexploration"}},d={},c=[{value:"View location data",id:"view-location-data",level:2},{value:"Add geographical coordinates",id:"add-geographical-coordinates",level:2},{value:"decimal minutes",id:"decimal-minutes",level:3},{value:"formatting requirements",id:"formatting-requirements",level:4},{value:"other formats",id:"other-formats",level:3},{value:"formatting requirements",id:"formatting-requirements-1",level:4}],p={toc:c};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Also known as geographic or coordinate data. The ",(0,o.kt)("inlineCode",{parentName:"p"},"sampleinfo")," in the metadata can contain this information, which is not currently used in\nany analyses present in PopGen.jl."),(0,o.kt)("h2",{id:"view-location-data"},"View location data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"locationdata(data::PopData)\n")),(0,o.kt)("p",null,"View location (if present) data in a ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData"),",  returning a table the longitude and latitude information in the ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"julia> locationdata(sharks)\n212\xd72 SubDataFrame\n Row \u2502 longitude  latitude \n     \u2502 Float64    Float64  \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502   28.3062  -80.5993\n   2 \u2502   28.3079  -80.5995\n   3 \u2502   28.3023  -80.5996\n  \u22ee  \u2502     \u22ee         \u22ee\n 210 \u2502   30.0522  -87.3662\n 211 \u2502   29.8234  -85.7143\n 212 \u2502   29.8234  -85.7143\n           206 rows omitted\n")),(0,o.kt)("h2",{id:"add-geographical-coordinates"},"Add geographical coordinates"),(0,o.kt)("h3",{id:"decimal-minutes"},"decimal minutes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"locationdata!(data::PopData; longitude::Vector{T}, latitude::Vector{T}) where T<:AbstractFloat\n")),(0,o.kt)("p",null,"Location data can be added using one of the methods of ",(0,o.kt)("inlineCode",{parentName:"p"},"locations!"),". As indicated by the bang ",(0,o.kt)("inlineCode",{parentName:"p"},"!"),", your ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData")," will be edited in place, and there will be no return output. If your data is in anything other than Decimal-Degrees format, this function will convert your long/lat into Decimal Degrees. To import those data into Julia, you'll likely want to use the wonderful ",(0,o.kt)("inlineCode",{parentName:"p"},"CSV.jl")," package first. The functions accept keywords ",(0,o.kt)("inlineCode",{parentName:"p"},"longitude")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"latitude"),", or can be used without them so long as the vectors are input in that order. "),(0,o.kt)("p",null,"This method is pretty straightforward and tolerates vectors with ",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," data."),(0,o.kt)("h4",{id:"formatting-requirements"},"formatting requirements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Coordinates must be decimal-minutes as either ",(0,o.kt)("inlineCode",{parentName:"li"},"Float32")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Float64")," (e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"-21.321"),")")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"# generate some fake location data\njulia> long = rand(212) .* 10 ; lat = rand(212) .* -10\n\njulia> locationdata!(sharks, long, lat)\n")),(0,o.kt)("h3",{id:"other-formats"},"other formats"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"locationdata!(data::PopData; longitude::Vector{String}, latitude::Vector{String})\n")),(0,o.kt)("h4",{id:"formatting-requirements-1"},"formatting requirements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Coordinates as ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," separated by spaces (",(0,o.kt)("inlineCode",{parentName:"li"},'"11 43 41"'),") or colons (",(0,o.kt)("inlineCode",{parentName:"li"},'"11:43:41"'),")"),(0,o.kt)("li",{parentName:"ul"},"Must use negative sign (",(0,o.kt)("inlineCode",{parentName:"li"},'"-11 43.52"'),") or single-letter cardinal direction (",(0,o.kt)("inlineCode",{parentName:"li"},'"11 43.52W"'),")"),(0,o.kt)("li",{parentName:"ul"},"Missing data should be coded as ",(0,o.kt)("inlineCode",{parentName:"li"},"missing")," or the string ",(0,o.kt)("inlineCode",{parentName:"li"},'"missing"')),(0,o.kt)("li",{parentName:"ul"},"Can mix colons and spaces (although it's bad practice)")),(0,o.kt)("p",null,"If not already in decimal-minutes format, it would likely be most convenient if you imported your coordinate data as vectors of strings, which would look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'longitude = ["-43 54 11", "22 23 11N"]\nlatitude = ["11 44 31", "-25 41 13"]\n')),(0,o.kt)("admonition",{title:"Missing values",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This method tolerates ",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," values, but you will need to ",(0,o.kt)("inlineCode",{parentName:"p"},"replace!")," instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," with the string ",(0,o.kt)("inlineCode",{parentName:"p"},'"missing"'),".")))}m.isMDXComponent=!0}}]);