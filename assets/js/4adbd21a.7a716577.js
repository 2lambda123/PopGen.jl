"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[3924],{4137:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(a),f=r,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||o;return a?n.createElement(d,l(l({ref:t},c),{},{components:a})):n.createElement(d,l({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=f;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},7096:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var n=a(7462),r=a(3366),o=(a(7294),a(4137)),l=["components"],i={id:"baypass",title:"CBaypass.jl",sidebar_label:"Baypass.jl"},p=void 0,s={unversionedId:"api/PopGenCore/baypass",id:"api/PopGenCore/baypass",title:"CBaypass.jl",description:"PopGenCore.jl/src/io/Baypass.jl",source:"@site/docs/api/PopGenCore/Baypass.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/baypass",permalink:"/PopGen.jl/docs/api/PopGenCore/baypass",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/Baypass.md",tags:[],version:"current",lastUpdatedAt:1658766707,formattedLastUpdatedAt:"Jul 25, 2022",frontMatter:{id:"baypass",title:"CBaypass.jl",sidebar_label:"Baypass.jl"}},c={},u=[{value:"PopGenCore.jl/src/io/Baypass.jl",id:"popgencorejlsrciobaypassjl",level:2},{value:"\ud83d\udce6 _setcounts_biallelic",id:"-_setcounts_biallelic",level:3},{value:"\ud83d\udce6 countmatrix_biallelic",id:"-countmatrix_biallelic",level:3},{value:"\ud83d\udfea\ud83d\udd35 baypass",id:"-baypass",level:3}],m={toc:u},f="wrapper";function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,o.kt)(f,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"popgencorejlsrciobaypassjl"},"PopGenCore.jl/src/io/Baypass.jl"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udfea  exported by PopGenCore.jl"),(0,o.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,o.kt)("h3",{id:"-_setcounts_biallelic"},"\ud83d\udce6 _setcounts_biallelic"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"_setcounts_biallelic(q, r)\n")),(0,o.kt)("p",null,"Returns a vector of counts of alleles from Genotypes ",(0,o.kt)("inlineCode",{parentName:"p"},"q")," in allele vector ",(0,o.kt)("inlineCode",{parentName:"p"},"r"),".\nThis is distinct from ",(0,o.kt)("inlineCode",{parentName:"p"},"setcounts")," in that ",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," values are preserved as ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"-1")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-countmatrix_biallelic"},"\ud83d\udce6 countmatrix_biallelic"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"countmatrix_biallelic(data::PopData)\n")),(0,o.kt)("p",null,"Create a matrix of allele count per genotype where rows are samples\nand columns are the occurence count of an allele for that locus in that sample.\n",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," values are preserved as `0``."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-baypass"},"\ud83d\udfea\ud83d\udd35 baypass"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"baypass(data::PopData; filename::Union{String, Nothing} = nothing)\n")),(0,o.kt)("p",null,"Convert a ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData")," object into a Baypass-format matrix. The required input format for the software\nrequires biallelic data. By default, it returns just the Baypass-format matrix; use the keyword argument ",(0,o.kt)("inlineCode",{parentName:"p"},"filename")," to specify a file to write the matrix to.\nThis function ",(0,o.kt)("strong",{parentName:"p"},"does not perform a Baypass analysis"),", but instead creates the input matrix necessary for it.\nThe matrix specification is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"rows = loci",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"each row is a different locus"))),(0,o.kt)("li",{parentName:"ul"},"columns = allele counts per population",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"- each pair of columns correspond to the alleles' counts (2 alleles, 2 columns) for a population\n- as a result, there should be 2 \xd7 n_populations columns\n- e.g. row 1, columns 1:2 are the allele counts for locus 1 in population 1\n")),"Baypass information: ",(0,o.kt)("a",{parentName:"li",href:"http://www1.montpellier.inra.fr/CBGP/software/baypass/"},"http://www1.montpellier.inra.fr/CBGP/software/baypass/"))))}d.isMDXComponent=!0}}]);