"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[829],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(n),c=i,f=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(f,r(r({ref:t},s),{},{components:n})):a.createElement(f,r({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294),i=n(6010),l="tabItem_Ymn6";function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(l,r),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(7462),i=n(7294),l=n(6010),r=n(2389),o=n(7392),p=n(7094),u=n(2466),s="tabList__CuJ",m="tabItem_LNqP";function d(e){var t,n,r=e.lazy,d=e.block,c=e.defaultValue,f=e.values,k=e.groupId,g=e.className,v=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=f?f:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,o.l)(h,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===c?c:null!=(t=null!=c?c:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:v[0].props.value;if(null!==N&&!h.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,p.U)(),y=w.tabGroupChoices,C=w.setTabGroupChoices,O=(0,i.useState)(N),P=O[0],j=O[1],_=[],E=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var T=y[k];null!=T&&T!==P&&h.some((function(e){return e.value===T}))&&j(T)}var x=function(e){var t=e.currentTarget,n=_.indexOf(t),a=h[n].value;a!==P&&(E(t),j(a),null!=k&&C(k,String(a)))},D=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,i=_.indexOf(e.currentTarget)+1;n=null!=(a=_[i])?a:_[0];break;case"ArrowLeft":var l,r=_.indexOf(e.currentTarget)-1;n=null!=(l=_[r])?l:_[_.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,l.Z)("tabs-container",s)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},g)},h.map((function(e){var t=e.value,n=e.label,r=e.attributes;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,key:t,ref:function(e){return _.push(e)},onKeyDown:D,onFocus:x,onClick:x},r,{className:(0,l.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":P===t})}),null!=n?n:t)}))),r?(0,i.cloneElement)(v.filter((function(e){return e.props.value===P}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==P})}))))}function c(e){var t=(0,r.Z)();return i.createElement(d,(0,a.Z)({key:String(t)},e))}},732:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return c}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=n(5488),o=n(5162),p=["components"],u={id:"genepop",title:"Genepop",sidebar_label:"Genepop"},s=void 0,m={unversionedId:"io/genepop",id:"io/genepop",title:"Genepop",description:"Import a genepop file as PopData",source:"@site/docs/io/genepop.md",sourceDirName:"io",slug:"/io/genepop",permalink:"/PopGen.jl/docs/io/genepop",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/io/genepop.md",tags:[],version:"current",lastUpdatedAt:1652451030,formattedLastUpdatedAt:"May 13, 2022",frontMatter:{id:"genepop",title:"Genepop",sidebar_label:"Genepop"},sidebar:"docs",previous:{title:"Delimited",permalink:"/PopGen.jl/docs/io/delimited"},next:{title:"Plink",permalink:"/PopGen.jl/docs/io/plink"}},d={},c=[{value:"Import a genepop file as <code>PopData</code>",id:"import-a-genepop-file-as-popdata",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Keyword Arguments",id:"keyword-arguments",level:3},{value:"Example",id:"example",level:3},{value:"Format",id:"format",level:3},{value:"Writing to a Genepop file",id:"writing-to-a-genepop-file",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"Keyword arguments",id:"keyword-arguments-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Acknowledgements",id:"acknowledgements",level:2}],f={toc:c};function k(e){var t=e.components,n=(0,i.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"import-a-genepop-file-as-popdata"},"Import a genepop file as ",(0,l.kt)("inlineCode",{parentName:"h2"},"PopData")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"genepop(infile; kwargs...)\n")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"infile::String")," : path to genepop file, in quotes")),(0,l.kt)("h3",{id:"keyword-arguments"},"Keyword Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"digits::Integer"),": number of digits denoting each allele (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"popsep::String")," : word that separates populations in ",(0,l.kt)("inlineCode",{parentName:"li"},"infile"),' (default: "POP")'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"diploid::Bool"),"  : whether samples are diploid for parsing optimizations (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"silent::Bool"),"   : whether to print file information during import (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")")),(0,l.kt)("admonition",{title:"population names",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"By default, the file reader will assign numbers as population ID's (as Strings) in order of appearance in the genepop file. Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"populations!")," function to rename these with your own population ID's.")),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},'julia> wasp_data = genepop("/data/wasp_hive.gen", digits = 3, popsep = "POP")\n')),(0,l.kt)("h3",{id:"format"},"Format"),(0,l.kt)("p",null,"Files must follow standard Genepop formatting:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"First line is a comment (and skipped)"),(0,l.kt)("li",{parentName:"ul"},"Loci are listed after first line as one-per-line without commas or in single comma-separated row"),(0,l.kt)("li",{parentName:"ul"},"A line with a particular and consistent keyword must delimit populations",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"must")," be the same word each time and not a unique population name"))),(0,l.kt)("li",{parentName:"ul"},"File is ",(0,l.kt)("strong",{parentName:"li"},"tab")," delimited or ",(0,l.kt)("strong",{parentName:"li"},"space")," delimited, but not both")),(0,l.kt)(r.Z,{block:!0,defaultValue:"v",values:[{label:"genepop w/loci stacked vertically",value:"v"},{label:"genepop w/loci stacked horizontally",value:"h"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"v",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Wasp populations in New York\nLocus1\nLocus2\nLocus3\nPOP\nOneida_01,  250230  564568  110100\nOneida_02,  252238  568558  100120\nOneida_03,  254230  564558  090100\nPOP\nNewcomb_01, 254230  564558  080100\nNewcomb_02, 000230  564558  090080\nNewcomb_03, 254230  000000  090100\nNewcomb_04, 254230  564000  090120\n"))),(0,l.kt)(o.Z,{value:"h",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Wasp populations in New York\nLocus1,Locus2,Locus3\nPOP\nOneida_01,  250230  564568  110100\nOneida_02,  252238  568558  100120\nOneida_03,  254230  564558  090100\nPOP\nNewcomb_01, 254230  564558  080100\nNewcomb_02, 000230  564558  090080\nNewcomb_03, 254230  000000  090100\nNewcomb_04, 254230  564000  090120\n")))),(0,l.kt)("h2",{id:"writing-to-a-genepop-file"},"Writing to a Genepop file"),(0,l.kt)("p",null,"All file writing options can be performed using ",(0,l.kt)("inlineCode",{parentName:"p"},"PopGen.write()"),", which calls ",(0,l.kt)("inlineCode",{parentName:"p"},"genpop")," when writing to a Genepop file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},'genepop(data::PopData; filename::String = "output.gen", digits::Int = 3, format::String = "vertical", miss::Int = 0)\n')),(0,l.kt)("p",null,"Writes a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object to a Genepop-formatted file."),(0,l.kt)("h3",{id:"arguments-1"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": the ",(0,l.kt)("inlineCode",{parentName:"li"},"PopData")," object you wish to convert to a Genepop file")),(0,l.kt)("h3",{id:"keyword-arguments-1"},"Keyword arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filename::String"),": the output filename"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"digits::Integer"),": how many digits to format each allele",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"digits = 3")," will turn ",(0,l.kt)("inlineCode",{parentName:"li"},"(1, 2)")," into ",(0,l.kt)("inlineCode",{parentName:"li"},"001002")," "))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"format::String")," : the way loci should be formatted ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"vertically (",(0,l.kt)("inlineCode",{parentName:"li"},'"v"')," or ",(0,l.kt)("inlineCode",{parentName:"li"},'"vertical"'),")"),(0,l.kt)("li",{parentName:"ul"},"hortizontally (",(0,l.kt)("inlineCode",{parentName:"li"},'"h"'),", or ",(0,l.kt)("inlineCode",{parentName:"li"},'"horizontal"'),")"),(0,l.kt)("li",{parentName:"ul"},"isolation-by-distance (",(0,l.kt)("inlineCode",{parentName:"li"},'"ibd"'),") where each sample is a population with coordinate data prepended"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"miss::Integer")," : how you would like missing values written ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"0")," : as a genotype represented as a number of zeroes equal to ",(0,l.kt)("inlineCode",{parentName:"li"},"digits \xd7 ploidy")," like ",(0,l.kt)("inlineCode",{parentName:"li"},"000000")," (default) "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-9")," : as a single value ",(0,l.kt)("inlineCode",{parentName:"li"},"-9"))))),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats;\nfewer_cats = omit(cats, name = samplenames(cats)[1:10]);\njulia> genepop(fewer_cats, filename = "filtered_nancycats.gen", digits = 3, format = "h")\n')),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,l.kt)("p",null,"The original implementations of the importing parser were written using only Base Julia, and while the speed was fantastic, the memory footprint involved seemed unusually high (~650mb RAM to parse ",(0,l.kt)("inlineCode",{parentName:"p"},"gulfsharks"),", which is only 3.2mb in size). However, thanks to the efforts of ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/JuliaData/CSV.jl"},"CSV.jl"),", we leverage that package to preserve the speed and reduce the memory footprint quite a bit!"))}k.isMDXComponent=!0}}]);