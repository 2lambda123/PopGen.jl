"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[7930],{3905:function(e,n,a){a.d(n,{Zo:function(){return s},kt:function(){return m}});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var u=t.createContext({}),c=function(e){var n=t.useContext(u),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},s=function(e){var n=c(e.components);return t.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||r;return a?t.createElement(f,i(i({ref:n},s),{},{components:a})):t.createElement(f,i({ref:n},s))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8215:function(e,n,a){var t=a(7294);n.Z=function(e){var n=e.children,a=e.hidden,o=e.className;return t.createElement("div",{role:"tabpanel",hidden:a,className:o},n)}},6396:function(e,n,a){a.d(n,{Z:function(){return d}});var t=a(7462),o=a(7294),r=a(2389),i=a(9443);var l=function(){var e=(0,o.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=a(9521),c=a(6010),s="tabItem_1uMI";function p(e){var n,a,t,r=e.lazy,i=e.block,p=e.defaultValue,d=e.values,m=e.groupId,f=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=d?d:g.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),v=(0,u.lx)(h,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===p?p:null!=(n=null!=p?p:null==(a=g.find((function(e){return e.props.default})))?void 0:a.props.value)?n:null==(t=g[0])?void 0:t.props.value;if(null!==k&&!h.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=l(),b=N.tabGroupChoices,w=N.setTabGroupChoices,y=(0,o.useState)(k),x=y[0],j=y[1],P=[],C=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var D=b[m];null!=D&&D!==x&&h.some((function(e){return e.value===D}))&&j(D)}var O=function(e){var n=e.currentTarget,a=P.indexOf(n),t=h[a].value;t!==x&&(C(n),j(t),null!=m&&w(m,t))},E=function(e){var n,a=null;switch(e.key){case"ArrowRight":var t=P.indexOf(e.currentTarget)+1;a=P[t]||P[0];break;case"ArrowLeft":var o=P.indexOf(e.currentTarget)-1;a=P[o]||P[P.length-1]}null==(n=a)||n.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},f)},h.map((function(e){var n=e.value,a=e.label;return o.createElement("li",{role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,className:(0,c.Z)("tabs__item",s,{"tabs__item--active":x===n}),key:n,ref:function(e){return P.push(e)},onKeyDown:E,onFocus:O,onClick:O},null!=a?a:n)}))),r?(0,o.cloneElement)(g.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function d(e){var n=(0,r.Z)();return o.createElement(p,(0,t.Z)({key:String(n)},e))}},9443:function(e,n,a){var t=(0,a(7294).createContext)(void 0);n.Z=t},1838:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var t=a(7462),o=a(3366),r=(a(7294),a(3905)),i=(a(6396),a(8215),["components"]),l={id:"advancedindexing",title:"Advanced PopData Indexing",sidebar_label:"Advanced Indexing"},u=void 0,c={unversionedId:"workingwithpopdata/advancedindexing",id:"workingwithpopdata/advancedindexing",isDocsHomePage:!1,title:"Advanced PopData Indexing",description:"In version 0.7.0, we introduce a powerful new way to index PopData...",source:"@site/docs/workingwithpopdata/advancedindexing.md",sourceDirName:"workingwithpopdata",slug:"/workingwithpopdata/advancedindexing",permalink:"/PopGen.jl/docs/workingwithpopdata/advancedindexing",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/workingwithpopdata/advancedindexing.md",tags:[],version:"current",lastUpdatedAt:1641229236,formattedLastUpdatedAt:"1/3/2022",frontMatter:{id:"advancedindexing",title:"Advanced PopData Indexing",sidebar_label:"Advanced Indexing"},sidebar:"docs",previous:{title:"Data exploration",permalink:"/PopGen.jl/docs/workingwithpopdata/dataexploration"},next:{title:"Hardy-Weinberg Equilibrium",permalink:"/PopGen.jl/docs/analyses/hardyweinberg"}},s=[{value:"Basic conditional indexing",id:"basic-conditional-indexing",children:[],level:3},{value:"Advanced conditional indexing",id:"advanced-conditional-indexing",children:[],level:3}],p={toc:s};function d(e){var n=e.components,a=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In version ",(0,r.kt)("inlineCode",{parentName:"p"},"0.7.0"),", we introduce a powerful new way to index PopData...\nby directly piggy-backing off of the incredible work done in ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFrames.jl"),".\nNow, you can index and subset PopData ","[almost]"," as though you were directly\nsubsetting the ",(0,r.kt)("inlineCode",{parentName:"p"},"genodata")," dataframe, and it will return a new subsetted\nPopData object (or other stuff). We'll go through some examples using the ",(0,r.kt)("inlineCode",{parentName:"p"},"nancycats")," data.\nThe conceptual syntax (the arrows are for demonstration) looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"# return new PopData\npopdata[column -> condition]\n\n# return a new genodata table\npopdata[column -> condition, :]\n\n# return a specific column\npopdata[column -> condition, :column]\n\n# return specific columns\npopdata[column -> condition, [:col1, :col2]]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"#julia> using PopGen\njulia> ncats = @nancycats\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n")),(0,r.kt)("h3",{id:"basic-conditional-indexing"},"Basic conditional indexing"),(0,r.kt)("p",null,'Basic conditional indexing is a fancy way of saying "pulling out specific\ninformation". Let\'s say we wanted to omit locus ',(0,r.kt)("inlineCode",{parentName:"p"},"fca8"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).locus .!= "fca8"]\nPopData{Diploid, 8 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n')),(0,r.kt)("p",null,"Or, maybe we only want loci ",(0,r.kt)("inlineCode",{parentName:"p"},"fca8")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"fca23"),". We use the ",(0,r.kt)("inlineCode",{parentName:"p"},"\u2208")," (",(0,r.kt)("inlineCode",{parentName:"p"},"\\in<TAB>"),") operator and wrap the loci in ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref()")," to keep the set from being broadcasted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).locus .\u2208  Ref(["fca8", "fca23"])]\nPopData{Diploid, 2 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n')),(0,r.kt)("p",null,"Perhaps we want only populations 1 through 5. Again, we bind the set in ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref()")," to prevent broadcasting over its elements. We also need to change the integers to strings because population names are always strings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> ncats[genodata(ncats).population .\u2208  Ref(string.(1:5))]\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 82\n  Populations: 5\n")),(0,r.kt)("p",null,"Maybe we just wanted to know the names of the samples in population ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),". Although for something like this you can just as well index the ",(0,r.kt)("inlineCode",{parentName:"p"},"sampleinfo")," dataframe. Note that we need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"unique")," here because the ",(0,r.kt)("inlineCode",{parentName:"p"},"genodata")," table is in long-format, meaning there are as many occurances of each sample name as there are loci. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).population .== "5", :name] |> unique\n15-element Vector{InlineStrings.String7}:\n "N55"\n "N56"\n "N57"\n "N58"\n "N59"\n "N60"\n "N61"\n "N62"\n "N63"\n "N64"\n "N65"\n "N66"\n "N67"\n "N68"\n "N69"\n')),(0,r.kt)("h3",{id:"advanced-conditional-indexing"},"Advanced conditional indexing"),(0,r.kt)("p",null,"Just like in ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFrames.jl"),', we can chain conditions with a broadcasted\n"and" operator (',(0,r.kt)("inlineCode",{parentName:"p"},".&"),') and really pull out information of interest. This also works for a broadcasted\n"or" operator (',(0,r.kt)("inlineCode",{parentName:"p"},".|"),"). Something to keep in mind is that each statement needs to be wrapped in\nparentheses like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"popdata[(statement1) .& (statement2)]\n")),(0,r.kt)("p",null,"Let's find all the samples in population ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," that are heterozygous for allele ",(0,r.kt)("inlineCode",{parentName:"p"},"133")," in locus ",(0,r.kt)("inlineCode",{parentName:"p"},"fca8")," and return just a dataframe.\nNotice we are using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ishet")," method ",(0,r.kt)("inlineCode",{parentName:"p"},"ishet(genotype, allele)")," and broadcasting it with ",(0,r.kt)("inlineCode",{parentName:"p"},"ishet.()")," over an array of genotypes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> gd = genodata(ncats) ;\njulia> ncats[(gd.locus .== "fca8") .& (gd.population .== "2") .& (ishet.(gd.genotype, 133)), :]\n\n6\xd74 DataFrame\n Row \u2502 name      population  locus   genotype   \n     \u2502 String7\u2026  String      String  Tuple\u2026?    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 N141      2           fca8    (129, 133)\n   2 \u2502 N142      2           fca8    (129, 133)\n   3 \u2502 N146      2           fca8    (129, 133)\n   4 \u2502 N151      2           fca8    (129, 133)\n   5 \u2502 N154      2           fca8    (133, 135)\n   6 \u2502 N155      2           fca8    (131, 133)\n')),(0,r.kt)("p",null,"How about which samples are missing data for locus ",(0,r.kt)("inlineCode",{parentName:"p"},"fca8"),"?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> gd = genodata(ncats) ;\njulia> ncats[(gd.locus .== "fca8") .& (ismissing.(gd.genotype)), :name]\n20-element PooledArrays.PooledVector{InlineStrings.String7, UInt8, Vector{UInt8}}:\n "N215"\n "N216"\n "N188"\n "N189"\n "N190"\n "N191"\n "N192"\n \u22ee\n "N197"\n "N198"\n "N199"\n "N200"\n "N201"\n "N206"\n')),(0,r.kt)("p",null,"This should get you started on thinking of ways to explore your data \ud83d\ude04."))}d.isMDXComponent=!0}}]);