"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[7930],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=a.createContext({}),c=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||r;return t?a.createElement(f,i(i({ref:n},s),{},{components:t})):a.createElement(f,i({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(7462),o=t(7294),r=t(2389),i=t(9443);var l=function(){var e=(0,o.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=t(9521),c=t(6010),s="tabItem_vU9c";function p(e){var n,t,a,r=e.lazy,i=e.block,p=e.defaultValue,d=e.values,m=e.groupId,f=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:g.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),h=(0,u.lx)(v,(function(e,n){return e.value===n.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===p?p:null!=(n=null!=p?p:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=g[0])?void 0:a.props.value;if(null!==b&&!v.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=l(),w=k.tabGroupChoices,y=k.setTabGroupChoices,N=(0,o.useState)(b),x=N[0],j=N[1],P=[],D=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=w[m];null!=C&&C!==x&&v.some((function(e){return e.value===C}))&&j(C)}var O=function(e){var n=e.currentTarget,t=P.indexOf(n),a=v[t].value;a!==x&&(D(n),j(a),null!=m&&y(m,a))},E=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=P.indexOf(e.currentTarget)+1;t=P[a]||P[0];break;case"ArrowLeft":var o=P.indexOf(e.currentTarget)-1;t=P[o]||P[P.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":i},f)},v.map((function(e){var n=e.value,t=e.label;return o.createElement("li",{role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,className:(0,c.Z)("tabs__item",s,{"tabs__item--active":x===n}),key:n,ref:function(e){return P.push(e)},onKeyDown:E,onFocus:O,onClick:O},null!=t?t:n)}))),r?(0,o.cloneElement)(g.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function d(e){var n=(0,r.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}},9443:function(e,n,t){var a=(0,t(7294).createContext)(void 0);n.Z=a},1838:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),i=(t(6396),t(8215),["components"]),l={id:"advancedindexing",title:"Advanced PopData Indexing",sidebar_label:"Advanced Indexing"},u=void 0,c={unversionedId:"workingwithpopdata/advancedindexing",id:"workingwithpopdata/advancedindexing",isDocsHomePage:!1,title:"Advanced PopData Indexing",description:"In version 0.7.0, we introduce a powerful new way to index PopData...",source:"@site/docs/workingwithpopdata/advancedindexing.md",sourceDirName:"workingwithpopdata",slug:"/workingwithpopdata/advancedindexing",permalink:"/PopGen.jl/docs/workingwithpopdata/advancedindexing",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/workingwithpopdata/advancedindexing.md",tags:[],version:"current",lastUpdatedAt:1635451805,formattedLastUpdatedAt:"10/28/2021",frontMatter:{id:"advancedindexing",title:"Advanced PopData Indexing",sidebar_label:"Advanced Indexing"},sidebar:"docs",previous:{title:"Data exploration",permalink:"/PopGen.jl/docs/workingwithpopdata/dataexploration"},next:{title:"Hardy-Weinberg Equilibrium",permalink:"/PopGen.jl/docs/analyses/hardyweinberg"}},s=[{value:"Basic conditional indexing",id:"basic-conditional-indexing",children:[],level:3},{value:"Advanced conditional indexing",id:"advanced-conditional-indexing",children:[],level:3}],p={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In version ",(0,r.kt)("inlineCode",{parentName:"p"},"0.7.0"),", we introduce a powerful new way to index PopData...\nby directly piggy-backing off of the incredible work done in ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFrames.jl"),".\nNow, you can index and subset PopData ","[almost]"," as though you were directly\nsubsetting the ",(0,r.kt)("inlineCode",{parentName:"p"},"genodata")," dataframe, and it will return a new subsetted\nPopData object (or other stuff). We'll go through some examples using the ",(0,r.kt)("inlineCode",{parentName:"p"},"nancycats")," data.\nThe conceptual syntax (the arrows are for demonstration) looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"# return new PopData\npopdata[column -> condition]\n\n# return a new genodata table\npopdata[column -> condition, :]\n\n# return a specific column\npopdata[column -> condition, :column]\n\n# return specific columns\npopdata[column -> condition, [:col1, :col2]]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"#julia> using PopGen\njulia> ncats = @nancycats\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n")),(0,r.kt)("h3",{id:"basic-conditional-indexing"},"Basic conditional indexing"),(0,r.kt)("p",null,'Basic conditional indexing is a fancy way of saying "pulling out specific\ninformation". Let\'s say we wanted to omit locus ',(0,r.kt)("inlineCode",{parentName:"p"},"fca8"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).locus .!= "fca8"]\nPopData{Diploid, 8 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n')),(0,r.kt)("p",null,"Or, maybe we only want loci ",(0,r.kt)("inlineCode",{parentName:"p"},"fca8")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"fca23"),". We use the ",(0,r.kt)("inlineCode",{parentName:"p"},"\u2208")," (",(0,r.kt)("inlineCode",{parentName:"p"},"\\in<TAB>"),") operator and wrap the loci in ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref()")," to keep the set from being broadcasted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).locus .\u2208  Ref(["fca8", "fca23"])]\nPopData{Diploid, 2 Microsatellite loci}\n  Samples: 237\n  Populations: 17\n')),(0,r.kt)("p",null,"Perhaps we want only populations 1 through 5. Again, we bind the set in ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref()")," to prevent broadcasting over its elements. We also need to change the integers to strings because population names are always strings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"julia> ncats[genodata(ncats).population .\u2208  Ref(string.(1:5))]\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 82\n  Populations: 5\n")),(0,r.kt)("p",null,"Maybe we just wanted to know the names of the samples in population ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),". Although for something like this you can just as well index the ",(0,r.kt)("inlineCode",{parentName:"p"},"sampleinfo")," dataframe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> ncats[genodata(ncats).population .== "5", :name] |> unique\n15-element Vector{InlineStrings.String7}:\n "N55"\n "N56"\n "N57"\n "N58"\n "N59"\n "N60"\n "N61"\n "N62"\n "N63"\n "N64"\n "N65"\n "N66"\n "N67"\n "N68"\n "N69"\n')),(0,r.kt)("h3",{id:"advanced-conditional-indexing"},"Advanced conditional indexing"),(0,r.kt)("p",null,"Just like in ",(0,r.kt)("inlineCode",{parentName:"p"},"DataFrames.jl"),', we can chain conditions with a broadcasted\n"and" operator (',(0,r.kt)("inlineCode",{parentName:"p"},".&"),") and really pull out information of interest.\nSomething to keep in mind is that each statement needs to be wrapped in\nparentheses."),(0,r.kt)("p",null,"Let's find all the samples in population ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," that are heterozygous for allele ",(0,r.kt)("inlineCode",{parentName:"p"},"133")," in locus ",(0,r.kt)("inlineCode",{parentName:"p"},"fca8")," and return just a dataframe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> gd = genodata(ncats) ;\njulia> ncats[(gd.locus .== "fca8") .& (gd.population .== "2") .& (ishet.(gd.genotype, 133)), :]\n\n6\xd74 DataFrame\n Row \u2502 name      population  locus   genotype   \n     \u2502 String7\u2026  String      String  Tuple\u2026?    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 N141      2           fca8    (129, 133)\n   2 \u2502 N142      2           fca8    (129, 133)\n   3 \u2502 N146      2           fca8    (129, 133)\n   4 \u2502 N151      2           fca8    (129, 133)\n   5 \u2502 N154      2           fca8    (133, 135)\n   6 \u2502 N155      2           fca8    (131, 133)\n')),(0,r.kt)("p",null,"How about which samples are missing data for locus ",(0,r.kt)("inlineCode",{parentName:"p"},"fca8"),"?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> gd = genodata(ncats) ;\njulia> ncats[(gd.locus .== "fca8") .& (ismissing.(gd.genotype)), :name]\n20-element PooledArrays.PooledVector{InlineStrings.String7, UInt8, Vector{UInt8}}:\n "N215"\n "N216"\n "N188"\n "N189"\n "N190"\n "N191"\n "N192"\n \u22ee\n "N197"\n "N198"\n "N199"\n "N200"\n "N201"\n "N206"\n')),(0,r.kt)("p",null,"This should get you started on thinking of ways to explore your data \ud83d\ude04."))}d.isMDXComponent=!0}}]);