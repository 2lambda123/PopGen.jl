"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[3454],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=o,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return a?n.createElement(f,r(r({ref:t},d),{},{components:a})):n.createElement(f,r({ref:t},d))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1433:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var n=a(7462),o=a(3366),i=(a(7294),a(3905)),r=["components"],l={id:"popdata",title:"The PopData type",sidebar_label:"The PopData type"},s=void 0,p={unversionedId:"gettingstarted/popdata",id:"gettingstarted/popdata",isDocsHomePage:!1,title:"The PopData type",description:"For the PopGen.jl package to be consistent, a standard flexible data structure needs to be defined. The solution is a custom type called PopData. The struct is defined in PopGenCore.jl as:",source:"@site/docs/gettingstarted/popdata.md",sourceDirName:"gettingstarted",slug:"/gettingstarted/popdata",permalink:"/PopGen.jl/docs/gettingstarted/popdata",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/gettingstarted/popdata.md",tags:[],version:"current",lastUpdatedAt:1635818904,formattedLastUpdatedAt:"11/2/2021",frontMatter:{id:"popdata",title:"The PopData type",sidebar_label:"The PopData type"},sidebar:"docs",previous:{title:"Comparison",permalink:"/PopGen.jl/docs/gettingstarted/comparison"},next:{title:"Other data types",permalink:"/PopGen.jl/docs/gettingstarted/othertypes"}},d=[{value:"Metadata",id:"metadata",children:[],level:2},{value:"Genodata",id:"genodata",children:[],level:2},{value:"Acknowledgements",id:"acknowledgements",children:[],level:2}],c={toc:d};function m(e){var t=e.components,l=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"For the PopGen.jl package to be consistent, a standard flexible data structure needs to be defined. The solution is a custom type called ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData"),". The struct is defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGenCore.jl")," as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"struct PopData\n    metadata::PopDataInfo\n    genodata::DataFrame\nend\n")),(0,i.kt)("p",null,"where ",(0,i.kt)("inlineCode",{parentName:"p"},"PopDataInfo")," is a nested object defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGenCore.jl")," as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"mutable struct PopDataInfo\n    samples::Int64\n    sampeinfo::DataFrame\n    loci::Int64\n    locusinfo::DataFrame\n    populations::Int64\n    ploidy::Union{Int8, Vector{Int8}}\n    biallelic::Bool\nend\n")),(0,i.kt)("p",null,"As you can see, a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," is made up of two components, one called ",(0,i.kt)("inlineCode",{parentName:"p"},"metadata")," for sample and locus information, and the other called ",(0,i.kt)("inlineCode",{parentName:"p"},"genodata")," which includes genotype information. This structure allows for easy and convenient access to the fields using dot ",(0,i.kt)("inlineCode",{parentName:"p"},".")," accessors. Both ",(0,i.kt)("inlineCode",{parentName:"p"},"metadata")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"genodata")," are specific in their structure, so here is an illustration to help you visualize a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object (feel free to open the image in another window and zoom in):"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"PopData",src:a(1743).Z})),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),'The "PopObj"')),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," falls under an AbstractType we call ",(0,i.kt)("inlineCode",{parentName:"p"},"PopObj"),', which is short for "PopGen Object". While not implemented yet,\n',(0,i.kt)("inlineCode",{parentName:"p"},"PopObj"),' exists to futureproof some flexibility into niche data types. Fun fact: we decided to pronounce PopObj as "pop ob" with a silent j because it sounds better than saying "pop obj", but writing it as PopOb looks weird. It\'s a silly little detail that Pavel seems to care a lot about.'))),(0,i.kt)("h2",{id:"metadata"},"Metadata"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"metadata")," component exists to "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"frontload commonly used values like the number of populations and if the data is biallelic"),(0,i.kt)("li",{parentName:"ol"},"store information about samples or loci that may be relevant in specific applications"),(0,i.kt)("li",{parentName:"ol"},"provide flexibility in storing that information in wide format because storing it in long format would dramatically increase the size of ",(0,i.kt)("inlineCode",{parentName:"li"},"PopData")," objects"),(0,i.kt)("li",{parentName:"ol"},"provide easy access to viewing sample or locus information")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/PopGen.jl/docs/workingwithpopdata/viewdata"},"accessing elements")," for a closer look at accessing this\ninformation."),(0,i.kt)("h2",{id:"genodata"},"Genodata"),(0,i.kt)("p",null,"The genotype information is stored in a separate table lovingly called ",(0,i.kt)("inlineCode",{parentName:"p"},"genodata"),'. This table is rather special in that it is stored in "long" format, i.e. one record per row. Storing data this way makes it a lot easier to interrogate the data and write new functions. It also means the table will have as many rows as loci x samples, which can become a lot. To reduce redundant objects inflating object size, the columns name, population, and locus are each a special type of compressed vector from ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaData/PooledArrays.jl"},"PooledArrays.jl"),", which is a memory-saving data structure for long repetitive categorical data. Without using this format, ",(0,i.kt)("inlineCode",{parentName:"p"},"gulfsharks"),", whose source file is 3.2mb, would occupy about 27mb in your RAM! The classes of ",(0,i.kt)("inlineCode",{parentName:"p"},".genodata")," can be directly accessed with ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData.genodata.colname")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," is the name of your PopData object, and ",(0,i.kt)("inlineCode",{parentName:"p"},"colname")," is one of ",(0,i.kt)("inlineCode",{parentName:"p"},"name, population, locus, genotype"),". See ",(0,i.kt)("a",{parentName:"p",href:"/PopGen.jl/docs/workingwithpopdata/advancedindexing"},"Advanced Indexing")," for a deeper\ndive into manipulating genodata."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"immutable genotypes")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We use the Tuple type for genotypes of individuals because they are ",(0,i.kt)("strong",{parentName:"p"},"immutable")," (cannot be changed). By the time you're using PopGen.jl, your data should already be filtered and screened. Hand-editing of genotype alleles is ",(0,i.kt)("strong",{parentName:"p"},"strongly")," discouraged, so we outlawed it."))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,i.kt)("p",null,"A ",(0,i.kt)("em",{parentName:"p"},"lot")," of what's possible in PopGen.jl is thanks to the tireless work of the contributors and maintainers of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaData/DataFrames.jl"},"DataFrames.jl"),". It's no small task to come up with and maintain a robust, performant, and sensible tabular data type, and they deserve so much credit for it."))}m.isMDXComponent=!0},1743:function(e,t,a){t.Z=a.p+"assets/images/PopData-c2579fb5c8fbdfc63ad20b545bf3b317.svg"}}]);