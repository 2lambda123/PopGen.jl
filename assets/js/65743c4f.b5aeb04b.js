"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[2609],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),f=l,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||r;return t?a.createElement(d,i(i({ref:n},p),{},{components:t})):a.createElement(d,i({ref:n},p))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8185:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return p},toc:function(){return u},default:function(){return f}});var a=t(7462),l=t(3366),r=(t(7294),t(3905)),i=["components"],o={id:"allelematrices",title:"AlleleMatrices.jl",sidebar_label:"AlleleMatrices.jl"},s=void 0,c={unversionedId:"api/PopGen/allelematrices",id:"api/PopGen/allelematrices",title:"AlleleMatrices.jl",description:"PopGen.jl/src/AlleleMatrices.jl",source:"@site/docs/api/PopGen/AlleleMatrices.md",sourceDirName:"api/PopGen",slug:"/api/PopGen/allelematrices",permalink:"/PopGen.jl/docs/api/PopGen/allelematrices",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGen/AlleleMatrices.md",tags:[],version:"current",lastUpdatedAt:1649708346,formattedLastUpdatedAt:"4/11/2022",frontMatter:{id:"allelematrices",title:"AlleleMatrices.jl",sidebar_label:"AlleleMatrices.jl"},sidebar:"docs",previous:{title:"API (start here)",permalink:"/PopGen.jl/docs/api/"},next:{title:"DataExploration.jl",permalink:"/PopGen.jl/docs/api/PopGen/dataexploration"}},p={},u=[{value:"PopGen.jl/src/AlleleMatrices.jl",id:"popgenjlsrcallelematricesjl",level:2},{value:"\ud83d\udce6 _allelematrix",id:"-_allelematrix",level:3},{value:"\ud83d\udce6 _countset",id:"-_countset",level:3},{value:"\ud83d\udce6 _countmatrix",id:"-_countmatrix",level:3},{value:"\ud83d\udce6 _freqmatrix_zero",id:"-_freqmatrix_zero",level:3},{value:"\ud83d\udce6 _freqmatrix_mean",id:"-_freqmatrix_mean",level:3},{value:"\ud83d\udce6 _freqmatrix_missing",id:"-_freqmatrix_missing",level:3},{value:"\ud83d\udce6 _freqmatrix_scale",id:"-_freqmatrix_scale",level:3}],m={toc:u};function f(e){var n=e.components,t=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"popgenjlsrcallelematricesjl"},"PopGen.jl/src/AlleleMatrices.jl"),(0,r.kt)("p",null,"\ud83d\udce6  => not exported |\n\ud83d\udd35 => exported by PopGen.jl"),(0,r.kt)("h3",{id:"-_allelematrix"},"\ud83d\udce6 _allelematrix"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'_allelematrix(data::PopData; by::String = "count", missings = "mean", scale = false, center = false)\n')),(0,r.kt)("p",null,"Return a matrix of allele counts or frequencies per genotype where rows are samples\nand columns are the occurence count or frequency of an allele for that locus in that sample.\nLoci and alleles are sorted alphanumerically. Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"scale")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"center")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," will\ncompute allele frequencies regardless of the ",(0,r.kt)("inlineCode",{parentName:"p"},"by")," keyword."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Keyword Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"by"),": a ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"count")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"frequency")," (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"frequency"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"missings"),": a ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," denoting how to handle missing values when outputting ",(0,r.kt)("inlineCode",{parentName:"li"},"frequency")," (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"mean"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"missing"'),": fallback method to keep ",(0,r.kt)("inlineCode",{parentName:"li"},"missing")," values as they are"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"zero"'),": replace ",(0,r.kt)("inlineCode",{parentName:"li"},"missing")," values with ",(0,r.kt)("inlineCode",{parentName:"li"},"0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"mean"'),": replace ",(0,r.kt)("inlineCode",{parentName:"li"},"missing")," values with the mean frequency for that allele in that locus"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scale"),": a 'Bool' of whether to z-score scale allele frequencies (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"center"),": a ",(0,r.kt)("inlineCode",{parentName:"li"},"Bool")," of whether to center the allele frequencies (default: 'false')")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'julia> cats = @nancycats ;\njulia> frq = _allelematrix(cats) ;  frq[1:5,1:6]\n5\xd76 Matrix{Union{Missing, Int8}}:\n  missing   missing   missing   missing   missing   missing\n  missing   missing   missing   missing   missing   missing\n 0         0         0         0         0         0\n 0         0         0         0         0         0\n 0         0         0         0         0         0\njulia> frq = _allelematrix(cats, by = "frequency") ;  frq[1:5,1:6]\n5\xd76 Matrix{Union{Missing, Float32}}:\n 0.00460829  0.00460829  0.0276498  0.133641  0.00460829  0.0921659\n 0.00460829  0.00460829  0.0276498  0.133641  0.00460829  0.0921659\n 0.0         0.0         0.0        0.0       0.0         0.0\n 0.0         0.0         0.0        0.0       0.0         0.0\n 0.0         0.0         0.0        0.0       0.0         0.0\n julia> frq = _allelematrix(cats, by = "frequency", missings = "zero") ;  frq[1:5,1:6]\n 5\xd76 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0  0.0\n julia> frq = _allelematrix(cats, missings = "mean", scale = true, center = true) ;  frq[1:5,1:6]\n 5\xd76 Matrix{Float32}:\n  7.17017f-9   7.17017f-9   0.0        0.0        7.17017f-9   0.0\n  7.17017f-9   7.17017f-9   0.0        0.0        7.17017f-9   0.0\n -0.0709577   -0.0709577   -0.175857  -0.394198  -0.0709577   -0.300797\n -0.0709577   -0.0709577   -0.175857  -0.394198  -0.0709577   -0.300797\n -0.0709577   -0.0709577   -0.175857  -0.394198  -0.0709577   -0.300797\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_countset"},"\ud83d\udce6 _countset"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"_countset(query,reference)\n")),(0,r.kt)("p",null,"Count the number of times each element in iterable ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," occurs in iterable/set ",(0,r.kt)("inlineCode",{parentName:"p"},"reference")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"_countset(query::Missing,reference)\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"missing")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_countmatrix"},"\ud83d\udce6 _countmatrix"),(0,r.kt)("p",null,'"""\n_countmatrix(data::PopData)\nCreate a matrix of allele count per genotype where rows are samples\nand columns are the occurence count of an allele for that locus in that sample.\nMissing values are preserved as ',(0,r.kt)("inlineCode",{parentName:"p"},"-1"),'.\n"""'),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_freqmatrix_zero"},"\ud83d\udce6 _freqmatrix_zero"),(0,r.kt)("p",null,'"""\n_freqmatrix_zero(data::PopData)\nCreate a matrix of allele frequencies per genotype where rows are samples\nand columns are the frequency of an allele for that locus in that sample.\nMissing values are replaced by zeros.\n"""'),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_freqmatrix_mean"},"\ud83d\udce6 _freqmatrix_mean"),(0,r.kt)("p",null,'"""\n_freqmatrix_mean(data::PopData)\nCreate a matrix of allele frequencies per genotype where rows are samples\nand columns are the frequency of an allele for that locus in that sample.\nMissing values are replaced by the global mean allele frequency.\n"""'),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_freqmatrix_missing"},"\ud83d\udce6 _freqmatrix_missing"),(0,r.kt)("p",null,'"""\n_freqmatrix_missing(data::PopData)\nCreate a matrix of allele frequencies per genotype where rows are samples\nand columns are the frequency of an allele for that locus in that sample.\nMissing values are kept as ',(0,r.kt)("inlineCode",{parentName:"p"},"missing"),'.\n"""'),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_freqmatrix_scale"},"\ud83d\udce6 _freqmatrix_scale"),(0,r.kt)("p",null,'"""\n_freqmatrix_scale(freqs::Matrix{Float32}, scale::Bool = true, center::Bool = true)\nReturns a Z-score scaled matrix of allele frequencies where rows are samples\nand columns are the frequency of an allele for that locus in that sample.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scale"),": a 'Bool' of whether to z-score scale allele frequencies (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"center"),": a ",(0,r.kt)("inlineCode",{parentName:"li"},"Bool"),' of whether to center the allele frequencies (default: \'false\')\n"""')))}f.isMDXComponent=!0}}]);