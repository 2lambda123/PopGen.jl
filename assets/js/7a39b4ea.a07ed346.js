"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[2631],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return c}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),c=i,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||l;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4640:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var a=t(7462),i=t(3366),l=(t(7294),t(3905)),r=["components"],o={id:"pairwiserelatedness",title:"PairwiseRelatedness.jl",sidebar_label:"PairwiseRelatedness.jl"},s=void 0,p={unversionedId:"api/PopGen/pairwiserelatedness",id:"api/PopGen/pairwiserelatedness",isDocsHomePage:!1,title:"PairwiseRelatedness.jl",description:"PopGen.jl/src/Relatedness/PairwiseRelatedness.jl",source:"@site/docs/api/PopGen/PairwiseRelatedness.md",sourceDirName:"api/PopGen",slug:"/api/PopGen/pairwiserelatedness",permalink:"/PopGen.jl/docs/api/PopGen/pairwiserelatedness",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGen/PairwiseRelatedness.md",tags:[],version:"current",lastUpdatedAt:1636029729,formattedLastUpdatedAt:"11/4/2021",frontMatter:{id:"pairwiserelatedness",title:"PairwiseRelatedness.jl",sidebar_label:"PairwiseRelatedness.jl"},sidebar:"docs",previous:{title:"PairwiseFST.jl",permalink:"/PopGen.jl/docs/api/PopGen/pairwisefst"},next:{title:"RelatednessMoments.jl",permalink:"/PopGen.jl/docs/api/PopGen/relatednessmoments"}},d=[{value:"PopGen.jl/src/Relatedness/PairwiseRelatedness.jl",id:"popgenjlsrcrelatednesspairwiserelatednessjl",children:[{value:"\ud83d\udce6 _bootstrapsummary",id:"-_bootstrapsummary",children:[],level:3},{value:"\ud83d\udce6 _bootstrapgenos_all",id:"-_bootstrapgenos_all",children:[],level:3},{value:"\ud83d\udce6 _bootstrapgenos_nonmissing",id:"-_bootstrapgenos_nonmissing",children:[],level:3},{value:"\ud83d\udce6 _relatedness_boot_all",id:"-_relatedness_boot_all",children:[],level:3},{value:"\ud83d\udce6 _relatedness_boot_nonmissing",id:"-_relatedness_boot_nonmissing",children:[],level:3},{value:"\ud83d\udce6 _relatedness_noboot",id:"-_relatedness_noboot",children:[],level:3},{value:"\ud83d\udd35 relatedness",id:"-relatedness",children:[{value:"Estimator methods",id:"estimator-methods",children:[],level:4},{value:"Inbreeding",id:"inbreeding",children:[],level:4},{value:"Bootstrapping",id:"bootstrapping",children:[],level:4},{value:"Resampling methods",id:"resampling-methods",children:[],level:4},{value:"Examples",id:"examples",children:[],level:4}],level:3},{value:"\ud83d\udd35 merge_relatedness",id:"-merge_relatedness",children:[],level:3}],level:2}],m={toc:d};function u(e){var n=e.components,t=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"popgenjlsrcrelatednesspairwiserelatednessjl"},"PopGen.jl/src/Relatedness/PairwiseRelatedness.jl"),(0,l.kt)("p",null,"\ud83d\udce6  => not exported |\n\ud83d\udd35 => exported by PopGen.jl"),(0,l.kt)("h3",{id:"-_bootstrapsummary"},"\ud83d\udce6 _bootstrapsummary"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"_bootstrapsummary(::Vector{Union{Missing, Float64}}, width::Tuple{Float64, Float64})\n")),(0,l.kt)("p",null,"Return the mean, median, standard error, and quantiles (given by ",(0,l.kt)("inlineCode",{parentName:"p"},"witdth"),") of relatedness resampling."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-_bootstrapgenos_all"},"\ud83d\udce6 _bootstrapgenos_all"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"_bootstrapgenos_all(ind1::GenoArray, ind2::GenoArray, locus_names::Vector{Symbol}, n_per_loc::Vector{Int}, alleles::NamedTuple; method::Function, iterations::Int)\n")),(0,l.kt)("p",null,"Perform ",(0,l.kt)("inlineCode",{parentName:"p"},"iterations")," number of bootstrap resampling iterations of all genotypes between pair (",(0,l.kt)("inlineCode",{parentName:"p"},"ind1")," ",(0,l.kt)("inlineCode",{parentName:"p"},"ind2"),"). Returns a vector of length ",(0,l.kt)("inlineCode",{parentName:"p"},"interatotions"),"\nof the relatedness estimate given by method ",(0,l.kt)("inlineCode",{parentName:"p"},"method"),". This is an internal function with ",(0,l.kt)("inlineCode",{parentName:"p"},"locus_names"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"n_per_loc"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"alleles")," supplied by ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness_boot_all"),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-_bootstrapgenos_nonmissing"},"\ud83d\udce6 _bootstrapgenos_nonmissing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"bootstrapgenos_nonmissing(ind1::GenoArray, ind2::GenoArray, locus_names::Vector{Symbol}, n_per_loc::Vector{Int}, alleles::NamedTuple; method::Function, iterations::Int)\n")),(0,l.kt)("p",null,"Perform ",(0,l.kt)("inlineCode",{parentName:"p"},"iterations")," number of bootstrap resampling iterations of only shared (nonmissing) genotypes between pair (",(0,l.kt)("inlineCode",{parentName:"p"},"ind1")," ",(0,l.kt)("inlineCode",{parentName:"p"},"ind2"),"). Returns a vector of length ",(0,l.kt)("inlineCode",{parentName:"p"},"interatotions"),"\nof the relatedness estimate given by method ",(0,l.kt)("inlineCode",{parentName:"p"},"method"),". This is an internal function with ",(0,l.kt)("inlineCode",{parentName:"p"},"locus_names"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"n_per_loc"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"alleles")," supplied by ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness_boot_nonmissing"),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-_relatedness_boot_all"},"\ud83d\udce6 _relatedness_boot_all"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"_relatedness_boot_all(::PopData, sample_names::Vector{String}; method::Function, iterations::Int, interval::Tuple{Float64, Float64})\n")),(0,l.kt)("p",null,"Calculate pairwise relatedness between all combinations of the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"sample_names")," for each ",(0,l.kt)("inlineCode",{parentName:"p"},"method")," provided. Bootstrapping resamples using\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"all")," method, where resampling occurs over all loci. This is an internal function with all arguments provided by ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness"),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-_relatedness_boot_nonmissing"},"\ud83d\udce6 _relatedness_boot_nonmissing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"_relatedness_boot_nonmissing(::PopData, sample_names::Vector{String}; method::F, iterations::Int, interval::Tuple{Float64, Float64}) where F\n")),(0,l.kt)("p",null,"Calculate pairwise relatedness between all combinations of the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"sample_names")," for each ",(0,l.kt)("inlineCode",{parentName:"p"},"method")," provided. Bootstrapping resamples using\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"nonmissing")," method, where resampling occurs over only shared non-missing loci. This is an internal function with all arguments provided by ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness"),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-_relatedness_noboot"},"\ud83d\udce6 _relatedness_noboot"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"_relatedness_noboot(::PopData, sample_names::Vector{String}; method::F) where F\n")),(0,l.kt)("p",null,"Calculate pairwise relatedness between all combinations of the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"sample_names")," for each ",(0,l.kt)("inlineCode",{parentName:"p"},"method")," provided.\nThis is an internal function with arguments provided by ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness"),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-relatedness"},"\ud83d\udd35 relatedness"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"# compare all samples\nrelatedness(::PopData; method::Function, iterations::Int64, interval::Tuple{Float64, Float64}, resample::String, inbreeding::Bool = false)\n# to compare specific samples\nrelatedness(::PopData, samples; method::F, iterations::Int64, interval::Tuple{Float64, Float64}, resample::String, inbreeding::Bool = false)\n")),(0,l.kt)("p",null,"Return a dataframe of pairwise relatedness estimates for all or select pairs of ",(0,l.kt)("inlineCode",{parentName:"p"},"samples")," in a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object using\nmethod(s) ",(0,l.kt)("inlineCode",{parentName:"p"},"F")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"F")," is one or several of the methods listed below. If no bootstrapping is required, then the only\nnecessary keyword to provide is ",(0,l.kt)("inlineCode",{parentName:"p"},"method = ")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"inbreeding = ")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"dyadicLikelihood")," method (see examples below). ",(0,l.kt)("strong",{parentName:"p"},"Note:")," samples must be diploid."),(0,l.kt)("h4",{id:"estimator-methods"},"Estimator methods"),(0,l.kt)("p",null,"The available estimators are listed below and are functions themselves. ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness")," takes the\nfunction names as arguments (",(0,l.kt)("strong",{parentName:"p"},"case sensitive"),"), therefore do not use quotes or colons\nin specifying the methods. Multiple methods can be supplied as a vector. All of these methods will tab-autocomplete.\nFor more information on a specific method, please see the respective docstring (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"?Loiselle"),")."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Blouin")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dyadicLikelihood")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LiHorvitz")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Loiselle")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Lynch")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LynchLi")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LynchRitland")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Moran")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"QuellerGoodnight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Ritland")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Wang"))),(0,l.kt)("h4",{id:"inbreeding"},"Inbreeding"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"inbreeding")," keyword to specify whether to allow inbreeding (",(0,l.kt)("inlineCode",{parentName:"p"},"true"),") or not (",(0,l.kt)("inlineCode",{parentName:"p"},"false"),", default).\nThis is only relevant for the ",(0,l.kt)("inlineCode",{parentName:"p"},"dyadicLikelihood")," method."),(0,l.kt)("h4",{id:"bootstrapping"},"Bootstrapping"),(0,l.kt)("p",null,"To calculate means, medians, standard errors, and confidence intervals using bootstrapping,\nset ",(0,l.kt)("inlineCode",{parentName:"p"},"iterations = n")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," is an integer greater than ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," (the default) corresponding to the number\nof bootstrap iterations you wish to perform for each pair. The default confidence interval is ",(0,l.kt)("inlineCode",{parentName:"p"},"(0.05, 0.95)")," (i.e. 90%),\nhowever that can be changed by supplying the keyword ",(0,l.kt)("inlineCode",{parentName:"p"},"interval = (low, high)")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"low")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"high")," are the intervals you want\n(as ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractFloat"),"). The returned DataFrame will have 5 columns per ",(0,l.kt)("inlineCode",{parentName:"p"},"method")," with bootstrapped parameters having the naming\nconvention of ",(0,l.kt)("inlineCode",{parentName:"p"},"Method_parameter"),". The output may have more columns than will fit on your screen, so ",(0,l.kt)("inlineCode",{parentName:"p"},"DataFrames.names(out_df)"),"\nmay be useful to see a list of the column names."),(0,l.kt)("h4",{id:"resampling-methods"},"Resampling methods"),(0,l.kt)("p",null,"There are two available resampling methods, ",(0,l.kt)("inlineCode",{parentName:"p"},'"all"')," (default  & recommended) and ",(0,l.kt)("inlineCode",{parentName:"p"},'"nonmissing"'),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"all"')," : resamples all loci for a pair of individuals and then drops missing loci between them",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"speed: slower"),(0,l.kt)("li",{parentName:"ul"},"pro: better resampling variation"),(0,l.kt)("li",{parentName:"ul"},"con: by chance some iterations may have a lot of missing loci that have to be dropped"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"nonmissing"')," : resamples only the shared non-missing loci between the pair",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"speed: faster"),(0,l.kt)("li",{parentName:"ul"},"pro: every iteration guarantees the same number of loci compared between the pair"),(0,l.kt)("li",{parentName:"ul"},"con: too-tight confidence intervals due to less possible variation")))),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'julia> cats = @nancycats;\n\njulia> relatedness(cats, method = Ritland)\n27966\xd74 DataFrame\n\u2502 Row   \u2502 sample_1 \u2502 sample_2 \u2502 n_loci \u2502 Ritland    \u2502\n\u2502       \u2502 String   \u2502 String   \u2502 Int64  \u2502 Float64?   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1     \u2502 N215     \u2502 N216     \u2502 8      \u2502 0.258824   \u2502\n\u2502 2     \u2502 N215     \u2502 N217     \u2502 8      \u2502 0.193238   \u2502\n\u2502 3     \u2502 N215     \u2502 N218     \u2502 8      \u2502 0.127497   \u2502\n\u22ee\n\u2502 27964 \u2502 N281     \u2502 N289     \u2502 8      \u2502 0.0892068  \u2502\n\u2502 27965 \u2502 N281     \u2502 N290     \u2502 7      \u2502 0.104614   \u2502\n\u2502 27966 \u2502 N289     \u2502 N290     \u2502 7      \u2502 0.0511663  \u2502\n\njulia> relatedness(cats, ["N7", "N111", "N115"], method = [Ritland, Wang])\n3\xd75 DataFrame\n\u2502 Row \u2502 sample_1 \u2502 sample_2 \u2502 n_loci \u2502 Ritland    \u2502 Wang      \u2502\n\u2502     \u2502 String   \u2502 String   \u2502 Int64  \u2502 Float64?   \u2502 Float64?  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 N7       \u2502 N111     \u2502 9      \u2502 -0.129432  \u2502 -0.395806 \u2502\n\u2502 2   \u2502 N7       \u2502 N115     \u2502 9      \u2502 -0.0183925 \u2502 0.0024775 \u2502\n\u2502 3   \u2502 N111     \u2502 N115     \u2502 9      \u2502 0.0240152  \u2502 0.183966  \u2502\n\njulia> relatedness(cats, ["N7", "N111", "N115"], method = [Loiselle, Moran], iterations = 100, interval = (0.025, 0.975))\n3\xd713 DataFrame. Omitted printing of 7 columns\n\u2502 Row \u2502 sample_1 \u2502 sample_2 \u2502 n_loci \u2502 Loiselle   \u2502 Loiselle_mean \u2502 Loiselle_median \u2502\n\u2502     \u2502 String   \u2502 String   \u2502 Int64  \u2502 Float64?   \u2502 Float64?      \u2502 Float64?        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 N7       \u2502 N111     \u2502 9      \u2502 -0.101618  \u2502 0.0141364     \u2502 0.00703954      \u2502\n\u2502 2   \u2502 N7       \u2502 N115     \u2502 9      \u2502 -0.0428898 \u2502 0.0743497     \u2502 0.0798708       \u2502\n\u2502 3   \u2502 N111     \u2502 N115     \u2502 9      \u2502 0.13681    \u2502 0.266043      \u2502 0.257748        \u2502\n\njulia> DataFrames.names(ans)\n13-element Array{String,1}:\n "sample_1"\n "sample_2"\n "n_loci"\n "Loiselle"\n "Loiselle_mean"\n "Loiselle_median"\n "Loiselle_SE"\n "Loiselle_CI_95"\n "Moran"\n "Moran_mean"\n "Moran_median"\n "Moran_SE"\n "Moran_CI_95"\n')),(0,l.kt)("h3",{id:"-merge_relatedness"},"\ud83d\udd35 merge_relatedness"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"merge_relatedness(data::NamedTuple)\n")),(0,l.kt)("p",null,"A convenience function that takes the ",(0,l.kt)("inlineCode",{parentName:"p"},"NamedTuple")," output from ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness")," performed with bootstrapping\nand returns one large DataFrame."))}u.isMDXComponent=!0}}]);