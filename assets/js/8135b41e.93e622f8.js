"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[4567],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return f}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),s=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=s(a),m=o,f=u["".concat(i,".").concat(m)]||u[m]||c[m]||r;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[u]="string"==typeof e?e:o,l[1]=p;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2120:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return u}});var n=a(7462),o=a(3366),r=(a(7294),a(3905)),l=["components"],p={id:"types",title:"PopData.jl",sidebar_label:"PopData.jl"},i=void 0,s={unversionedId:"api/PopGenCore/types",id:"api/PopGenCore/types",title:"PopData.jl",description:"PopGenCore.jl/src/PopData.jl",source:"@site/docs/api/PopGenCore/Types.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/types",permalink:"/PopGen.jl/docs/api/PopGenCore/types",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/Types.md",tags:[],version:"current",lastUpdatedAt:1653415002,formattedLastUpdatedAt:"May 24, 2022",frontMatter:{id:"types",title:"PopData.jl",sidebar_label:"PopData.jl"},sidebar:"docs",previous:{title:"Structure.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/structure"},next:{title:"VariantCall.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/variantcall"}},d={},u=[{value:"PopGenCore.jl/src/PopData.jl",id:"popgencorejlsrcpopdatajl",level:2},{value:"\ud83d\udfea\ud83d\udd35 PopObj",id:"-popobj",level:3},{value:"\ud83d\udfea\ud83d\udd35 PopDataInfo",id:"-popdatainfo",level:3},{value:"\ud83d\udfea\ud83d\udd35 PopData",id:"-popdata",level:3},{value:"\ud83d\udfea\ud83d\udd35 PopDataInfo!",id:"-popdatainfo-1",level:3},{value:"\ud83d\udfea\ud83d\udd35 Genotype",id:"-genotype",level:3},{value:"\ud83d\udfea\ud83d\udd35 SNP",id:"-snp",level:3},{value:"\ud83d\udce6 _SNP",id:"-_snp",level:3},{value:"\ud83d\udfea\ud83d\udd35 MSat",id:"-msat",level:3},{value:"\ud83d\udce6 _MSat",id:"-_msat",level:3},{value:"\ud83d\udfea\ud83d\udd35 GenoArray",id:"-genoarray",level:3},{value:"\ud83d\udce6 _ploidy2text",id:"-_ploidy2text",level:3},{value:"\ud83d\udfea\ud83d\udd35 Base.show",id:"-baseshow",level:3},{value:"\ud83d\udfea\ud83d\udd35 Base.getindex",id:"-basegetindex",level:3},{value:"\ud83d\udfea\ud83d\udd35 Base.getproperty",id:"-basegetproperty",level:3}],c={toc:u},m="wrapper";function f(e){var t=e.components,a=(0,o.Z)(e,l);return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"popgencorejlsrcpopdatajl"},"PopGenCore.jl/src/PopData.jl"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udfea  exported by PopGenCore.jl"),(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,r.kt)("h3",{id:"-popobj"},"\ud83d\udfea\ud83d\udd35 PopObj"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Julia"},"PopObj::AbstractType\n")),(0,r.kt)("p",null,"Generic AbstractType for use in PopGen.jl"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-popdatainfo"},"\ud83d\udfea\ud83d\udd35 PopDataInfo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mutable struct PopDataInfo\n    samples::Int64\n    sampeinfo::DataFrame\n    loci::Int64\n    locusinfo::DataFrame\n    populations::Int64\n    ploidy::Union{Int8, Vector{Int8}}\n    biallelic::Bool\nend\n")),(0,r.kt)("p",null,"The data struct used internally as ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData.metadata")," fields to store basic information\nabout the ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," for easy access."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"PopDataInfo(genodf::DataFrame)\n")),(0,r.kt)("p",null,"constructor format using just the genodata dataframe"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-popdata"},"\ud83d\udfea\ud83d\udd35 PopData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"PopData\n    metadata::PopDataInfo\n    genodata::DataFrame\n")),(0,r.kt)("p",null,"The data struct used for the PopGen population genetics ecosystem. You are\n",(0,r.kt)("strong",{parentName:"p"},"strongly")," discouraged from manually creating tables to pass into a PopData,\nand instead should use the provided file importers and utilities."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- `metadata` PopDataInfo of  data information\n    - `samples` - the number of samples in the data\n    - `sampleinfo` - DataFrame of sample names,populations, ploidy, etc.\n    - `loci` - the number of loci in the data\n    - `locusinfo` - DataFrame of locus names, chromosome, physical position, etc.\n    - `populations` - the number of populations in the data\n    - `ploidy` - the ploidy (or ploidies) present in the data\n    - `biallelic` - if all the markers are biallelic\n- `genodata` DataFrame of sample genotype records\n    - `name` - the individual/sample names [`PooledArray`]\n    - `population` - population names [`PooledArray`]\n    - `locus` - locus names [`PooledArray`]\n    - `genotype` - genotype values [`NTuple{N,Signed}`]\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PopData(data::DataFrame)"),"\nContructor using just a ",(0,r.kt)("inlineCode",{parentName:"p"},"genodata")," dataframe."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-popdatainfo-1"},"\ud83d\udfea\ud83d\udd35 PopDataInfo!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"PopDataInfo!(data::PopData)\n")),(0,r.kt)("p",null,"This method is used to update PopDataInfo from PopData, all in one swoop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"PopDataInfo!(popdatainfo::PopDataInfo, genodata::DataFrame)\n")),(0,r.kt)("p",null,"Method to update preexisting PopDataInfo with new genodata, useful for getindex and creating new PopData from that"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-genotype"},"\ud83d\udfea\ud83d\udd35 Genotype"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"Genotype::DataType\n")),(0,r.kt)("p",null,"For convenience purposes, an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"NTuple{N, <:Signed} where N"),", which is\nthe type describing individual genotypes in PopData. Specifically, there exist\n",(0,r.kt)("inlineCode",{parentName:"p"},"SNP")," as an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"NTuple{N, Int8}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MSat")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"NTuple{N, Int16}")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-snp"},"\ud83d\udfea\ud83d\udd35 SNP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"SNP::DataType\n")),(0,r.kt)("p",null,"An alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"NTuple{N, Int8}")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_snp"},"\ud83d\udce6 _SNP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"SNP(geno)\n")),(0,r.kt)("p",null,"Contstructor for ",(0,r.kt)("inlineCode",{parentName:"p"},"SNP")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-msat"},"\ud83d\udfea\ud83d\udd35 MSat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"MSat::DataType\n")),(0,r.kt)("p",null,"An alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"NTuple{N, Int16}")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_msat"},"\ud83d\udce6 _MSat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"_MSat(geno)\n")),(0,r.kt)("p",null,"Constructor for ",(0,r.kt)("inlineCode",{parentName:"p"},"MSat")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-genoarray"},"\ud83d\udfea\ud83d\udd35 GenoArray"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"GenoArray::DataType\n")),(0,r.kt)("p",null,"An alias for an ",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractVector")," of elements ",(0,r.kt)("inlineCode",{parentName:"p"},"Missing"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"Genotype"),", which itself is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"NTuple{N, <:Integer} where N"),".\nThe definition as an ",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractVector")," adds flexibility for ",(0,r.kt)("inlineCode",{parentName:"p"},"SubArray"),"\ncases."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_ploidy2text"},"\ud83d\udce6 _ploidy2text"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"_ploidy2text(ploidy::Int8)\n_ploidy2text(ploidy::Vector{Int8})\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-baseshow"},"\ud83d\udfea\ud83d\udd35 Base.show"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"Base.show(io::IO, data::PopData)\nBase.show(io::IO, data::PopDataInfo)\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-basegetindex"},"\ud83d\udfea\ud83d\udd35 Base.getindex"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"Base.getindex(data::PopData, idx::Symbol)\nBase.getindex(data::PopData, args)\nBase.getindex(data::PopData, expression, cols)\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-basegetproperty"},"\ud83d\udfea\ud83d\udd35 Base.getproperty"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"getproperty(data::PopData, field::Symbol)\n")),(0,r.kt)("p",null,"A convenience method to access certain elements in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," with fewer keystrokes.\nEssentially a standard ",(0,r.kt)("inlineCode",{parentName:"p"},"getproperty")," call, except ",(0,r.kt)("inlineCode",{parentName:"p"},"sampleinfo")," accesses ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata.sampleinfo"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"locusinfo")," accesses ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata.locusinfo"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"info")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"cats = @nancycats ;\ncats.metadata == cats.info\ncats.metadata.sampleinfo == cats.sampleinfo\ncats.metadata.locusinfo == cats.locusinfo\n")))}f.isMDXComponent=!0}}]);