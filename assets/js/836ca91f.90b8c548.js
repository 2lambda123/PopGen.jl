"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[7058],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),s=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(o.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,c=d["".concat(o,".").concat(m)]||d[m]||f[m]||l;return t?i.createElement(c,r(r({ref:n},u),{},{components:t})):i.createElement(c,r({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,r[1]=p;for(var s=2;s<l;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},498:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return s},assets:function(){return u},toc:function(){return f},default:function(){return m}});var i=t(7462),a=t(3366),l=(t(7294),t(3905)),r=["components"],p={id:"popgensims_sibship",title:"Sibship.jl",sidebar_label:"Sibship.jl"},o=void 0,s={unversionedId:"api/PopGenSims/popgensims_sibship",id:"api/PopGenSims/popgensims_sibship",title:"Sibship.jl",description:"PopGenSims.jl/src/Sibship.jl",source:"@site/docs/api/PopGenSims/Sibship.md",sourceDirName:"api/PopGenSims",slug:"/api/PopGenSims/popgensims_sibship",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_sibship",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenSims/Sibship.md",tags:[],version:"current",lastUpdatedAt:1636029729,formattedLastUpdatedAt:"11/4/2021",frontMatter:{id:"popgensims_sibship",title:"Sibship.jl",sidebar_label:"Sibship.jl"},sidebar:"docs",previous:{title:"Samples.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_samples"},next:{title:"Utils.jl",permalink:"/PopGen.jl/docs/api/PopGenSims/popgensims_utils"}},u={},f=[{value:"\ud83d\udce6 _cross",id:"-_cross",level:3},{value:"\ud83d\udce6 _parentoffspring",id:"-_parentoffspring",level:3},{value:"\ud83d\udce6 fullsib",id:"-fullsib",level:3},{value:"\ud83d\udce6 halfsib",id:"-halfsib",level:3},{value:"\ud83d\udce6 unrelated",id:"-unrelated",level:3},{value:"\ud83d\udfea simulate_sibship",id:"-simulate_sibship",level:3},{value:"Relationship",id:"relationship",level:4}],d={toc:f};function m(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"PopGenSims.jl/src/Sibship.jl\n\ud83d\udce6  => not exported |\n\ud83d\udfea => exported by PopGenSims.jl"),(0,l.kt)("h3",{id:"-_cross"},"\ud83d\udce6 _cross"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"_cross(parent1::Vector{Vector{T}}, parent2::Vector{Vector{T}}) where T <: Signed\n")),(0,l.kt)("p",null,"Simulate a mating cross between two parents, generating one offspring with the same\nploidy as ",(0,l.kt)("inlineCode",{parentName:"p"},"parent1"),". This variant of ",(0,l.kt)("inlineCode",{parentName:"p"},"cross")," is used internally for ",(0,l.kt)("inlineCode",{parentName:"p"},"simulate_sibship"),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-_parentoffspring"},"\ud83d\udce6 _parentoffspring"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"parentoffspring(data::PopData; n::Int, ploidy::Int)\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-fullsib"},"\ud83d\udce6 fullsib"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"fullsib(data::PopData; n::Int, ploidy::Int)\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-halfsib"},"\ud83d\udce6 halfsib"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"halfsib(data::PopData; n::Int, ploidy::Int)\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-unrelated"},"\ud83d\udce6 unrelated"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"unrelated(data::PopData; n::Int, ploidy::Int)\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-simulate_sibship"},"\ud83d\udfea simulate_sibship"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulate_sibship(data::PopData; fullsib::Int, halfsib::Int, unrelated::Int, parentoffspring::Int, ploidy::Signed)\n")),(0,l.kt)("p",null,"Simulate mating crosses to generate sample pairs with any combination of the specified relationships,\nreturning a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object. The simulations will first generate parents of a given\n",(0,l.kt)("inlineCode",{parentName:"p"},"ploidy")," (inferred or specified) by drawing alleles from a global allele pool derived\nfrom the given ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," (i.e. weighted by their frequencies)."),(0,l.kt)("h4",{id:"relationship"},"Relationship"),(0,l.kt)("p",null,"Simulated parents will be crossed to generate offspring depending on the relationship:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fullsib")," : 2 parents generate 2 full-sibling offspring, return 2 offspring"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"halfsib")," : 3 parents generate 2 half-sibling offspring, returns 2 offspring"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"unrelated")," : returns 2 randomly generated individuals from the global allele pools"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parentoffspring")," : 2 parents generate 1 offspring, returns 1 offspring and 1 parent")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Identifying pairs")),(0,l.kt)("p",null,"The relationship between the newly generated samples can be identified by:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Sample ",(0,l.kt)("inlineCode",{parentName:"li"},"name"),"s will specify their simulation number, relationship, and whether parent or offspring",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Naming convention: ","[simulation #]",(0,l.kt)("em",{parentName:"li"},"[relationship]"),"[offspring #]"),(0,l.kt)("li",{parentName:"ul"},"example: sim005",(0,l.kt)("em",{parentName:"li"},"fullsib_1 = ","[simulation 005]"),"[full sibling]","_","[offspring 1]"))),(0,l.kt)("li",{parentName:"ul"},"Their ",(0,l.kt)("inlineCode",{parentName:"li"},"population"),' name will be that of their relationship (e.g. "fullsib")')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Ploidy")),(0,l.kt)("p",null,"If the samples in your ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," are of a single ploidy, then ",(0,l.kt)("inlineCode",{parentName:"p"},"ploidy = 0")," (the default) will infer the ploidy\nand generate parents and offspring according to the ploidy of your data. If you have mixed-ploidy data or wish\nto generate parents and offspring of a ploidy different than the source ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," you can specify the ploidy\nwith which to simulate parents and offspring. For example, if your ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," is diploid, but you wish to generate\ntriploid or octoploid parents and offspring, you would specify ",(0,l.kt)("inlineCode",{parentName:"p"},"ploidy = 3")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ploidy = 8")," repectively. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Odd ploidy")),(0,l.kt)("p",null,"If trying to create offspring with an odd ploidy (3,5, etc.), each parent has a 50% chance of\ncontributing (\xbd \xd7 ploidy) + 1 alleles for all loci to the offspring. In other words, if ploidy = 3,\nthere's a 50% chance parent_1 will give 2 alleles for every locus for that simulated cross."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"julia> cats = @nanycats ;\n\njulia> cat_sims = simulate_sibship(cats, fullsib = 10, halfsib = 50)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 120\n  Populations: 2\n\njulia> cat_sims.sampleinfo\n120\xd73 DataFrame\n Row \u2502 name             population  ploidy \n     \u2502 String           String      Int64  \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 sim01_fullsib_1  fullsib          2\n   2 \u2502 sim01_fullsib_2  fullsib          2\n   3 \u2502 sim02_fullsib_1  fullsib          2\n   4 \u2502 sim02_fullsib_2  fullsib          2\n   5 \u2502 sim03_fullsib_1  fullsib          2\n   6 \u2502 sim03_fullsib_2  fullsib          2\n  \u22ee  \u2502        \u22ee             \u22ee         \u22ee\n 115 \u2502 sim48_halfsib_1  halfsib          2\n 116 \u2502 sim48_halfsib_2  halfsib          2\n 117 \u2502 sim49_halfsib_1  halfsib          2\n 118 \u2502 sim49_halfsib_2  halfsib          2\n 119 \u2502 sim50_halfsib_1  halfsib          2\n 120 \u2502 sim50_halfsib_2  halfsib          2\n                           108 rows omitted\n")))}m.isMDXComponent=!0}}]);