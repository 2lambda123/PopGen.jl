"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[9969],{4137:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,k=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(k,o(o({ref:n},u),{},{components:t})):r.createElement(k,o({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[d]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3714:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(4137)),o=["components"],p={id:"iterators",title:"Iterators.jl",sidebar_label:"Iterators.jl"},l=void 0,s={unversionedId:"api/PopGenCore/iterators",id:"api/PopGenCore/iterators",title:"Iterators.jl",description:"PopGenCore.jl/src/Iterators.jl",source:"@site/docs/api/PopGenCore/Iterators.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/iterators",permalink:"/PopGen.jl/docs/api/PopGenCore/iterators",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/Iterators.md",tags:[],version:"current",lastUpdatedAt:1653415002,formattedLastUpdatedAt:"May 24, 2022",frontMatter:{id:"iterators",title:"Iterators.jl",sidebar_label:"Iterators.jl"},sidebar:"docs",previous:{title:"ioUtils.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/ioutils"},next:{title:"Manipulate.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/manipulate"}},u={},d=[{value:"PopGenCore.jl/src/Iterators.jl",id:"popgencorejlsrciteratorsjl",level:2},{value:"\ud83d\udfea partitionarray",id:"-partitionarray",level:3},{value:"\ud83d\udfea\ud83d\udd35 pairwisepairs",id:"-pairwisepairs",level:3},{value:"\ud83d\udfea simpairs",id:"-simpairs",level:3},{value:"\ud83d\udfea skipinf",id:"-skipinf",level:3},{value:"\ud83d\udfea skipnan",id:"-skipnan",level:3},{value:"\ud83d\udfea skipinfnan",id:"-skipinfnan",level:3}],c={toc:d},m="wrapper";function k(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"popgencorejlsrciteratorsjl"},"PopGenCore.jl/src/Iterators.jl"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,i.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udfea  exported by PopGenCore.jl"),(0,i.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,i.kt)("h3",{id:"-partitionarray"},"\ud83d\udfea partitionarray"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-juia"},"partitionarray(array::AbstractArray, steps::AbstractVector{<:Integer})\n")),(0,i.kt)("p",null,"Like ",(0,i.kt)("inlineCode",{parentName:"p"},"Base.Iterators.Partition"),", except you can apply arbitrary sizes to\npartition the array by. The ",(0,i.kt)("inlineCode",{parentName:"p"},"steps")," must add up to the total row length\nof the array."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"julia> partitionarray(rand(20,5), [10,3,4,3]) .|> size\n[(10, 5), (3, 5), (4, 5), (3, 5)]\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-pairwisepairs"},"\ud83d\udfea\ud83d\udd35 pairwisepairs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"pairwisepairs(smp_names::Vector{T}) where T\n")),(0,i.kt)("p",null,"Given a vector, returns a lazy iterator of tuples of unique all x\nall combinations of element pairs, excluding self-comparisons."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'julia> colors = ["red_1", "red_2", "blue_1", "blue_2"] ;\njulia> pairwisepairs(colors) |> collect\n6-element Array{Tuple{String,String},1}:\n ("red_1", "red_2")\n ("red_1", "blue_1")\n ("red_1", "blue_2")\n ("red_2", "blue_1")\n ("red_2", "blue_2")\n ("blue_1", "blue_2")\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-simpairs"},"\ud83d\udfea simpairs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"simpairs(data::Vector{String})\n")),(0,i.kt)("p",null,"Takes a Vector of sample names and returns a Tuple of sample pairs, grouped by simulation\nnumber. This is an internal function used for isolating sibship pairs from simulated shipship\npairs (via ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGenSims.jl"),") to perform ",(0,i.kt)("inlineCode",{parentName:"p"},"relatedness")," estimates only on those pairs.\n",(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'julia> a = ["sim1_off1", "sim1_off2", "sim2_off1", "sim2_off2"] ;\njulia> simpairs(a)\n("sim1_off1", "sim1_off2")\n("sim2_off1", "sim2_off2")\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-skipinf"},"\ud83d\udfea skipinf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"skipinf(itr)\n")),(0,i.kt)("p",null,"Return an iterator over the elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"itr")," skipping ",(0,i.kt)("inlineCode",{parentName:"p"},"Inf")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"-Inf")," values. The returned\nobject can be indexed using indices of itr if the latter is indexable. Indices\ncorresponding to ",(0,i.kt)("inlineCode",{parentName:"p"},"Inf")," values are not valid: they are skipped by keys and eachindex,",(0,i.kt)("br",{parentName:"p"}),"\n","and a MissingException is thrown when trying to use them. This is effectively ",(0,i.kt)("inlineCode",{parentName:"p"},"skipmissing"),"\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"Inf")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"-Inf")," values.\nUse collect to obtain an ",(0,i.kt)("inlineCode",{parentName:"p"},"Array")," containing the non-",(0,i.kt)("inlineCode",{parentName:"p"},"Inf")," values in ",(0,i.kt)("inlineCode",{parentName:"p"},"itr"),". Note that even",(0,i.kt)("br",{parentName:"p"}),"\n","if ",(0,i.kt)("inlineCode",{parentName:"p"},"itr")," is a multidimensional array, the result will always be a ",(0,i.kt)("inlineCode",{parentName:"p"},"Vector")," since it is not",(0,i.kt)("br",{parentName:"p"}),"\n","possible to remove ",(0,i.kt)("inlineCode",{parentName:"p"},"Inf"),"s while preserving dimensions of the input."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-skipnan"},"\ud83d\udfea skipnan"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"skipnan(itr)\n")),(0,i.kt)("p",null,"Return an iterator over the elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"itr")," skipping ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN")," values. The returned\nobject can be indexed using indices of itr if the latter is indexable. Indices\ncorresponding to ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN")," values are not valid: they are skipped by keys and eachindex,",(0,i.kt)("br",{parentName:"p"}),"\n","and a MissingException is thrown when trying to use them. This is effectively ",(0,i.kt)("inlineCode",{parentName:"p"},"skipmissing"),"\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN")," values.\nUse collect to obtain an ",(0,i.kt)("inlineCode",{parentName:"p"},"Array")," containing the non-",(0,i.kt)("inlineCode",{parentName:"p"},"NaN")," values in ",(0,i.kt)("inlineCode",{parentName:"p"},"itr"),". Note that even",(0,i.kt)("br",{parentName:"p"}),"\n","if ",(0,i.kt)("inlineCode",{parentName:"p"},"itr")," is a multidimensional array, the result will always be a ",(0,i.kt)("inlineCode",{parentName:"p"},"Vector")," since it is not",(0,i.kt)("br",{parentName:"p"}),"\n","possible to remove ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN"),"s while preserving dimensions of the input."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-skipinfnan"},"\ud83d\udfea skipinfnan"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"skipinfnan(itr)\n")),(0,i.kt)("p",null,"Return an iterator over the elements in ",(0,i.kt)("inlineCode",{parentName:"p"},"itr")," skipping ",(0,i.kt)("inlineCode",{parentName:"p"},"NaN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Inf")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"-Inf")," values.\nSee the docstrings of ",(0,i.kt)("inlineCode",{parentName:"p"},"skipinf")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"skipnan")," more details."))}k.isMDXComponent=!0}}]);