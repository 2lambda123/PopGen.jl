"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[5393],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return s}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=d(n),s=a,u=f["".concat(p,".").concat(s)]||f[s]||m[s]||i;return n?r.createElement(u,o(o({ref:t},c),{},{components:n})):r.createElement(u,o({ref:t},c))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9594:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return c},default:function(){return f}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"writingdata",title:"Writing data to file",sidebar_label:"Writing data"},p=void 0,d={unversionedId:"io/writingdata",id:"io/writingdata",isDocsHomePage:!1,title:"Writing data to file",description:"To complement PopGen.read(), PopGen.jl offers PopGen.write(),",source:"@site/docs/io/writingdata.md",sourceDirName:"io",slug:"/io/writingdata",permalink:"/PopGen.jl/docs/io/writingdata",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/io/writingdata.md",tags:[],version:"current",lastUpdatedAt:1635451805,formattedLastUpdatedAt:"10/28/2021",frontMatter:{id:"writingdata",title:"Writing data to file",sidebar_label:"Writing data"},sidebar:"docs",previous:{title:"Reading data",permalink:"/PopGen.jl/docs/io/readingdata"},next:{title:"Delimited",permalink:"/PopGen.jl/docs/io/delimited"}},c=[],m={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"PopGen.write(data::PopData; filename::String, kwargs...)\n")),(0,i.kt)("p",null,"To complement ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGen.read()"),", PopGen.jl offers ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGen.write()"),",\nwhich writes ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," to different file formats. Like the file\nreader, ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGen.write()")," will infer the correct output file type\nfrom the output filename's extensions. Given the ubiquity of the\nfunction name, it is not exported. If using PopGenCore.jl directly,\nyou will need to call it with ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGenCore.write"),".\nPopGen.jl supports writing to these file formats:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"File Format"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Extensions"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Docstring"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"genepop"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},".gen"),", ",(0,i.kt)("inlineCode",{parentName:"td"},".genepop")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"?genepop"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"delimited"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},".csv"),", ",(0,i.kt)("inlineCode",{parentName:"td"},".txt"),", ",(0,i.kt)("inlineCode",{parentName:"td"},".tsv")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"?delimited"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Structure/fastStructure"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},".str"),", ",(0,i.kt)("inlineCode",{parentName:"td"},".structure")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"?structure"))))),(0,i.kt)("p",null,"Additional keyword arguments ",(0,i.kt)("inlineCode",{parentName:"p"},"kwargs...")," are specific to the intended file type, and are listed in the docstrings of the specific file writer with the format ",(0,i.kt)("inlineCode",{parentName:"p"},"?filetype")," like shown above. For example, to find the appropriate keywords for a conversion to Genepop format, call up the docstring to ",(0,i.kt)("inlineCode",{parentName:"p"},"genepop")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"?genepop"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Examples ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats;\nfewer_cats = omit(cats, names = samples(cats)[1:10]);\nPopGen.write(fewer_cats, filename = "filtered_nancycats.gen", digits = 3, format = "horizontal")\nPopGen.write(fewer_cats, filename = "filtered_nancycats.txt", digits = 4, format = "tidy", delim = ",")\n')))}f.isMDXComponent=!0}}]);