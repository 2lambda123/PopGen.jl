"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[5958],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7442:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},assets:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"permutations",title:"Permutations.jl",sidebar_label:"Permutations.jl"},p=void 0,s={unversionedId:"api/PopGenCore/permutations",id:"api/PopGenCore/permutations",title:"Permutations.jl",description:"PopGenCore.jl/src/Permutations.jl",source:"@site/docs/api/PopGenCore/Permutations.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/permutations",permalink:"/PopGen.jl/docs/api/PopGenCore/permutations",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/Permutations.md",tags:[],version:"current",lastUpdatedAt:1636029729,formattedLastUpdatedAt:"11/4/2021",frontMatter:{id:"permutations",title:"Permutations.jl",sidebar_label:"Permutations.jl"},sidebar:"docs",previous:{title:"MissingUtils.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/missingutils"},next:{title:"PopDataWrappers.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/popdatawrappers"}},u={},c=[{value:"PopGenCore.jl/src/Permutations.jl",id:"popgencorejlsrcpermutationsjl",level:2},{value:"\ud83d\udfea permuteloci!",id:"-permuteloci",level:3},{value:"\ud83d\udfea permutesamples!",id:"-permutesamples",level:3},{value:"\ud83d\udfea permutegenotypes!",id:"-permutegenotypes",level:3},{value:"\ud83d\udfea permutealleles!",id:"-permutealleles",level:3},{value:"\ud83d\udfea strictshuffle",id:"-strictshuffle",level:3},{value:"\ud83d\udfea strictshuffle!",id:"-strictshuffle-1",level:3}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"popgencorejlsrcpermutationsjl"},"PopGenCore.jl/src/Permutations.jl"),(0,o.kt)("p",null,"\ud83d\udce6  => not exported |\n\ud83d\udfea => exported by PopGenCore.jl |\n\ud83d\udd35 => exported by PopGen.jl"),(0,o.kt)("h3",{id:"-permuteloci"},"\ud83d\udfea permuteloci!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"permuteloci!(data::PopData)\n")),(0,o.kt)("p",null,"Edits ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData")," in place with loci permuted across populations within\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},".genodata")," dataframe."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-permutesamples"},"\ud83d\udfea permutesamples!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"permutesamples!(data::PopData; meta::Bool = false)\n")),(0,o.kt)("p",null,"Edits ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData")," in place with samples permuted across populations within\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},".genodata")," dataframe. Since performance is important for many permutations,\nthe default is to only edit the ",(0,o.kt)("inlineCode",{parentName:"p"},".genodata")," table in place; use ",(0,o.kt)("inlineCode",{parentName:"p"},"meta = true"),"\nif you also require the ",(0,o.kt)("inlineCode",{parentName:"p"},".sampleinfo")," dataframe edited in place."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-permutegenotypes"},"\ud83d\udfea permutegenotypes!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'permutegenotypes!(data::PopData; by::String = "locus")\n')),(0,o.kt)("p",null,"Edits ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData")," in place with genotypes permuted across individuals within\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},".genodata")," dataframe. Use ",(0,o.kt)("inlineCode",{parentName:"p"},'by = "population"')," (or ",(0,o.kt)("inlineCode",{parentName:"p"},'"pop"'),") to permute genotypes\nwithin populations."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-permutealleles"},"\ud83d\udfea permutealleles!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'permutealleles!(data::PopData; ploidy::Union{Nothing, Int} = nothing, by::String = "locus")\n')),(0,o.kt)("p",null,"Edits ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData")," in place with alleles permuted and reconstructed into genotypes\nfor each locus within the ",(0,o.kt)("inlineCode",{parentName:"p"},".genodata")," dataframe. Use ",(0,o.kt)("inlineCode",{parentName:"p"},'by = "population"')," (or ",(0,o.kt)("inlineCode",{parentName:"p"},'"pop"'),")\nto permute alleles within populations. If ",(0,o.kt)("inlineCode",{parentName:"p"},"ploidy")," is not provided (default ",(0,o.kt)("inlineCode",{parentName:"p"},"ploidy = nothing"),"),\nthen ploidy will be identified from the PopData. If performance is important,\nit would be best to identify ploidy in advance and set it to a specific integer."),(0,o.kt)("h3",{id:"-strictshuffle"},"\ud83d\udfea strictshuffle"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"strictshuffle(x::T) where T <: AbstractArray\n")),(0,o.kt)("p",null,"Shuffle only the non-missing values of a Vector and return a copy of the vector,\nkeeping the ",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," values at their original locations.\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"strictshuffle!")," to edit in-place instead of returning a copy."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-strictshuffle-1"},"\ud83d\udfea strictshuffle!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"strictshuffle!(x::T) where T <: AbstractArray\n")),(0,o.kt)("p",null,"Shuffle only the non-missing values of a Vector, keeping the\n",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," values at their original locations. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"strictshuffle"),"\nto return a copy instead of editing in-place."))}d.isMDXComponent=!0}}]);