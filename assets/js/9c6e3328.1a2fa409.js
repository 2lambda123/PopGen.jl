"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[5993],{3905:function(e,a,n){n.d(a,{Zo:function(){return s},kt:function(){return f}});var t=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=t.createContext({}),c=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},s=function(e){var a=c(e.components);return t.createElement(p.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=l,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?t.createElement(f,o(o({ref:a},s),{},{components:n})):t.createElement(f,o({ref:a},s))}));function f(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8774:function(e,a,n){n.r(a),n.d(a,{assets:function(){return s},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var t=n(7462),l=n(3366),r=(n(7294),n(3905)),o=["components"],i={id:"dataexploration",title:"DataExploration.jl",sidebar_label:"DataExploration.jl"},p=void 0,c={unversionedId:"api/PopGen/dataexploration",id:"api/PopGen/dataexploration",title:"DataExploration.jl",description:"PopGen.jl/src/DataExplortation.jl",source:"@site/docs/api/PopGen/DataExploration.md",sourceDirName:"api/PopGen",slug:"/api/PopGen/dataexploration",permalink:"/PopGen.jl/docs/api/PopGen/dataexploration",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGen/DataExploration.md",tags:[],version:"current",lastUpdatedAt:1658766707,formattedLastUpdatedAt:"Jul 25, 2022",frontMatter:{id:"dataexploration",title:"DataExploration.jl",sidebar_label:"DataExploration.jl"},sidebar:"docs",previous:{title:"API (start here)",permalink:"/PopGen.jl/docs/api/"},next:{title:"FstByLocus.jl",permalink:"/PopGen.jl/docs/api/PopGen/fstbylocus"}},s={},u=[{value:"PopGen.jl/src/DataExplortation.jl",id:"popgenjlsrcdataexplortationjl",level:2},{value:"\ud83d\udd35 allelefreqtable",id:"-allelefreqtable",level:3},{value:"\ud83d\udd35 genofreqtable",id:"-genofreqtable",level:3},{value:"\ud83d\udd35 missingdata",id:"-missingdata",level:3},{value:"\ud83d\udce6 _missingdata",id:"-_missingdata",level:3},{value:"\ud83d\udd35 pairwiseidentical",id:"-pairwiseidentical",level:3}],d={toc:u},m="wrapper";function f(e){var a=e.components,n=(0,l.Z)(e,o);return(0,r.kt)(m,(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"popgenjlsrcdataexplortationjl"},"PopGen.jl/src/DataExplortation.jl"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,r.kt)("h3",{id:"-allelefreqtable"},"\ud83d\udd35 allelefreqtable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'allelefreqtable(data::PopData; by::String = "global")\n')),(0,r.kt)("p",null,"Return a table of the observed ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," (default) or ",(0,r.kt)("inlineCode",{parentName:"p"},"population")," allele frequencies in a PopData object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats ;\n\njulia> allelefreqtable(cats)\n108\xd74 DataFrame\n Row \u2502 locus   allele  count  frequency  \n     \u2502 String  Int16?  Int64  Float64    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8       135    105  0.241935\n   2 \u2502 fca8       143     44  0.101382\n   3 \u2502 fca8       133     33  0.0760369\n   4 \u2502 fca8       137     83  0.191244\n  \u22ee  \u2502   \u22ee       \u22ee       \u22ee        \u22ee\n 105 \u2502 fca37      226      2  0.00421941\n 106 \u2502 fca37      216      7  0.0147679\n 107 \u2502 fca37      224      2  0.00421941\n 108 \u2502 fca37      204      6  0.0126582\n                         100 rows omitted\n\njulia> allelefreqtable(cats, by = "population")\n839\xd75 DataFrame\n Row \u2502 locus   population  allele  count  frequency \n     \u2502 String  String      Int16?  Int64  Float64   \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8    1              135      9  0.5625\n   2 \u2502 fca8    1              143      4  0.25\n   3 \u2502 fca8    1              133      2  0.125\n   4 \u2502 fca8    1              137      1  0.0625\n  \u22ee  \u2502   \u22ee         \u22ee         \u22ee       \u22ee        \u22ee\n 836 \u2502 fca37   16             210      5  0.208333\n 837 \u2502 fca37   17             208     22  0.846154\n 838 \u2502 fca37   17             182      3  0.115385\n 839 \u2502 fca37   17             220      1  0.0384615\n                                    831 rows omitted\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-genofreqtable"},"\ud83d\udd35 genofreqtable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'genofreqtable(data::PopData; by::String = "global")\n')),(0,r.kt)("p",null,"Return a table of the observed ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," (default) or ",(0,r.kt)("inlineCode",{parentName:"p"},"population")," genotype frequencies in a PopData object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats ;\n\njulia> genofreqtable(cats)\n\n341\xd74 DataFrame\n Row \u2502 locus   genotype    count  frequency  \n     \u2502 String  Tuple\u2026      Int64  Float64    \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 fca8    (135, 143)     16  0.0737327\n   2 \u2502 fca8    (133, 135)      9  0.0414747\n   3 \u2502 fca8    (135, 135)     23  0.105991\n   4 \u2502 fca8    (137, 143)      8  0.0368664\n  \u22ee  \u2502   \u22ee         \u22ee         \u22ee        \u22ee\n 338 \u2502 fca37   (206, 220)      1  0.00421941\n 339 \u2502 fca37   (208, 218)      1  0.00421941\n 340 \u2502 fca37   (184, 184)      3  0.0126582\n 341 \u2502 fca37   (208, 210)      3  0.0126582\n                             333 rows omitted\n\njulia> genofreqtable(cats, by = "population")\n1094\xd75 DataFrame\n  Row \u2502 locus   population  genotype    count  frequency         \n      \u2502 String  String      Tuple\u2026      Int64  Float64           \n\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500        \n    1 \u2502 fca8    1           (135, 143)      3  0.375\n    2 \u2502 fca8    1           (133, 135)      2  0.25\n    3 \u2502 fca8    1           (135, 135)      2  0.25\n    4 \u2502 fca8    1           (137, 143)      1  0.125\n  \u22ee   \u2502   \u22ee         \u22ee           \u22ee         \u22ee        \u22ee\n 1091 \u2502 fca37   17          (208, 208)     10  0.769231\n 1092 \u2502 fca37   17          (182, 182)      1  0.0769231\n 1093 \u2502 fca37   17          (182, 208)      1  0.0769231\n 1094 \u2502 fca37   17          (208, 220)      1  0.0769231\n                                        1086 rows omitted \n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-missingdata"},"\ud83d\udd35 missingdata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'missingdata(data::PopData; by::Union{String, Symbol} = "sample")\n')),(0,r.kt)("p",null,"Get missing genotype information in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData"),". Specify a mode of operation\nto return a DataFrame corresponding with that missing information."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Modes")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"sample" - returns a count and list of missing loci per individual (default)'),(0,r.kt)("li",{parentName:"ul"},'"population" - returns a count of missing genotypes per population'),(0,r.kt)("li",{parentName:"ul"},'"locus" - returns a count of missing genotypes per locus'),(0,r.kt)("li",{parentName:"ul"},'"locusxpopulation" - returns a count of missing genotypes per locus per population')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'missingdata(@gulfsharks, by = "pop")\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-_missingdata"},"\ud83d\udce6 _missingdata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"_missingdata(data::PopData, ::Val{:sample})\n_missingdata(data::PopData, ::Val{:population})\n_missingdata(data::PopData, ::Val{:locus})\n_missingdata(data::PopData, ::Val{:locusxpopulation})\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-pairwiseidentical"},"\ud83d\udd35 pairwiseidentical"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"pairwiseidentical(data::PopData)\n")),(0,r.kt)("p",null,"Return a pairwise matrix of the percent of identical genotypes at each locus between all pairs of individuals."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"julia> cats = @nancycats ;\njulia> pairwiseidentical(cats)\n237\xd7237 Named Matrix{Float64}\nA \u2572 B \u2502     N215      N216  \u2026      N289      N290\n\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nN215  \u2502      1.0       0.5  \u2026  0.142857  0.166667\nN216  \u2502      0.5       1.0     0.142857  0.166667\nN217  \u2502     0.25     0.125        0.125  0.142857\nN218  \u2502    0.375      0.25         0.25  0.142857\nN219  \u2502    0.375     0.375         0.25  0.142857\n\u22ee              \u22ee         \u22ee  \u22f1         \u22ee         \u22ee\nN296  \u2502      0.5  0.333333          0.0       0.0\nN297  \u2502 0.166667  0.166667     0.428571  0.285714\nN281  \u2502 0.142857  0.142857         0.25  0.428571\nN289  \u2502 0.142857  0.142857          1.0  0.142857\nN290  \u2502 0.166667  0.166667  \u2026  0.142857       1.0\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"pairwiseidentical(data::PopData, sample_names::Vector{String})\n")),(0,r.kt)("p",null,"Return a pairwise matrix of the percent of identical genotypes at\neach nonmissing locus between all pairs of provided ",(0,r.kt)("inlineCode",{parentName:"p"},"sample_names"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'julia> cats = @nancycats ;\njulia> interesting_cats = samplenames(cats)[1:5]\n5-element Array{String,1}:\n "N215"\n "N216"\n "N217"\n "N218"\n "N219"\n \njulia> pairwiseidentical(cats, interesting_cats)\n5\xd75 Named Matrix{Float64}\nA \u2572 B \u2502     N217      N218      N219      N220      N221\n\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nN217  \u2502      1.0       0.0  0.111111  0.222222  0.111111\nN218  \u2502      0.0       1.0  0.333333  0.111111  0.444444\nN219  \u2502 0.111111  0.333333       1.0  0.111111  0.333333\nN220  \u2502 0.222222  0.111111  0.111111       1.0  0.222222\nN221  \u2502 0.111111  0.444444  0.333333  0.222222       1.0\n')))}f.isMDXComponent=!0}}]);