"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[3507],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),d=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(u.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,k=m["".concat(u,".").concat(c)]||m[c]||s[c]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},425:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(7294),r=n(6010),i={tabItem:"tabItem_Ymn6"};function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},3992:function(e,t,n){n.d(t,{Z:function(){return y}});var a=n(7462),r=n(7294),i=n(6010),l=n(2957),o=n(6550),u=n(5238),d=n(3609),p=n(2560);function m(e){return function(e){var t,n;return null!=(t=null==(n=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function s(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:m(n);return function(e){var t=(0,d.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function c(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function k(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,o.k6)(),l=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,u._X)(l),(0,r.useCallback)((function(e){if(l){var t=new URLSearchParams(i.location.search);t.set(l,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[l,i])]}function f(e){var t,n,a,i,l=e.defaultValue,o=e.queryString,u=void 0!==o&&o,d=e.groupId,m=s(e),f=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:l,tabValues:m})})),g=f[0],N=f[1],v=k({queryString:u,groupId:d}),b=v[0],h=v[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:d}.groupId),n=(0,p.Nk)(t),a=n[0],i=n[1],[a,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),w=y[0],C=y[1],E=function(){var e=null!=b?b:w;return c({value:e,tabValues:m})?e:null}();return(0,r.useLayoutEffect)((function(){E&&N(E)}),[E]),{selectedValue:g,selectValue:(0,r.useCallback)((function(e){if(!c({value:e,tabValues:m}))throw new Error("Can't select invalid tab value="+e);N(e),h(e),C(e)}),[h,C,m]),tabValues:m}}var g=n(1048),N={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){var t=e.className,n=e.block,o=e.selectedValue,u=e.selectValue,d=e.tabValues,p=[],m=(0,l.o5)().blockElementScrollPositionUntilNextRender,s=function(e){var t=e.currentTarget,n=p.indexOf(t),a=d[n].value;a!==o&&(m(t),u(a))},c=function(e){var t,n=null;switch(e.key){case"Enter":s(e);break;case"ArrowRight":var a,r=p.indexOf(e.currentTarget)+1;n=null!=(a=p[r])?a:p[0];break;case"ArrowLeft":var i,l=p.indexOf(e.currentTarget)-1;n=null!=(i=p[l])?i:p[p.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},d.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:function(e){return p.push(e)},onKeyDown:c,onClick:s},l,{className:(0,i.Z)("tabs__item",N.tabItem,null==l?void 0:l.className,{"tabs__item--active":o===t})}),null!=n?n:t)})))}function b(e){var t=e.lazy,n=e.children,a=e.selectedValue,i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var l=i.find((function(e){return e.props.value===a}));return l?(0,r.cloneElement)(l,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function h(e){var t=f(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",N.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function y(e){var t=(0,g.Z)();return r.createElement(h,(0,a.Z)({key:String(t)},e))}},112:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return d},metadata:function(){return m},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(4137)),l=n(3992),o=n(425),u=["components"],d={id:"delimited",title:"Delimited",sidebar_label:"Delimited"},p=void 0,m={unversionedId:"io/delimited",id:"io/delimited",title:"Delimited",description:"Import a delimited file as PopData",source:"@site/docs/io/delimited.md",sourceDirName:"io",slug:"/io/delimited",permalink:"/PopGen.jl/docs/io/delimited",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/io/delimited.md",tags:[],version:"current",lastUpdatedAt:1652451030,formattedLastUpdatedAt:"May 13, 2022",frontMatter:{id:"delimited",title:"Delimited",sidebar_label:"Delimited"},sidebar:"docs",previous:{title:"Baypass",permalink:"/PopGen.jl/docs/io/baypass"},next:{title:"Genepop",permalink:"/PopGen.jl/docs/io/genepop"}},s={},c=[{value:"Import a delimited file as <code>PopData</code>",id:"import-a-delimited-file-as-popdata",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Keyword Arguments",id:"keyword-arguments",level:3},{value:"Example",id:"example",level:3},{value:"Format",id:"format",level:3},{value:"Missing data",id:"missing-data",level:3},{value:"Genotypes",id:"genotypes",level:4},{value:"Location data",id:"location-data",level:4},{value:"Writing to a delimited file",id:"writing-to-a-delimited-file",level:2},{value:"Keyword Arguments",id:"keyword-arguments-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Acknowledgements",id:"acknowledgements",level:2}],k={toc:c},f="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,u);return(0,i.kt)(f,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"import-a-delimited-file-as-popdata"},"Import a delimited file as ",(0,i.kt)("inlineCode",{parentName:"h2"},"PopData")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"delimited(infile::String; kwargs...)\n")),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"infile::String")," : path to the input file, in quotes")),(0,i.kt)("h3",{id:"keyword-arguments"},"Keyword Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"delim::String")," : delimiter characters. The default (",(0,i.kt)("inlineCode",{parentName:"p"},'"auto"'),") uses auto-parsing of ",(0,i.kt)("inlineCode",{parentName:"p"},"CSV.File"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"digits::Integer")," : the number of digits used to denote an allele (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"diploid::Bool"),"  : whether samples are diploid for parsing optimizations (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"silent::Bool")," : whether to print file information during import (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),")"))),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'lizardsCA = delimited("CA_lizards.csv", digits = 3);\n')),(0,i.kt)("h3",{id:"format"},"Format"),(0,i.kt)("p",null,"First row is column names, and they occur in this order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"name"),(0,i.kt)("li",{parentName:"ol"},"population"),(0,i.kt)("li",{parentName:"ol"},"longitude"),(0,i.kt)("li",{parentName:"ol"},"latitude"),(0,i.kt)("li",{parentName:"ol"},"locus_1_name"),(0,i.kt)("li",{parentName:"ol"},"locus_2_name"),(0,i.kt)("li",{parentName:"ol"},"etc...")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Formatting example:")),(0,i.kt)(l.Z,{block:!0,defaultValue:"csv",values:[{label:"raw csv",value:"csv"},{label:"table view",value:"table"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"csv",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"name,population,longitude,latitude,Locus1,Locus2,Locus3\nsierra_01,mountain,11.11,-22.22,001001,-9,001001\nsierra_02,mountain,11.12,-22.21,001001,001001,001002\nsnbarb_01,coast,,,001001,001001,001002\nsnbarb_02,coast,11.14,-22.24,001001,001001,001001\nsnbarb_03,coast,11.15,,001002,001001,001001\n"))),(0,i.kt)(o.Z,{value:"table",mdxType:"TabItem"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"name"),(0,i.kt)("th",{parentName:"tr",align:"center"},"population"),(0,i.kt)("th",{parentName:"tr",align:"center"},"longitude"),(0,i.kt)("th",{parentName:"tr",align:"center"},"latitude"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Locus1"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Locus2"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Locus3"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"sierra_01"),(0,i.kt)("td",{parentName:"tr",align:"center"},"mountain"),(0,i.kt)("td",{parentName:"tr",align:"center"},"11.11"),(0,i.kt)("td",{parentName:"tr",align:"center"},"-22.22"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"-9"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"sierra_02"),(0,i.kt)("td",{parentName:"tr",align:"center"},"mountain"),(0,i.kt)("td",{parentName:"tr",align:"center"},"11.12"),(0,i.kt)("td",{parentName:"tr",align:"center"},"-22.21"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001002")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"snbarb_01"),(0,i.kt)("td",{parentName:"tr",align:"center"},"coast"),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001002")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"snbarb_02"),(0,i.kt)("td",{parentName:"tr",align:"center"},"coast"),(0,i.kt)("td",{parentName:"tr",align:"center"},"11.14"),(0,i.kt)("td",{parentName:"tr",align:"center"},"-22.24"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"snbarb_03"),(0,i.kt)("td",{parentName:"tr",align:"center"},"coast"),(0,i.kt)("td",{parentName:"tr",align:"center"},"11.15"),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:"center"},"001002"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001"),(0,i.kt)("td",{parentName:"tr",align:"center"},"001001")))))),(0,i.kt)("h3",{id:"missing-data"},"Missing data"),(0,i.kt)("h4",{id:"genotypes"},"Genotypes"),(0,i.kt)("p",null,"Missing genotypes can be formatted as all-zeros (ex.",(0,i.kt)("inlineCode",{parentName:"p"},"000000"),") or negative-nine ",(0,i.kt)("inlineCode",{parentName:"p"},"-9")),(0,i.kt)("h4",{id:"location-data"},"Location data"),(0,i.kt)("p",null,"If location data is missing for a sample (which is ok!), make sure the value is blank, otherwise there will be transcription errors! (example at line 3 in the example above)"),(0,i.kt)("admonition",{title:"alias",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You can also use the command ",(0,i.kt)("inlineCode",{parentName:"p"},"csv()")," synonymously with ",(0,i.kt)("inlineCode",{parentName:"p"},"delimited()"),". ")),(0,i.kt)("h2",{id:"writing-to-a-delimited-file"},"Writing to a delimited file"),(0,i.kt)("p",null,"All file writing options can be performed using ",(0,i.kt)("inlineCode",{parentName:"p"},"PopGen.write()"),", which calls ",(0,i.kt)("inlineCode",{parentName:"p"},"delimited")," when writing to a delimited file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'delimited(data::PopData; filename::String, delim::String = ",", digits::Integer = 3, format::String = "wide", miss::Int = 0)\n')),(0,i.kt)("p",null,"Write PopData to a text-delimited file. "),(0,i.kt)("h3",{id:"keyword-arguments-1"},"Keyword Arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filename::String"),": the output filename"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"digits::Integer")," : how many digits to format each allele (default: ",(0,i.kt)("inlineCode",{parentName:"li"},"3"),")",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"digits = 3")," will turn ",(0,i.kt)("inlineCode",{parentName:"li"},"(1, 2)")," into ",(0,i.kt)("inlineCode",{parentName:"li"},"001002")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"format::String"),": whether to output in",(0,i.kt)("inlineCode",{parentName:"li"},'"wide"')," or ",(0,i.kt)("inlineCode",{parentName:"li"},'"long"')," (aka ",(0,i.kt)("inlineCode",{parentName:"li"},'"tidy"'),") format ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"wide")," : the standard-format CSV for importing into PopGen.jl (default)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"long")," : the ",(0,i.kt)("inlineCode",{parentName:"li"},"loci")," table with ",(0,i.kt)("inlineCode",{parentName:"li"},"longitude")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"latitude")," columns added"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delim::String"),": delimiter to use for writing the file (default: ",(0,i.kt)("inlineCode",{parentName:"li"},'","'),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"miss::Integer"),": how you would like missing values written ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0")," : As a genotype represented as a number of zeroes equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"digits \xd7 ploidy")," like ",(0,i.kt)("inlineCode",{parentName:"li"},"000000")," (default) "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-9")," : As a single value ",(0,i.kt)("inlineCode",{parentName:"li"},"-9"))))),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats;\nfewer_cats = omit(cats, name = samplenames(cats)[1:10]);\ndelimited(fewer_cats, filename = "filtered_nancycats.gen", digits = 3, format = "wide", delim = " ")\n')),(0,i.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,i.kt)("p",null,"Thanks to the efforts of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaData/CSV.jl"},"CSV.jl")," team, we are able leverage that package to do much of the heavy lifting within this parser."))}g.isMDXComponent=!0}}]);