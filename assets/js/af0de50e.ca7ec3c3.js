"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[8759],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=i,k=c["".concat(p,".").concat(d)]||c[d]||s[d]||r;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5730:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return m},assets:function(){return u},toc:function(){return s},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"genepop",title:"Genepop.jl",sidebar_label:"Genepop.jl"},p=void 0,m={unversionedId:"api/PopGenCore/genepop",id:"api/PopGenCore/genepop",title:"Genepop.jl",description:"PopGenCore.jl/src/io/Genepop.jl",source:"@site/docs/api/PopGenCore/Genepop.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/genepop",permalink:"/PopGen.jl/docs/api/PopGenCore/genepop",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/Genepop.md",tags:[],version:"current",lastUpdatedAt:1636029729,formattedLastUpdatedAt:"11/4/2021",frontMatter:{id:"genepop",title:"Genepop.jl",sidebar_label:"Genepop.jl"},sidebar:"docs",previous:{title:"Delimited.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/delimited"},next:{title:"GeneralUtils.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/generalutils"}},u={},s=[{value:"PopGenCore.jl/src/io/Genepop.jl",id:"popgencorejlsrciogenepopjl",level:2},{value:"\ud83d\udfea genepop",id:"-genepop",level:3}],c={toc:s};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"popgencorejlsrciogenepopjl"},"PopGenCore.jl/src/io/Genepop.jl"),(0,r.kt)("p",null,"\ud83d\udce6  => not exported |\n\ud83d\udfea => exported by PopGenCore.jl |\n\ud83d\udd35 => exported by PopGen.jl"),(0,r.kt)("h3",{id:"-genepop"},"\ud83d\udfea genepop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"genepop(infile::String; kwargs...)\n")),(0,r.kt)("p",null,"Load a Genepop format file into memory as a PopData object."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"infile::String")," : path to Genepop file")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Keyword Arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"digits::Integer"),": number of digits denoting each allele (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"3"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"popsep::String")," : word that separates populations in ",(0,r.kt)("inlineCode",{parentName:"li"},"infile"),' (default: "POP")'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"diploid::Bool"),"  : whether samples are diploid for parsing optimizations (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"silent::Bool"),"   : whether to print file information during import (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"allow_monomorphic")," : whether to keep monomorphic loci in the dataset (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"File must follow standard Genepop formatting")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First line is a comment (and skipped)"),(0,r.kt)("li",{parentName:"ul"},"Loci are listed after first line as one-per-line without commas or in single comma-separated row"),(0,r.kt)("li",{parentName:"ul"},"A line with a particular keyword (default ",(0,r.kt)("inlineCode",{parentName:"li"},"POP"),") must delimit populations"),(0,r.kt)("li",{parentName:"ul"},"Sample name is immediately followed by a ",(0,r.kt)("em",{parentName:"li"},"comma")),(0,r.kt)("li",{parentName:"ul"},"File is ",(0,r.kt)("em",{parentName:"li"},"tab or space delimted")," (but not both!)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Genepop file example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"wasp_hive.gen: Wasp populations in New York \\n\nLocus1\nLocus2\nLocus3\npop\nOneida_01,  250230  564568  110100\nOneida_02,  252238  568558  100120\nOneida_03,  254230  564558  090100\npop\nNewcomb_01, 254230  564558  080100\nNewcomb_02, 000230  564558  090080\nNewcomb_03, 254230  000000  090100\nNewcomb_04, 254230  564000  090120\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'waspsNY = genepop("wasp_hive.gen", digits = 3, popsep = "pop")\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'genepop(data::PopData; filename::String = "output.gen", digits::Int = 3, format::String = "vertical")\n')),(0,r.kt)("p",null,"Writes a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object to a Genepop-formatted file"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),": the ",(0,r.kt)("inlineCode",{parentName:"li"},"PopData")," object you wish to convert to a Genepop file")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Keyword arguments")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filename"),": a ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," of the output filename"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"digits")," : an ",(0,r.kt)("inlineCode",{parentName:"li"},"Integer")," indicating how many digits to format each allele as (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"(1, 2)")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"001002")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"digits = 3"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"format")," : a ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," indicating whether loci should be formatted ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"vertically (",(0,r.kt)("inlineCode",{parentName:"li"},'"v"')," or ",(0,r.kt)("inlineCode",{parentName:"li"},'"vertical"'),")"),(0,r.kt)("li",{parentName:"ul"},"hortizontally (",(0,r.kt)("inlineCode",{parentName:"li"},'"h"'),", or ",(0,r.kt)("inlineCode",{parentName:"li"},'"horizontal"'),")"),(0,r.kt)("li",{parentName:"ul"},"Genepop Isolation-By-Distance (",(0,r.kt)("inlineCode",{parentName:"li"},'"ibd"'),") where each sample is a population with long/lat data prepended")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats;\nfewer_cats = omit_samples(cats, samples(cats)[1:10]);\njulia> genepop(fewer_cats, filename = "filtered_nancycats.gen", digits = 3, format = "h")\n')))}d.isMDXComponent=!0}}]);