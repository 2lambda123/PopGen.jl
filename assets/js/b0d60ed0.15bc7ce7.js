"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[6088],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return t?i.createElement(f,a(a({ref:n},u),{},{components:t})):i.createElement(f,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=c;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,a[1]=p;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2514:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],p={id:"ioutils",title:"ioUtils.jl",sidebar_label:"ioUtils.jl"},l=void 0,s={unversionedId:"api/PopGenCore/ioutils",id:"api/PopGenCore/ioutils",isDocsHomePage:!1,title:"ioUtils.jl",description:"PopGenCore.jl/src/Utils/ioUtils.jl",source:"@site/docs/api/PopGenCore/ioUtils.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/ioutils",permalink:"/PopGen.jl/docs/api/PopGenCore/ioutils",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/ioUtils.md",tags:[],version:"current",lastUpdatedAt:1635534271,formattedLastUpdatedAt:"10/29/2021",frontMatter:{id:"ioutils",title:"ioUtils.jl",sidebar_label:"ioUtils.jl"},sidebar:"docs",previous:{title:"GenotypeUtils.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/genotypeutils"},next:{title:"Iterators.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/iterators"}},u=[{value:"PopGenCore.jl/src/Utils/ioUtils.jl",id:"popgencorejlsrcutilsioutilsjl",children:[{value:"\u2757isbinary",id:"isbinary",children:[],level:3},{value:"\ud83d\udfea findploidy",id:"-findploidy",children:[],level:3},{value:"\ud83d\udfea phase",id:"-phase",children:[],level:3},{value:"\ud83d\udfea unphase",id:"-unphase",children:[],level:3}],level:2}],d={toc:u};function c(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"popgencorejlsrcutilsioutilsjl"},"PopGenCore.jl/src/Utils/ioUtils.jl"),(0,o.kt)("p",null,"\u2757 => not exported |\n\ud83d\udfea => exported by PopGenCore.jl |\n\ud83d\udd35 => exported by PopGen.jl"),(0,o.kt)("h3",{id:"isbinary"},"\u2757isbinary"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jula"},"isbinary(filepath::String)\n")),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the ",(0,o.kt)("inlineCode",{parentName:"p"},"filepath")," is a binary file. "),(0,o.kt)("h3",{id:"-findploidy"},"\ud83d\udfea findploidy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"findploidy(genotypes::T) where T<:AbstractVector\n")),(0,o.kt)("p",null,"Used internally in the ",(0,o.kt)("inlineCode",{parentName:"p"},"genepop")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"delimited")," file parsers to scan the genotypes\nof a sample and return the ploidy of the first non-missing locus."),(0,o.kt)("h3",{id:"-phase"},"\ud83d\udfea phase"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"phase(loc::T, type::DataType, digit::Int) where T<:AbstractString\nphase(loc::Missing, type::DataType, digit::Int) = missing\nphase(loc::T, type::DataType, digits::T) where T<:Integer\n")),(0,o.kt)("p",null,"Takes a String of numbers or Integers and returns a typed locus appropriate for PopGen.jl as used in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"genepop")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"csv")," file parsers. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," to specify output type (",(0,o.kt)("inlineCode",{parentName:"p"},"Int8")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Int16"),"),\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"digit")," to specify the number of digits/characters used per allele in a locus."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'ph_locus = phase("128114", Int16, 3)\nmap(i -> phase(i, Int16, 3), ["112131", "211112", "001003", "516500"])\n# or #\n[phase(i, Int8, 2) for i in ["0101", "0103", "0202", "0103"]]\n')),(0,o.kt)("h3",{id:"-unphase"},"\ud83d\udfea unphase"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},"unphase(geno::T; digits::Int = 3, ploidy::Int = 2, miss::Int = 0) where T <: Genotype\nunphase(geno::Missing; digits::Int = 3, ploidy::Int, miss::Int = 0)\n")),(0,o.kt)("p",null,"Takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"Genotype")," (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"(131, 94)"),") and returns a string of concatenated\nalleles padded with ",(0,o.kt)("em",{parentName:"p"},"n")," number of zeroes, where ",(0,o.kt)("em",{parentName:"p"},"n")," is given by ",(0,o.kt)("inlineCode",{parentName:"p"},"digits = "),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," values are returned as either a string of 'digits \xd7 ploidy' zeroes (",(0,o.kt)("inlineCode",{parentName:"p"},"miss = 0"),")\nor ",(0,o.kt)("inlineCode",{parentName:"p"},'"-9"')," (",(0,o.kt)("inlineCode",{parentName:"p"},"miss = -9"),"). The ",(0,o.kt)("inlineCode",{parentName:"p"},"ploidy")," flag is only relevant for unphasing ",(0,o.kt)("inlineCode",{parentName:"p"},"missing")," genotypes\nand not used otherwise."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'unphase((1,2,3,4), digits = 3)\n"001002003004"\nunphase(missing, digits = 2, ploidy = 2, miss = -9)\n"-9"\nunphase(missing, digits = 2, ploidy = 2, miss = 0)\n"0000"\n')))}c.isMDXComponent=!0}}]);