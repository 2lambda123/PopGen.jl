"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[6088],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:i,o[1]=p;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2514:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],p={id:"ioutils",title:"ioUtils.jl",sidebar_label:"ioUtils.jl"},l=void 0,s={unversionedId:"api/PopGenCore/ioutils",id:"api/PopGenCore/ioutils",title:"ioUtils.jl",description:"PopGenCore.jl/src/Utils/ioUtils.jl",source:"@site/docs/api/PopGenCore/ioUtils.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/ioutils",permalink:"/PopGen.jl/docs/api/PopGenCore/ioutils",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/ioUtils.md",tags:[],version:"current",lastUpdatedAt:1653415002,formattedLastUpdatedAt:"May 24, 2022",frontMatter:{id:"ioutils",title:"ioUtils.jl",sidebar_label:"ioUtils.jl"},sidebar:"docs",previous:{title:"GenotypeUtils.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/genotypeutils"},next:{title:"Iterators.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/iterators"}},u={},d=[{value:"PopGenCore.jl/src/Utils/ioUtils.jl",id:"popgencorejlsrcutilsioutilsjl",level:2},{value:"\ud83d\udce6 isbinary",id:"-isbinary",level:3},{value:"\ud83d\udfea findploidy",id:"-findploidy",level:3},{value:"\ud83d\udfea phase",id:"-phase",level:3},{value:"\ud83d\udfea unphase",id:"-unphase",level:3}],c={toc:d},m="wrapper";function f(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"popgencorejlsrcutilsioutilsjl"},"PopGenCore.jl/src/Utils/ioUtils.jl"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,a.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udfea  exported by PopGenCore.jl"),(0,a.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,a.kt)("h3",{id:"-isbinary"},"\ud83d\udce6 isbinary"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jula"},"isbinary(filepath::String)\n")),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if the ",(0,a.kt)("inlineCode",{parentName:"p"},"filepath")," is a binary file. "),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"-findploidy"},"\ud83d\udfea findploidy"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-julia"},"findploidy(genotypes::T) where T<:AbstractVector\n")),(0,a.kt)("p",null,"Used internally in the ",(0,a.kt)("inlineCode",{parentName:"p"},"genepop")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"delimited")," file parsers to scan the genotypes\nof a sample and return the ploidy of the first non-missing locus."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"-phase"},"\ud83d\udfea phase"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-julia"},"phase(loc::T, type::DataType, digit::Int) where T<:AbstractString\nphase(loc::Missing, type::DataType, digit::Int) = missing\nphase(loc::T, type::DataType, digits::T) where T<:Integer\n")),(0,a.kt)("p",null,"Takes a String of numbers or Integers and returns a typed locus appropriate for PopGen.jl as used in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"genepop")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"csv")," file parsers. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," to specify output type (",(0,a.kt)("inlineCode",{parentName:"p"},"Int8")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Int16"),"),\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"digit")," to specify the number of digits/characters used per allele in a locus."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'ph_locus = phase("128114", Int16, 3)\nmap(i -> phase(i, Int16, 3), ["112131", "211112", "001003", "516500"])\n# or #\n[phase(i, Int8, 2) for i in ["0101", "0103", "0202", "0103"]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"-unphase"},"\ud83d\udfea unphase"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-julia"},"unphase(geno::T; digits::Int = 3, ploidy::Int = 2, miss::Int = 0) where T <: Genotype\nunphase(geno::Missing; digits::Int = 3, ploidy::Int, miss::Int = 0)\n")),(0,a.kt)("p",null,"Takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Genotype")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"(131, 94)"),") and returns a string of concatenated\nalleles padded with ",(0,a.kt)("em",{parentName:"p"},"n")," number of zeroes, where ",(0,a.kt)("em",{parentName:"p"},"n")," is given by ",(0,a.kt)("inlineCode",{parentName:"p"},"digits = "),".\n",(0,a.kt)("inlineCode",{parentName:"p"},"missing")," values are returned as either a string of 'digits \xd7 ploidy' zeroes (",(0,a.kt)("inlineCode",{parentName:"p"},"miss = 0"),")\nor ",(0,a.kt)("inlineCode",{parentName:"p"},'"-9"')," (",(0,a.kt)("inlineCode",{parentName:"p"},"miss = -9"),"). The ",(0,a.kt)("inlineCode",{parentName:"p"},"ploidy")," flag is only relevant for unphasing ",(0,a.kt)("inlineCode",{parentName:"p"},"missing")," genotypes\nand not used otherwise."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'unphase((1,2,3,4), digits = 3)\n"001002003004"\nunphase(missing, digits = 2, ploidy = 2, miss = -9)\n"-9"\nunphase(missing, digits = 2, ploidy = 2, miss = 0)\n"0000"\n')))}f.isMDXComponent=!0}}]);