"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[983],{3905:function(e,a,t){t.d(a,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),s=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},u=function(e){var a=s(e.components);return n.createElement(i.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(i,".").concat(m)]||d[m]||c[m]||r;return t?n.createElement(f,p(p({ref:a},u),{},{components:t})):n.createElement(f,p({ref:a},u))}));function m(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,p=new Array(r);p[0]=d;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,p[1]=l;for(var s=2;s<r;s++)p[s]=t[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9824:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},assets:function(){return u},toc:function(){return c},default:function(){return m}});var n=t(7462),o=t(3366),r=(t(7294),t(3905)),p=["components"],l={id:"popdatawrappers",title:"PopDataWrappers.jl",sidebar_label:"PopDataWrappers.jl"},i=void 0,s={unversionedId:"api/PopGenCore/popdatawrappers",id:"api/PopGenCore/popdatawrappers",title:"PopDataWrappers.jl",description:"\ud83d\udce6  => not exported |",source:"@site/docs/api/PopGenCore/PopDataWrappers.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/popdatawrappers",permalink:"/PopGen.jl/docs/api/PopGenCore/popdatawrappers",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/PopDataWrappers.md",tags:[],version:"current",lastUpdatedAt:1636029729,formattedLastUpdatedAt:"11/4/2021",frontMatter:{id:"popdatawrappers",title:"PopDataWrappers.jl",sidebar_label:"PopDataWrappers.jl"},sidebar:"docs",previous:{title:"Permutations.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/permutations"},next:{title:"ReadWrite.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/read"}},u={},c=[{value:"\ud83d\udfea\ud83d\udd35 info",id:"-info",level:3},{value:"\ud83d\udfea\ud83d\udd35 metadata",id:"-metadata",level:3},{value:"\ud83d\udfea\ud83d\udd35 sampleinfo",id:"-sampleinfo",level:3},{value:"\ud83d\udfea\ud83d\udd35 genodata",id:"-genodata",level:3},{value:"\ud83d\udfea\ud83d\udd35 locusinfo",id:"-locusinfo",level:3},{value:"\ud83d\udfea\ud83d\udd35 locationdata",id:"-locationdata",level:3},{value:"\ud83d\udfea\ud83d\udd35 loci",id:"-loci",level:3},{value:"\ud83d\udfea\ud83d\udd35 samplenames",id:"-samplenames",level:3},{value:"\ud83d\udfea\ud83d\udd35 genotypes",id:"-genotypes",level:3},{value:"\ud83d\udfea\ud83d\udd35 populations",id:"-populations",level:3}],d={toc:c};function m(e){var a=e.components,t=(0,o.Z)(e,p);return(0,r.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\ud83d\udce6  => not exported |\n\ud83d\udfea => exported by PopGenCore.jl |\n\ud83d\udd35 => exported by PopGen.jl"),(0,r.kt)("h3",{id:"-info"},"\ud83d\udfea\ud83d\udd35 info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"info(::PopData)\n")),(0,r.kt)("p",null,"Display the metadata (PopDataInfo) of a PopData object."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-metadata"},"\ud83d\udfea\ud83d\udd35 metadata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"metadata(::PopData)\n")),(0,r.kt)("p",null,"Display the metadata (PopDataInfo) of a PopData object."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-sampleinfo"},"\ud83d\udfea\ud83d\udd35 sampleinfo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"sampleinfo(::PopData)\n")),(0,r.kt)("p",null,"Show the sample information found within the metadata of a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object. Returns a view of a dataframe"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-genodata"},"\ud83d\udfea\ud83d\udd35 genodata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"genodata(::PopData)\n")),(0,r.kt)("p",null,"Method to show the genotype information of a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object. Returns a view of a dataframe. "),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-locusinfo"},"\ud83d\udfea\ud83d\udd35 locusinfo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"locusinfo(::PopData)\n")),(0,r.kt)("p",null,"Show the locus information found within the metadata of a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object. Returns a view of a dataframe"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-locationdata"},"\ud83d\udfea\ud83d\udd35 locationdata"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"locationdata(data::PopData)\n")),(0,r.kt)("p",null,"View the longitude and latitude data in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object. Returns a table\nderived from the PopData. Changes made to this table will not alter the source\n",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object.\nUse ",(0,r.kt)("inlineCode",{parentName:"p"},"locations!")," to add spatial data to a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-loci"},"\ud83d\udfea\ud83d\udd35 loci"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"loci(data::PopData)\n")),(0,r.kt)("p",null,"Returns an array of strings of the loci names in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-samplenames"},"\ud83d\udfea\ud83d\udd35 samplenames"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"samplenames(data::PopData)\n")),(0,r.kt)("p",null,"View individual/sample names in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-genotypes"},"\ud83d\udfea\ud83d\udd35 genotypes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"genotypes(data::PopData, samplelocus::String)\n")),(0,r.kt)("p",null,"Return a vector of all the genotypes of a sample (or locus) in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'cats = @nancycats\ngenotypes(cats, "N115")\ngenotypes(cats, "fca8")\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"genotypes(data::PopData, samplelocus::Pair{String, String}) ::DataFrame\ngenotypes(data::PopData, samplelocus::Pair{Vector{String}, String}) ::DataFrame\ngenotypes(data::PopData, samplelocus::Pair{String, Vector{String}}) ::DataFrame\n")),(0,r.kt)("p",null,"Return a genotype or dataframe of genotypes for one or more samples/loci\nin a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object. Uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Pair")," notation of ",(0,r.kt)("inlineCode",{parentName:"p"},"samples => loci"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'cats = @nancycats;\ngenotypes(cats, "N115" => "fca8")\ngenotypes(cats, ["N115", "N7"] => "fca8")\ngenotypes(cats, "N115" => ["fca8", "fca37"])\ngenotypes(cats, ["N1", "N2"] => ["fca8", "fca37"])\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-populations"},"\ud83d\udfea\ud83d\udd35 populations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"populations(data::PopData; counts::Bool = false)\n")),(0,r.kt)("p",null,"View unique population ID's and/or their counts in ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"counts")," returns a dataframe of samples per ",(0,r.kt)("inlineCode",{parentName:"li"},"population")," instead (default = ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),")")))}m.isMDXComponent=!0}}]);