"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[7588],{4137:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,f=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1823:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(4137)),o=["components"],l={id:"tsne",title:"t-SNE",sidebar_label:"t-SNE"},s=void 0,p={unversionedId:"analyses/tsne",id:"analyses/tsne",title:"t-SNE",description:"The next major release of PopGen.jl will remove TSNE.jl as a dependency and this page will instead be a guide on how to use PopGen.jl and TSNE.jl together.",source:"@site/docs/analyses/tsne.md",sourceDirName:"analyses",slug:"/analyses/tsne",permalink:"/PopGen.jl/docs/analyses/tsne",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/analyses/tsne.md",tags:[],version:"current",lastUpdatedAt:1659105627,formattedLastUpdatedAt:"Jul 29, 2022",frontMatter:{id:"tsne",title:"t-SNE",sidebar_label:"t-SNE"},sidebar:"docs",previous:{title:"Kinship",permalink:"/PopGen.jl/docs/analyses/kinship"},next:{title:"Simulating Samples",permalink:"/PopGen.jl/docs/simulations/"}},d={},u=[{value:"tnse",id:"tnse",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Keyword Arguments (optional)",id:"keyword-arguments-optional",level:3},{value:"Acknowledgements",id:"acknowledgements",level:2}],m={toc:u},c="wrapper";function f(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"expect future deprecation",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"The next major release of PopGen.jl will remove TSNE.jl as a dependency and this page will instead be a guide on how to use PopGen.jl and TSNE.jl together.")),(0,r.kt)("p",null,"t-distributed stochastic neighbor embedding (",(0,r.kt)("em",{parentName:"p"},"a.k.a.")," t-SNE) is a dimensionality reduction technique for visualizing high-dimensional data. It does this by giving each datapoint a location in a two or three-dimensional map by minimizing the Kullback\u2013Leibler divergence between the high and low dimensionality probability distributions with respect to the locations of the points in the map. It models each high-dimensional object by a two- or three-dimensional point so similar objects are appear nearer and dissimilar objects appear further apart. Read more about it ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding"},"here"),"."),(0,r.kt)("admonition",{title:"careful parameterization",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Visual clusters can be seriously influenced by the parameters. For example, parameters can be chosen in such a way to identify clusters in data that has none. So, a good understanding of the parameters for t-SNE is necessary. ",(0,r.kt)("strong",{parentName:"p"},"Although a useful tool, t-SNE is not commonly used in population genetic analysis.")," It has been included in this package as a wrapper for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lejon/TSne.jl"},"TSNE.jl")," due to its utility in other disciplines.")),(0,r.kt)("h2",{id:"tnse"},"tnse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"tsne(data::PopData, args...; kwargs...)\n")),(0,r.kt)("p",null,"Perform t-SNE (t-Stochastic Neighbor Embedding) on a PopData object, returning a DataFrame. Converts the\nPopData object into a matrix of allele frequencies with missing values replaced with\nthe global mean frequency of that allele. First performs PCA on that matrix, retaining\n",(0,r.kt)("inlineCode",{parentName:"p"},"reduce_dims")," dimensions of the PCA prior to t-SNE analysis. The other positional and keyword arguments\nare the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"tsne")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"TSne.jl"),"."),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data"),": a ",(0,r.kt)("inlineCode",{parentName:"li"},"PopData")," object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ndims"),": Dimension of the embedded space (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reduce_dims")," the number of the first dimensions of X PCA to use for t-SNE, if 0, all available dimension are used (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_iter"),": Maximum number of iterations for the optimization (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"1000"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"perplexity"),": The perplexity is related to the number of nearest neighbors that is used in other manifold learning algorithms. Larger datasets usually require a larger perplexity. Consider selecting a value between 5 and 50. Different values can result in significantly different results (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"30"),")")),(0,r.kt)("h3",{id:"keyword-arguments-optional"},"Keyword Arguments (optional)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"distance"),": type ",(0,r.kt)("inlineCode",{parentName:"li"},"Function")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Distances.SemiMetric"),", specifies the function to\nuse for calculating the distances between the rows"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pca_init"),": whether to use the first ",(0,r.kt)("inlineCode",{parentName:"li"},"ndims")," of the PCA as the initial t-SNE layout,\nif ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," (the default), the method is initialized with the random layout"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_iter"),": how many iterations of t-SNE to do"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"verbose"),": output informational and diagnostic messages"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"progress"),": display progress meter during t-SNE optimization (default: ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min_gain"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"eta"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"initial_momentum"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"final_momentum"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"momentum_switch_iter"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"stop_cheat_iter"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"cheat_scale")," low-level parameters of t-SNE optimization"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"extended_output"),": if ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", returns a tuple of embedded coordinates matrix,\npoint perplexities and final Kullback-Leibler divergence")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"acknowledgements"},"Acknowledgements"),(0,r.kt)("p",null,"This function is a wrapper for the another package, so really, all the brilliance and effort should be credited to the authors of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lejon/TSne.jl"},"TNSE.jl"),"."))}f.isMDXComponent=!0}}]);