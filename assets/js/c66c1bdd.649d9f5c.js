"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[4977],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5231:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"pairwisefst",title:"PairwiseFST.jl",sidebar_label:"PairwiseFST.jl"},s=void 0,p={unversionedId:"api/PopGen/pairwisefst",id:"api/PopGen/pairwisefst",title:"PairwiseFST.jl",description:"PopGen.jl/src/FStatistics/PairwistFST.jl",source:"@site/docs/api/PopGen/PairwiseFST.md",sourceDirName:"api/PopGen",slug:"/api/PopGen/pairwisefst",permalink:"/PopGen.jl/docs/api/PopGen/pairwisefst",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGen/PairwiseFST.md",tags:[],version:"current",lastUpdatedAt:1658766707,formattedLastUpdatedAt:"Jul 25, 2022",frontMatter:{id:"pairwisefst",title:"PairwiseFST.jl",sidebar_label:"PairwiseFST.jl"},sidebar:"docs",previous:{title:"PCA.jl",permalink:"/PopGen.jl/docs/api/PopGen/pca"},next:{title:"PairwiseKinship.jl",permalink:"/PopGen.jl/docs/api/PopGen/pairwisekinship"}},c={},u=[{value:"PopGen.jl/src/FStatistics/PairwistFST.jl",id:"popgenjlsrcfstatisticspairwistfstjl",level:2},{value:"\ud83d\udd35 Base.show",id:"-baseshow",level:3},{value:"\ud83d\udd35 PairwiseFST",id:"-pairwisefst",level:3},{value:"\ud83d\udd35 pairwisefst",id:"-pairwisefst-1",level:3},{value:"Methods:",id:"methods",level:4}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"popgenjlsrcfstatisticspairwistfstjl"},"PopGen.jl/src/FStatistics/PairwistFST.jl"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,i.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,i.kt)("h3",{id:"-baseshow"},"\ud83d\udd35 Base.show"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"Base.show(io::IO, data::PairwiseFST)\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-pairwisefst"},"\ud83d\udd35 PairwiseFST"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"PairwiseFST\n    results::DataFrame\n    method::String\n")),(0,i.kt)("p",null,"A convenience data structure which stores the ",(0,i.kt)("inlineCode",{parentName:"p"},"results")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"method")," of a ",(0,i.kt)("inlineCode",{parentName:"p"},"pairwisefst")," analysis.\nThe object pretty-prints a bit more information to the console, especially when doing a global pairwise FST. "),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"-pairwisefst-1"},"\ud83d\udd35 pairwisefst"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'pairwisefst(data::PopData; method::Function, by::String = "global", iterations::Int64)\n')),(0,i.kt)("p",null,"Calculate pairwise FST between populations in a ",(0,i.kt)("inlineCode",{parentName:"p"},"PopData")," object. Set ",(0,i.kt)("inlineCode",{parentName:"p"},"iterations"),"\nto a value greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to perform a single-tailed permutation test to obtain\nP-values of statistical significance. Use ",(0,i.kt)("inlineCode",{parentName:"p"},'by = "locus"')," to perform a locus-by-locus FST for\npopulation pairs (iterations and significance testing ignored). Returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"PairwiseFST")," object,\nstores a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataFrame")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"results"),", along with the ",(0,i.kt)("inlineCode",{parentName:"p"},"method")," used to obtain the estimates. "),(0,i.kt)("h4",{id:"methods"},"Methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Hudson"),": Hudson et al. (1992) method (only for biallelic data)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Nei"),": Nei (1987) method"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"WeirCockerham")," : Weir & Cockerham (1984) method (default)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},"data = @nancycats\nwc = pairwise_fst(data, method = WeirCockerham)\nwc_sig = pairwise_fst(data, iterations = 1000)\n")))}m.isMDXComponent=!0}}]);