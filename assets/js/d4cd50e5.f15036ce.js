"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[1254],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return f}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),s=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=s(r),d=n,f=p["".concat(o,".").concat(d)]||p[d]||m[d]||l;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u[p]="string"==typeof e?e:n,i[1]=u;for(var s=2;s<l;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5162:function(e,t,r){r.d(t,{Z:function(){return i}});var a=r(7294),n=r(6010),l={tabItem:"tabItem_Ymn6"};function i(e){var t=e.children,r=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,i),hidden:r},t)}},4866:function(e,t,r){r.d(t,{Z:function(){return y}});var a=r(7462),n=r(7294),l=r(6010),i=r(2466),u=r(6550),o=r(1980),s=r(7392),c=r(12);function p(e){return function(e){var t,r;return null!=(t=null==(r=n.Children.map(e,(function(e){if(!e||(0,n.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:r.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function m(e){var t=e.values,r=e.children;return(0,n.useMemo)((function(){var e=null!=t?t:p(r);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,r])}function d(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function f(e){var t=e.queryString,r=void 0!==t&&t,a=e.groupId,l=(0,u.k6)(),i=function(e){var t=e.queryString,r=void 0!==t&&t,a=e.groupId;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:r,groupId:a});return[(0,o._X)(i),(0,n.useCallback)((function(e){if(i){var t=new URLSearchParams(l.location.search);t.set(i,e),l.replace(Object.assign({},l.location,{search:t.toString()}))}}),[i,l])]}function h(e){var t,r,a,l,i=e.defaultValue,u=e.queryString,o=void 0!==u&&u,s=e.groupId,p=m(e),h=(0,n.useState)((function(){return function(e){var t,r=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!d({value:r,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}var n=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:i,tabValues:p})})),k=h[0],v=h[1],g=f({queryString:o,groupId:s}),b=g[0],w=g[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),r=(0,c.Nk)(t),a=r[0],l=r[1],[a,(0,n.useCallback)((function(e){t&&l.set(e)}),[t,l])]),N=y[0],S=y[1],C=function(){var e=null!=b?b:N;return d({value:e,tabValues:p})?e:null}();return(0,n.useLayoutEffect)((function(){C&&v(C)}),[C]),{selectedValue:k,selectValue:(0,n.useCallback)((function(e){if(!d({value:e,tabValues:p}))throw new Error("Can't select invalid tab value="+e);v(e),w(e),S(e)}),[w,S,p]),tabValues:p}}var k=r(2389),v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){var t=e.className,r=e.block,u=e.selectedValue,o=e.selectValue,s=e.tabValues,c=[],p=(0,i.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var t=e.currentTarget,r=c.indexOf(t),a=s[r].value;a!==u&&(p(t),o(a))},d=function(e){var t,r=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var a,n=c.indexOf(e.currentTarget)+1;r=null!=(a=c[n])?a:c[0];break;case"ArrowLeft":var l,i=c.indexOf(e.currentTarget)-1;r=null!=(l=c[i])?l:c[c.length-1]}null==(t=r)||t.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},t)},s.map((function(e){var t=e.value,r=e.label,i=e.attributes;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:u===t?0:-1,"aria-selected":u===t,key:t,ref:function(e){return c.push(e)},onKeyDown:d,onClick:m},i,{className:(0,l.Z)("tabs__item",v.tabItem,null==i?void 0:i.className,{"tabs__item--active":u===t})}),null!=r?r:t)})))}function b(e){var t=e.lazy,r=e.children,a=e.selectedValue,l=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){var i=l.find((function(e){return e.props.value===a}));return i?(0,n.cloneElement)(i,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function w(e){var t=h(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",v.tabList)},n.createElement(g,(0,a.Z)({},e,t)),n.createElement(b,(0,a.Z)({},e,t)))}function y(e){var t=(0,k.Z)();return n.createElement(w,(0,a.Z)({key:String(t)},e))}},3949:function(e,t,r){r.r(t),r.d(t,{assets:function(){return m},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=r(7462),n=r(3366),l=(r(7294),r(3905)),i=r(4866),u=r(5162),o=["components"],s={id:"structure",title:"Structure",sidebar_label:"Structure"},c=void 0,p={unversionedId:"io/structure",id:"io/structure",title:"Structure",description:"Words of wisdom",source:"@site/docs/io/structure.md",sourceDirName:"io",slug:"/io/structure",permalink:"/PopGen.jl/docs/io/structure",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/io/structure.md",tags:[],version:"current",lastUpdatedAt:1652451030,formattedLastUpdatedAt:"May 13, 2022",frontMatter:{id:"structure",title:"Structure",sidebar_label:"Structure"},sidebar:"docs",previous:{title:"Plink",permalink:"/PopGen.jl/docs/io/plink"},next:{title:"Variant Call Format",permalink:"/PopGen.jl/docs/io/vcf"}},m={},d=[{value:"Import a Structure file as <code>PopData</code>",id:"import-a-structure-file-as-popdata",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Keyword Arguments",id:"keyword-arguments",level:3},{value:"File formatting",id:"file-formatting",level:3},{value:"Structure file example:",id:"structure-file-example",level:4},{value:"Example",id:"example",level:4},{value:"fastStructure file example:",id:"faststructure-file-example",level:4},{value:"Example",id:"example-1",level:4},{value:"Writing to a Structure file",id:"writing-to-a-structure-file",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"Keyword Arguments",id:"keyword-arguments-1",level:3},{value:"Example",id:"example-2",level:4}],f={toc:d},h="wrapper";function k(e){var t=e.components,r=(0,n.Z)(e,o);return(0,l.kt)(h,(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Words of wisdom"),(0,l.kt)("p",null,"More often than not, your Structure file was created by a conversion from another format. While PopGen.jl offers a Structure file reader, we generally recommend using whatever previous format it was in because the Structure reader has more specific format requirements than the other readers, which can cause unneeded frustration. Additionally, fewer data conversions mean less chance of conversion errors occuring. ")),(0,l.kt)("h2",{id:"import-a-structure-file-as-popdata"},"Import a Structure file as ",(0,l.kt)("inlineCode",{parentName:"h2"},"PopData")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"structure(infile::String; kwargs...)\n")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"infile::String")," : path to Structure file")),(0,l.kt)("h3",{id:"keyword-arguments"},"Keyword Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extracols::Integer"),": how many additional optional columns there are beyond Stucture's POPDATA the reader needs to ignore (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),")",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"these include POPFLAG, LOCDATA, or anything else you might have added"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"extrarows::Integer")," : how many additional optional rows there are beyond the first row of locus names (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"0"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"missingval::String"),"  : the value used to identify missing values in the data (default: ",(0,l.kt)("inlineCode",{parentName:"li"},'"-9"'),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"silent::Bool"),"   : whether to print file information during import (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"allow_monomorphic::Bool")," : whether to keep monomorphic loci in the dataset (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"faststructure::Bool"),": whether the file is fastStructure format (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")")),(0,l.kt)("h3",{id:"file-formatting"},"File formatting"),(0,l.kt)("p",null,"Structure files are not an ideal format because there is a bit too much wiggle room in the specifications that are later cleaned up with a config file when running the software. As such, PopGen.jl requires somewhat more specificity in how the files are formatted for things to work correctly:"),(0,l.kt)(i.Z,{block:!0,defaultValue:"s",values:[{label:"Stucture",value:"s"},{label:"fastStructre",value:"f"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"s",mdxType:"TabItem"},(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the file is ",(0,l.kt)("inlineCode",{parentName:"li"},"tab")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"space")," delimited ",(0,l.kt)("strong",{parentName:"li"},"but not both")),(0,l.kt)("li",{parentName:"ul"},"first row is locus names separated by the delimiter",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"leading/trailing whitespaces are tolerated"),(0,l.kt)("li",{parentName:"ul"},"optional rows allowed ",(0,l.kt)("strong",{parentName:"li"},"after")," the locus names"))),(0,l.kt)("li",{parentName:"ul"},"number of rows per sample = ploidy",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. if diploid, that sample would have 2 rows"),(0,l.kt)("li",{parentName:"ul"},"multi-column variant not supported"))),(0,l.kt)("li",{parentName:"ul"},"first data column is sample name"),(0,l.kt)("li",{parentName:"ul"},"second data column is population ID",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"optional columns allowed ",(0,l.kt)("strong",{parentName:"li"},"after")," the population ID (2nd) column"))),(0,l.kt)("li",{parentName:"ul"},"remaining columns are the genotype for that individual for that locus")),(0,l.kt)("h4",{id:"structure-file-example"},"Structure file example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"locus_1 locus_2 locus_3 locus_4 locus_5\nwalnut_01   1   -9  145 66  0   92\nwalnut_01   1   -9  -9  64  0   94\nwalnut_02   1   106 142 68  1   92\nwalnut_02   1   106 148 64  0   94\nwalnut_03   2   110 145 -9  0   92\nwalnut_03   2   110 148 66  1   -9\n")),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'walnuts = structure("juglans_nigra.str", extracols = 0, extrarows = 0)\n'))),(0,l.kt)(u.Z,{value:"f",mdxType:"TabItem"},(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the file is ",(0,l.kt)("inlineCode",{parentName:"li"},"tab")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"space")," delimited ",(0,l.kt)("strong",{parentName:"li"},"but not both")),(0,l.kt)("li",{parentName:"ul"},"no first row of loci names"),(0,l.kt)("li",{parentName:"ul"},"number of rows per sample = ploidy",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. if diploid, that sample would have 2 rows"))),(0,l.kt)("li",{parentName:"ul"},"first data column is sample name"),(0,l.kt)("li",{parentName:"ul"},"second data column is population ID"),(0,l.kt)("li",{parentName:"ul"},"remaining columns are the genotype for that individual for that locus"),(0,l.kt)("li",{parentName:"ul"},"usually, first 6 colums are empty (but not necessary)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"no")," extra rows or columns.")),(0,l.kt)("h4",{id:"faststructure-file-example"},"fastStructure file example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"chestnut_01 1   -9  145 66  0   92\nchestnut_01 1   -9  -9  64  0   94\nchestnut_02 1   106 142 68  1   92\nchestnut_02 1   106 148 64  0   94\nchestnut_03 2   110 145 -9  0   92\nchestnut_03 2   110 148 66  1   -9\n")),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'chestnuts = structure("castanea_dentata.str", faststructure = true)\n')))),(0,l.kt)("h2",{id:"writing-to-a-structure-file"},"Writing to a Structure file"),(0,l.kt)("p",null,"All file writing options can be performed using ",(0,l.kt)("inlineCode",{parentName:"p"},"PopGen.write()"),", which calls ",(0,l.kt)("inlineCode",{parentName:"p"},"structure")," when writing to a Structure/fastStructure file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"structure(data::PopData; filename::String, faststructure::Bool, delim::String)\n")),(0,l.kt)("p",null,"Write a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object to a Stucture format file"),(0,l.kt)("h3",{id:"arguments-1"},"Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": the ",(0,l.kt)("inlineCode",{parentName:"li"},"PopData")," object you wish to convert to a Structure file")),(0,l.kt)("h3",{id:"keyword-arguments-1"},"Keyword Arguments"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filename::String"),": the output filename"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delim::String")," : either ",(0,l.kt)("inlineCode",{parentName:"li"},'"tab"')," or ",(0,l.kt)("inlineCode",{parentName:"li"},'"space"')," indicating the delimiter (default: ",(0,l.kt)("inlineCode",{parentName:"li"},'"tab"'),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"faststructure::Bool"),": if the output should be formatted for fastStructure (default: ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")")),(0,l.kt)("h4",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'cats = @nancycats;\nfewer_cats = omit(cats, name = samplenames(cats)[1:10]);\nstructure(fewer_cats, filename = "filtered_nancycats.str", faststructure = true)\n')))}k.isMDXComponent=!0}}]);