"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[4286],{5274:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"fst","metadata":{"permalink":"/PopGen.jl/blog/fst","editUrl":"https://github.com/BioJulia/PopGen.jl/edit/documentation/blog/2021-04-04-fst.md","source":"@site/blog/2021-04-04-fst.md","title":"A bit about FST","description":"If you have spent any time being exposed to population genetics, you\'ve likely encountered the term  FST, our field\'s most beloved/maligned one-size-fits all coefficient. That description is a gross oversimplification, but the purpose of this post isn\'t to dig deep into the world of differentiation statistics, but instead shed light on the general concept and the logic behind its significance testing.","date":"2021-04-04T00:00:00.000Z","formattedDate":"April 4, 2021","tags":[{"label":"info","permalink":"/PopGen.jl/blog/tags/info"}],"readingTime":4.935,"truncated":false,"authors":[{"name":"Pavel Dimens","title":"Little this, little that","url":"https://github.com/pdimens","imageURL":"https://avatars1.githubusercontent.com/u/19176506?s=460&u=3afad1d1ef3b09ddc4ab7108143f515be3412d5a&v=4"}],"nextItem":{"title":"Relatedness Tutorial","permalink":"/PopGen.jl/blog/relatedness"}},"content":"import useBaseUrl from \\"@docusaurus/useBaseUrl\\";\\n\\n<link rel=\\"stylesheet\\" href={useBaseUrl(\\"katex/katex.min.css\\")} />\\n\\n# A bit about FST\\n\\nIf you have spent any time being exposed to population genetics, you\'ve likely encountered the term  *FST*, our field\'s most beloved/maligned one-size-fits all coefficient. That description is a gross oversimplification, but the purpose of this post isn\'t to dig deep into the world of differentiation statistics, but instead shed light on the general concept and the logic behind its significance testing. \\n\\nIf you\'re like me, you\'ve used and reported some kind of pairwise **X**ST statistic in your work, where that value was generated using some fantastic software like [adegenet](https://cran.r-project.org/web/packages/adegenet/index.html) or [GenoDive](https://www.bentleydrummer.nl/software/software/GenoDive.html), and you trusted that the methods were honest and appropriate (they are!). Part of the motivation behind PopGen.jl was to invest time into learning and understanding some of these methods I use, despite not coming from a mathematics or computer science background. Well, as I actually learn stuff and decode methods (no pun intended), I feel like it might be worthwhile to share some of my basic insights with others, in a way that I wish I could have been taught. So, this time it\'s _FST_. The purpose of this post is to cover the larger concepts without getting into the overwhelming math. Let\'s go!\\n\\n## What is FST?\\n\\nTo understand *FST*, we need to start with _F_, the inbreeding coefficient devised by brilliant-but-ethically-questionable Sewall Wright. The *F* coefficient was a mathematically simple way to understand the level of inbreeding in a group, originally described for cattle breeds (the \ud83d\udc04 part isn\'t relevant, but it\'s a fun fact). There were three circumstantial versions of _F_, denoted by very straightforward subscripted letters: *FIT*, *FIS*, *FST*. The **I** stands for **I**ndividual, **S** for **S**ubpopulation, **T** for **T**otal. The combination of letters explains what relationship you are measuring:  *FIT* was the comparison of *F* for an Individual vs the Total, *FIS* was the comparison of *F* for an Individual vs a Subpopulation. \\n\\nLogically, *FST* would then mean you were looking at *F* for Subpopulations vs the Total, which  is where population geneticists get all excited. The values range from 0 to 1, with 0 being panmixia (fully mixed) and 1 being complete isolation. Although it _seems_ like it would be linear, it\'s not-- Wright considered 0.125 to be the cutoff between panmictic and divergent. If one was to calculate *FST* for one large group of individuals and get a value >0.125, this would suggest there is population subdivision happening (exciting!!). \\n\\n## Pairwise FST\\n\\nGoing one step further, you can narrow how you calculate *FST* to identify different trends. A \\"pairwise\\" *FST* is when you calculate *FST* for only a pair of populations at a time. With a pairwise *FST*, you are now testing if two populations are panmictic or divergent with _each other_.  Depending on your study system and the questions you\'re trying to answer, this can be extremely valuable information. \\n\\nFrom a genetic standpoint, it looks kinda like this:\\n![fst_diagram](fst_img/FST.png)\\n\\nThis is an over-simplified system (diploid, single locus, biallelic, **ignoring Hardy-Weinberg stuff**), but it demonstrates the point. When you are investigating two groups, if they are both completely heterozygous for the locus (for the same alleles), you would assume the groups are fully mixed (_FST_ = 0). And that makes sense, right? Given the information required to calculate _FST_, it\'s a reasonable conclusion to say those alleles are constantly shared between the groups. And the opposite then should be true too: if both groups are completely fixed for different alleles (_FST_ = 1), then they clearly aren\'t sharing alleles with each other.\\n\\n## Pitfalls\\n\\nLike I alluded to in the opening paragraph, *FST* (and it\'s derivatives) aren\'t a golden rule. There are natural phenomena that *FST* cannot account for, which may lead to misleading results or incorrect interpretations of results. For one, there are Hardy-Weinberg assumptions, so the presence of kin, overlapping generations, etc. kinda messes things up. Another is consideration is that the genetic data we collect now is only a snapshot in time.  If two populations are completely isolated from one another and have been for generations, but are long lived and slow to evolve, then *FST* may mislead you into believing they are panmictic (that happened in my [shark study](https://link.springer.com/article/10.1007/s00227-019-3533-1)). These are just a few examples and there are more.\\n\\n## Significance testing\\n\\nOne way of being more rigorous with *FST* values is significance testing (you know, generating those p-values everyone loves so much). So the question is, how do we do that? One common (frequentist) solution is permutation testing. The rationale is this: we get some kind of observed *FST* with our samples arranged in their natural populations, so would that  *FST* look the same if we shuffled the samples up? Honestly, that\'s the gist of it. We calculate our observed *FST* value, then we randomly shuffle the samples into two new populations and recalculate the pairwise *FST* for the new population pair. Then we just keep shuffling and recalculating *FST* a few thousands of times. After so many iterations, we compare how many times our observed (original) *FST* value was greater than the permuted *FST* values. This is known as a one-tailed test, since we\'re only interested in knowing if our observed *FST* is _greater_ than randomness, meaning we\'re making the case that *FST* (and therefore divergence) is highest with our samples in this non-random population configuration. \\n\\n ## Other means\\n\\nThe field of population genetics has expanded tremendously since the Fisher and Wright era, and there are now all sorts of interesting ways to identify population subdivision. Each method has its strengths and weaknesses, which is why it\'s good practice to try multiple things and find agreement between methods. At the time of this writing, PopGen.jl can calculate pairwise *FST* and perform significance testing using the [Nei 1987](https://books.google.com/books?hl=en&lr=&id=UhRSsLkjxDgC&oi=fnd&pg=PP11&ots=Qu7vO8EMmw&sig=T6cTISYEEm-hL8aWU8EgeGgzP5E#v=onepage&q&f=false), [Weir & Cockerham 1984](https://www.jstor.org/stable/2408641?casa_token=_0gGbCbYpqMAAAAA:f9BvW9Xvx_8WaWSaRN4iqg0HB7KkaP21712ds28cTjhsvVQrYRTyHon7hKCcyHLcmTRA9H_1oM5iF3TZAl5xPm5gil2GmcGzHyEFFYAOl8pDVEBMQQ&seq=1#metadata_info_tab_contents), and [Hudson et al. 1992](https://www.genetics.org/content/132/2/583) methods. If you\'re interested in [contributing to PopGen.jl](https://biojulia.net/PopGen.jl/docs/gettingstarted/community), we\'d love to have you!"},{"id":"relatedness","metadata":{"permalink":"/PopGen.jl/blog/relatedness","editUrl":"https://github.com/BioJulia/PopGen.jl/edit/documentation/blog/2020-11-14-relatedness.md","source":"@site/blog/2020-11-14-relatedness.md","title":"Relatedness Tutorial","description":"Getting Started","date":"2020-11-14T00:00:00.000Z","formattedDate":"November 14, 2020","tags":[{"label":"tutorials","permalink":"/PopGen.jl/blog/tags/tutorials"}],"readingTime":13.26,"truncated":false,"authors":[{"name":"Pavel Dimens","title":"Little this, little that","url":"https://github.com/pdimens","imageURL":"https://avatars1.githubusercontent.com/u/19176506?s=460&u=3afad1d1ef3b09ddc4ab7108143f515be3412d5a&v=4"}],"prevItem":{"title":"A bit about FST","permalink":"/PopGen.jl/blog/fst"},"nextItem":{"title":"Logo Graveyard","permalink":"/PopGen.jl/blog/logos"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n## Getting Started\\nIn a population genetics study, you often need to identify if there are kin in your data. This may be necessary because you are trying to remove kin from your data (because of Hardy-Weinberg assumptions), or maybe kinship is a central interest in your study. Either way, the goal of this tutorial is to provide you with a basic tutorial on using PopGen.jl to perform a relatedness analysis, which is sometimes called a _kinship_ analysis. To follow along, you\'ll need to have Julia, along with the packages PopGen.jl, PopGenSims.jl, and StatsBase.jl installed. We\'ll be using the `nancycats` data because it\'s smaller than `gulfsharks`, so things should be a lot quicker.\\n\\n```julia\\nusing PopGen, PopGenSims, StatsBase\\n\\njulia> cats = @nancycats\\nPopData Object\\n  Markers: Microsatellite\\n  Ploidy: 2\\n  Samples: 237\\n  Loci: 9\\n  Populations: 17\\n  Coordinates: absent\\n```\\n\\n### Estimators\\nLike `Coancestry` and the R packages that wrap it (i.e. `relate`, `related`), PopGen.jl provides a whole bunch of relatedness estimators that you can choose from for your data. Unfortunately, there is no right answer and you will need to use your discretion. Some people choose an estimator based on the heterozygosity of the data, others choose one based on more liberal or conservative values, and there are yet more criteria one can consider for choosing an estimator. To keep things simple, we\'re going to use `LynchLi`. Why? Because I\'m the one writing this tutorial, and I said so :grin:. \\n\\n\\n## The Steps\\n### 1. Calculate pairwise relatedness\\nThis seems pretty obvious, but it needs to be said. In order to do the analysis, you need you get the pairwise relatedness values for the individuals of interest in your data. To keep things simple, we\'re going to do an all-by-all comparison. But, we also want to boostrap the pairs to create confidence intervals (\\"CI\\") for each pair, so let\'s talk about that.\\n\\n### 2. Bootstrap to calculate CI\\nIt would behoove us to bootstrap the loci in a pairwise comparison _n_ number of times so we can create a confidence interval for the relatedness estimates for each pair. This inflates the runtime of the analysis substantially, but it\'s a very useful method in making sense of our estimates. If one was to be conservative (and we generally are), then we would reject an estimate for a pair whose CI includes zero. In PopGen.jl, the estimates and bootstrapping are done all at once to minimize processing time, so the command for that would be\\n```julia\\njulia> rel_out  = relatedness(cats, method = LynchLi, iterations = 1000)\\n```\\nBy default, the `relatedness` function uses a 95% CI (`interval = (0.025, 0.975)`), but you can change that with `interval = (low,high)` where `low` and `high` are decimals of your quantiles. \\nThe `relatedness()` function returns a `NamedTuple` of dataframes whenever you are bootstrapping, where each element shares its name with the method used, so in this case, we can access our results with `rel_out.LynchLi`.\\n\\n<Tabs\\n  block={true}\\n  defaultValue=\\"rel\\"\\n  values={[\\n    { label: \'relatedness\', value: \'rel\', },\\n    { label: \'plotting\', value: \'pl\', },\\n  ]\\n}>\\n<TabItem value=\\"rel\\">\\n\\n```\\njulia> rel_out.LynchLi\\n27966\xd78 DataFrame\\n   Row \u2502 sample_1  sample_2  n_loci  LynchLi     LynchLi_mean  LynchLi_median  LynchLi_S \u22ef\\n       \u2502 String    String    Int64   Float64?    Float64?      Float64?        Float64?  \u22ef\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n     1 \u2502 N215      N216           8   0.743535      0.747288        0.748042     0.75344 \u22ef\\n     2 \u2502 N215      N217           8   0.230605      0.233593        0.240085     0.34187\\n     3 \u2502 N215      N218           8   0.230605      0.230507        0.221861     0.32161\\n     4 \u2502 N215      N219           8   0.230605      0.23601         0.23567      0.32782\\n     5 \u2502 N215      N220           8   0.333191      0.33798         0.350492     0.39898 \u22ef\\n     6 \u2502 N215      N221           8   0.589656      0.594223        0.601308     0.61945\\n     7 \u2502 N215      N222           8   0.0254328     0.0347216       0.0262021    0.21408\\n     8 \u2502 N215      N223           8   0.333191      0.329983        0.331411     0.38402\\n     9 \u2502 N215      N224           8  -0.0258602    -0.021062       -0.0301579    0.21112 \u22ef\\n    10 \u2502 N215      N7             8  -0.282325     -0.27967        -0.288337     0.33611\\n    11 \u2502 N215      N141           8  -0.0771532    -0.0796867      -0.083113     0.21261\\n    12 \u2502 N215      N142           8   0.0254328     0.0302549       0.0330718    0.23957\\n   \u22ee   \u2502    \u22ee         \u22ee        \u22ee         \u22ee            \u22ee              \u22ee             \u22ee     \u22f1\\n 27955 \u2502 N295      N289           7   0.322731      0.347021        0.34118      0.41168 \u22ef\\n 27956 \u2502 N295      N290           7   0.153414      0.160102        0.164866     0.22862\\n 27957 \u2502 N296      N297           7  -0.0159038    -0.0182747      -0.0187108    0.16981\\n 27958 \u2502 N296      N281           7   0.0405353     0.037025        0.0422647    0.15294\\n 27959 \u2502 N296      N289           7   0.322731      0.328379        0.337317     0.35578 \u22ef\\n 27960 \u2502 N296      N290           7   0.153414      0.152384        0.16194      0.19131\\n 27961 \u2502 N297      N281           7  -0.0159038    -0.0128349      -0.0303449    0.21030\\n 27962 \u2502 N297      N289           7   0.37917       0.392517        0.392818     0.45139\\n 27963 \u2502 N297      N290           7   0.435609      0.437829        0.450044     0.47027 \u22ef\\n 27964 \u2502 N281      N289           8   0.20428       0.21279         0.207425     0.29611\\n 27965 \u2502 N281      N290           7   0.37917       0.386583        0.390585     0.45471\\n 27966 \u2502 N289      N290           7   0.209853      0.217811        0.222894     0.28649\\n                                                          2 columns and 27942 rows omitted\\n```\\n\\n</TabItem>\\n<TabItem value=\\"pl\\">\\n\\nAnd while it\'s totally optional, we can plot the distribution of values for some visual data exploration. For that we\'ll use Plots.jl and StatsPlots.jl. \\n\\n:::note plotting packages\\nWe could have used any plotting package, but Plots.jl was chosen for simplicity. Other great\\noptions are (and not limited to): Makie.jl, Gadfly.jl, VegaLite.jl, and PlotlyJS.jl.\\n:::\\n\\n```julia\\nusing Plots, StatsPlots\\n\\njulia> density(rel_out.LynchLi.LynchLi)\\njulia> title!(\\"LynchLi relatedness\\")\\n```\\n\\n![relatedness_histo](relatedness_img/nancycats_LynchLi.png)\\n\\n</TabItem>\\n</Tabs>\\n\\n### 3. Create CI\'s for the sibships\\n\\n:::note There\'s more???\\nThe next set of steps seem like a lot more work, so allow me to explain. The estimators all generally give you some value between 0-1 (or 0-0.5, same idea) and you can intuit that certain values mean certain things, like that `0` is \\"unrelated\\", `0.25` is \\"half-sib\\", and `0.5` is \\"full-sib\\". However, those are fixed values, so how do we know how far we can deviate from 0.25 (for example) and still call our pair half-siblings? Instead of hand-waving, we can create confidence intervals from simulated data to act as sibship ranges for our data. If this doesn\'t make sense yet, it will below. Promise! \\n:::\\n\\n#### i. simulate known sibship pairs\\nNext, we need to further contextualize what out estimates actually mean, and we need to devise a rigorous and defensible method to define the sibling-ship (\\"sibship\\") of a pair of samples as **unrelated**, **half-sibs**, or **full-sibs**. To do this, we\'re going to use PopGenSims.jl to simulate data based on the allele frequencies in our data. What `simulate_sibship` does is simulate individuals based on the allele frequencies in your `PopData`, then simulate offspring of a particular siblingship resulting from the \\"mating\\" of those individuals. For example, when you specify `\\"fullsib\\"`, it generates two offspring resulting from two parents, `n` number of times. We want to do this for each of the three kinds of sibships.\\n\\n<Tabs\\n  block={true}\\n  defaultValue=\\"un\\"\\n  values={[\\n    { label: \'simulate unrelated\', value: \'un\', },\\n    { label: \'simulate halfsib\', value: \'h\', },\\n    { label: \'simulate fullsib\', value: \'f\', },\\n  ]\\n}>\\n<TabItem value=\\"un\\">\\n\\n```julia\\njulia> unrelated_sims = simulate_sibship(cats, n = 500, relationship= \\"unrelated\\")\\nPopData Object\\n  Markers: Microsatellite\\n  Ploidy: 2\\n  Samples: 1000\\n  Loci: 9\\n  Populations: 1\\n  Coordinates: absent\\n```\\n\\n</TabItem>\\n<TabItem value=\\"h\\">\\n\\n```julia\\njulia> halfsib_sims = simulate_sibship(cats, n = 500, relationship= \\"halfsib\\")\\nPopData Object\\n  Markers: Microsatellite\\n  Ploidy: 2\\n  Samples: 1000\\n  Loci: 9\\n  Populations: 1\\n  Coordinates: absent\\n```\\n\\n</TabItem>\\n<TabItem value=\\"f\\">\\n\\n```julia\\njulia> fullsib_sims = simulate_sibship(cats, n = 500, relationship= \\"fullsib\\")\\nPopData Object\\n  Markers: Microsatellite\\n  Ploidy: 2\\n  Samples: 1000\\n  Loci: 9\\n  Populations: 1\\n  Coordinates: absent\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nTechnically, we could merge all three results into a single `PopData`, but it will be easier to explain things if we don\'t. Feel free to take a peep into the simulated data:\\n\\n<Tabs\\n  block={true}\\n  defaultValue={null}\\n  values={[\\n    { label: \'meta\', value: \'meta\', },\\n    { label: \'loci\', value: \'loci\', },\\n  ]\\n}>\\n<TabItem value=\\"meta\\">\\n\\n```\\njulia> unrelated_sims.sampleinfo\\n1000\xd75 DataFrame\\n  Row \u2502 name            population  ploidy  longitude  latitude \\n      \u2502 String          String      Int64   Float32?   Float32? \\n\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n    1 \u2502 sim1_un_off1    unrelated        2   missing   missing  \\n    2 \u2502 sim1_un_off2    unrelated        2   missing   missing  \\n    3 \u2502 sim2_un_off1    unrelated        2   missing   missing  \\n    4 \u2502 sim2_un_off2    unrelated        2   missing   missing  \\n    5 \u2502 sim3_un_off1    unrelated        2   missing   missing  \\n    6 \u2502 sim3_un_off2    unrelated        2   missing   missing  \\n    7 \u2502 sim4_un_off1    unrelated        2   missing   missing  \\n    8 \u2502 sim4_un_off2    unrelated        2   missing   missing  \\n    9 \u2502 sim5_un_off1    unrelated        2   missing   missing  \\n   10 \u2502 sim5_un_off2    unrelated        2   missing   missing  \\n   11 \u2502 sim6_un_off1    unrelated        2   missing   missing  \\n   12 \u2502 sim6_un_off2    unrelated        2   missing   missing  \\n  \u22ee   \u2502       \u22ee             \u22ee         \u22ee         \u22ee         \u22ee\\n  989 \u2502 sim495_un_off1  unrelated        2   missing   missing  \\n  990 \u2502 sim495_un_off2  unrelated        2   missing   missing  \\n  991 \u2502 sim496_un_off1  unrelated        2   missing   missing  \\n  992 \u2502 sim496_un_off2  unrelated        2   missing   missing  \\n  993 \u2502 sim497_un_off1  unrelated        2   missing   missing  \\n  994 \u2502 sim497_un_off2  unrelated        2   missing   missing  \\n  995 \u2502 sim498_un_off1  unrelated        2   missing   missing  \\n  996 \u2502 sim498_un_off2  unrelated        2   missing   missing  \\n  997 \u2502 sim499_un_off1  unrelated        2   missing   missing  \\n  998 \u2502 sim499_un_off2  unrelated        2   missing   missing  \\n  999 \u2502 sim500_un_off1  unrelated        2   missing   missing  \\n 1000 \u2502 sim500_un_off2  unrelated        2   missing   missing  \\n                                                976 rows omitted\\n\\n```\\n\\n</TabItem>\\n<TabItem value=\\"loci\\">\\n\\n```\\njulia> unrelated_sims.genodata\\n9000\xd74 DataFrame\\n  Row \u2502 name            population  locus   genotype   \\n      \u2502 String          String      String  Tuple\u2026     \\n\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n    1 \u2502 sim1_un_off1    unrelated   fca8    (135, 141)\\n    2 \u2502 sim1_un_off1    unrelated   fca23   (132, 132)\\n    3 \u2502 sim1_un_off1    unrelated   fca43   (143, 139)\\n    4 \u2502 sim1_un_off1    unrelated   fca45   (126, 116)\\n    5 \u2502 sim1_un_off1    unrelated   fca77   (154, 148)\\n    6 \u2502 sim1_un_off1    unrelated   fca78   (150, 142)\\n    7 \u2502 sim1_un_off1    unrelated   fca90   (199, 193)\\n    8 \u2502 sim1_un_off1    unrelated   fca96   (109, 91)\\n    9 \u2502 sim1_un_off1    unrelated   fca37   (208, 210)\\n   10 \u2502 sim1_un_off2    unrelated   fca8    (139, 123)\\n   11 \u2502 sim1_un_off2    unrelated   fca23   (140, 130)\\n   12 \u2502 sim1_un_off2    unrelated   fca43   (139, 141)\\n  \u22ee   \u2502       \u22ee             \u22ee         \u22ee         \u22ee\\n 8989 \u2502 sim500_un_off1  unrelated   fca90   (199, 197)\\n 8990 \u2502 sim500_un_off1  unrelated   fca96   (105, 113)\\n 8991 \u2502 sim500_un_off1  unrelated   fca37   (208, 208)\\n 8992 \u2502 sim500_un_off2  unrelated   fca8    (135, 137)\\n 8993 \u2502 sim500_un_off2  unrelated   fca23   (136, 130)\\n 8994 \u2502 sim500_un_off2  unrelated   fca43   (139, 145)\\n 8995 \u2502 sim500_un_off2  unrelated   fca45   (120, 120)\\n 8996 \u2502 sim500_un_off2  unrelated   fca77   (150, 156)\\n 8997 \u2502 sim500_un_off2  unrelated   fca78   (142, 152)\\n 8998 \u2502 sim500_un_off2  unrelated   fca90   (189, 191)\\n 8999 \u2502 sim500_un_off2  unrelated   fca96   (113, 113)\\n 9000 \u2502 sim500_un_off2  unrelated   fca37   (208, 182)\\n                                      8976 rows omitted\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n#### ii. get relatedness estimates for the simulated data\\nNext, we want to get the relatedness estimate for each simulated pair of \\"known\\" sibship. We are only interested in the values for the simulated pairs and not samples across pairs. If you aren\'t sure why that is, think of it this way: we\'re trying to create a range of values where we can confidently say unknown things are full-sibs (or half-sib, etc.), so we want to know what range of values we get from a bunch of known fullsib pairs, not the unknown relationships of samples between pairs. \\n\\nIt would a nightmare to manually specify only 2 individuals at a time into `relatedness()`. Instead, the function has a shortcut built into it that will recognize the `population` names generated from `simulate_sibship` and only give you relatedness estimates for those pairs. So, we just need to run it once for each of our simulations, this time _without_ bootstrapping because we are only interested in the estimates. Make sure to use the same estimator! The run will be a lot faster this time because it only needs to calculate estimates for 500 pairs each time (our `n` from above) and without bootstrapping. When not bootstrapping, `relatedness()` returns a dataframe (versus a NamedTuple of dataframes).\\n\\n<Tabs\\n  block={true}\\n  defaultValue=\\"un\\"\\n  values={[\\n    { label: \'unrelated relatedness\', value: \'un\', },\\n    { label: \'halfsib relatedness\', value: \'h\', },\\n    { label: \'fullsib relatedness\', value: \'f\', },\\n  ]\\n}>\\n<TabItem value=\\"un\\">\\n\\n```julia\\njulia> un_sims_rel = relatedness(unrelated_sims, method = LynchLi)\\n500\xd74 DataFrame\\n Row \u2502 sample_1        sample_2        n_loci  LynchLi    \\n     \u2502 String          String          Int64   Float64?   \\n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n   1 \u2502 sim100_un_off1  sim100_un_off2       9   0.0187624\\n   2 \u2502 sim101_un_off1  sim101_un_off2       9  -0.204246\\n   3 \u2502 sim102_un_off1  sim102_un_off2       9   0.0633641\\n   4 \u2502 sim103_un_off1  sim103_un_off2       9   0.241771\\n   5 \u2502 sim104_un_off1  sim104_un_off2       9  -0.338051\\n   6 \u2502 sim105_un_off1  sim105_un_off2       9   0.0187624\\n   7 \u2502 sim106_un_off1  sim106_un_off2       9  -0.29345\\n   8 \u2502 sim107_un_off1  sim107_un_off2       9   0.0633641\\n  \u22ee  \u2502       \u22ee               \u22ee           \u22ee         \u22ee\\n 494 \u2502 sim94_un_off1   sim94_un_off2        9  -0.159644\\n 495 \u2502 sim95_un_off1   sim95_un_off2        9  -0.0704411\\n 496 \u2502 sim96_un_off1   sim96_un_off2        9   0.0633641\\n 497 \u2502 sim97_un_off1   sim97_un_off2        9   0.241771\\n 498 \u2502 sim98_un_off1   sim98_un_off2        9  -0.0704411\\n 499 \u2502 sim99_un_off1   sim99_un_off2        9   0.241771\\n 500 \u2502 sim9_un_off1    sim9_un_off2         9   0.197169\\n                                          485 rows omitted\\n```\\n\\n</TabItem>\\n<TabItem value=\\"h\\">\\n\\n```julia\\njulia> half_sims_rel = relatedness(halfsib_sims, method = LynchLi)\\n500\xd74 DataFrame\\n Row \u2502 sample_1        sample_2        n_loci  LynchLi    \\n     \u2502 String          String          Int64   Float64?   \\n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n   1 \u2502 sim100_hs_off1  sim100_hs_off2       9   0.111231\\n   2 \u2502 sim101_hs_off1  sim101_hs_off2       9   0.111231\\n   3 \u2502 sim102_hs_off1  sim102_hs_off2       9   0.333423\\n   4 \u2502 sim103_hs_off1  sim103_hs_off2       9  -0.0220842\\n   5 \u2502 sim104_hs_off1  sim104_hs_off2       9   0.111231\\n   6 \u2502 sim105_hs_off1  sim105_hs_off2       9   0.244546\\n   7 \u2502 sim106_hs_off1  sim106_hs_off2       9   0.244546\\n   8 \u2502 sim107_hs_off1  sim107_hs_off2       9   0.377862\\n  \u22ee  \u2502       \u22ee               \u22ee           \u22ee         \u22ee\\n 494 \u2502 sim94_hs_off1   sim94_hs_off2        9   0.200108\\n 495 \u2502 sim95_hs_off1   sim95_hs_off2        9   0.244546\\n 496 \u2502 sim96_hs_off1   sim96_hs_off2        9   0.0223543\\n 497 \u2502 sim97_hs_off1   sim97_hs_off2        9   0.200108\\n 498 \u2502 sim98_hs_off1   sim98_hs_off2        9   0.111231\\n 499 \u2502 sim99_hs_off1   sim99_hs_off2        9   0.333423\\n 500 \u2502 sim9_hs_off1    sim9_hs_off2         9   0.288985\\n                                          485 rows omitted\\n```\\n\\n</TabItem>\\n<TabItem value=\\"f\\">\\n\\n```julia\\njulia> full_sims_rel = relatedness(fullsib_sims, method = LynchLi)\\n500\xd74 DataFrame\\n Row \u2502 sample_1        sample_2        n_loci  LynchLi   \\n     \u2502 String          String          Int64   Float64?  \\n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n   1 \u2502 sim100_fs_off1  sim100_fs_off2       9  0.510483\\n   2 \u2502 sim101_fs_off1  sim101_fs_off2       9  0.465982\\n   3 \u2502 sim102_fs_off1  sim102_fs_off2       9  0.42148\\n   4 \u2502 sim103_fs_off1  sim103_fs_off2       9  0.376979\\n   5 \u2502 sim104_fs_off1  sim104_fs_off2       9  0.465982\\n   6 \u2502 sim105_fs_off1  sim105_fs_off2       9  0.688489\\n   7 \u2502 sim106_fs_off1  sim106_fs_off2       9  0.287976\\n   8 \u2502 sim107_fs_off1  sim107_fs_off2       9  0.599486\\n  \u22ee  \u2502       \u22ee               \u22ee           \u22ee         \u22ee\\n 494 \u2502 sim94_fs_off1   sim94_fs_off2        9  0.688489\\n 495 \u2502 sim95_fs_off1   sim95_fs_off2        9  0.821994\\n 496 \u2502 sim96_fs_off1   sim96_fs_off2        9  0.554985\\n 497 \u2502 sim97_fs_off1   sim97_fs_off2        9  0.599486\\n 498 \u2502 sim98_fs_off1   sim98_fs_off2        9  0.554985\\n 499 \u2502 sim99_fs_off1   sim99_fs_off2        9  0.510483\\n 500 \u2502 sim9_fs_off1    sim9_fs_off2         9  0.376979\\n                                         485 rows omitted\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nAnd if we wanted to plot out what that looks like (optional):\\n```julia\\nusing Plots, StatsPlots\\n\\njulia> density(rel_out.LynchLi.LynchLi, label = \\"real data\\", color = :grey, fill = (0, :grey))\\njulia> density!(un_sims_rel.LynchLi, label = \\"unrelated\\")\\njulia> density!(half_sims_rel.LynchLi, label = \\"halfsib\\", color = :blue)\\njulia> density!(full_sims_rel.LynchLi, label = \\"fullsib\\", color = :black)\\njulia> title!(\\"relatedness estimates on simulated and real data\\")\\n```\\n\\n![relatedness_histo](relatedness_img/nancycats_sims.png)\\n\\n\\nHopefully by now you are starting to contextualize why we\'re doing all of this. The distributions generated from our simulated data are giving us a better indication of what \\"unrelated\\", \\"halfsib\\", and \\"fullsib\\" estimates look like in our data.\\n\\n#### iii. sibship intervals\\nWhat we just did is create null distributions for each sibship relationship, so now all that\'s left is to get a confidence interval from each.\\n\\n```julia\\njulia> unrelated_ci = quantile(un_sims_rel.LynchLi, (0.025, 0.975))\\n(-0.3380513384854698, 0.33097433075726507)\\n\\njulia> halfsibs_ci = quantile(half_sims_rel.LynchLi, (0.025, 0.975))\\n(-0.06652262584414452, 0.5556155725649398)\\n\\njulia> fullsibs_ci = quantile(full_sims_rel.LynchLi, (0.025, 0.975))\\n(0.1989727186688347, 0.8219939374819633)\\n```\\n\\nSo, given our data and the simulations we made, we can now make a reasonable assumption regarding the ranges for each sibship relationship:\\n\\n| Relationship | Lower Bound | Upper Bound |\\n| :------ | :---: | :---: |\\n| unrelated | -0.338 | 0.331 |\\n| half sibling | -0.066 | 0.555 |\\n| full sibling | 0.199 | 0.82 |\\n\\n### 4. Finally, the data assessment\\nNow that we have our relatedness estimates and the acceptable sibship ranges given our data, we can see where our data falls.\\n_Now_, we can say that a particular sample pair is unrelated/halfsib/fullsib if:\\n1. that pair\'s confidence interval does not include zero and \\n2. that pair\'s estimate falls within any of the three calculate ranges\\n\\nUnfortunately, the ranges overlap quite a bit, which makes interpretation difficult, so it may be suitable to use a different estimator. \\n\\n### Closing remarks\\nThere is more that can be done for relatedness, like network analysis. However, this tutorial covers what we consider a reasonable way to assess kinship in population genetic studies. If removing kin is your ultimate goal, consider the effects doing that may have on the analyses you are looking to do. Additionally, consider which individual of a pair you would remove and why. If you were curious as to how many identical loci a pair of samples may share, you can check that using `pairwiseidentical()`. Good luck!"},{"id":"logos","metadata":{"permalink":"/PopGen.jl/blog/logos","editUrl":"https://github.com/BioJulia/PopGen.jl/edit/documentation/blog/2020-06-03-logos.md","source":"@site/blog/2020-06-03-logos.md","title":"Logo Graveyard","description":"What is that logo?","date":"2020-06-03T00:00:00.000Z","formattedDate":"June 3, 2020","tags":[{"label":"misc","permalink":"/PopGen.jl/blog/tags/misc"}],"readingTime":0.87,"truncated":false,"authors":[{"name":"Pavel Dimens","title":"Little this, little that","url":"https://github.com/pdimens","imageURL":"https://avatars1.githubusercontent.com/u/19176506?s=460&u=3afad1d1ef3b09ddc4ab7108143f515be3412d5a&v=4"}],"prevItem":{"title":"Relatedness Tutorial","permalink":"/PopGen.jl/blog/relatedness"}},"content":"## What is that logo?\\nIf you haven\'t guessed already, it\'s the beloved Punnett Square! Nothing screams genetics like everyone\'s first entry-level genetic diagram!\\n\\n\\n## The Logo Graveyard\\nWhile this is completely unrelated to anything important about population genetics or Julia, I (Pavel) want you all to understand the logo-development process that led us to our logo so you can _feel_ my struggle. The process is as follows:\\n\\n1. Jason and I spitball ideas\\n\\n2. I procrastinate real work and open up Inkscape to draft some ideas\\n\\n3. I compose 1-3 versions of an idea and send it to Jason\\n\\n4. \\n   ```julia\\n   if Jason != veto\\n   \\tfor i in 1:5\\n\\t\\tJason critiques and suggests changes\\n   \\t\\tI makes the changes\\n   \\tend\\n   end\\t\\n   ```\\n   \\n5. Jason and I finalize the idea!\\n\\n6. Weeks pass and I\'m not quite satisfied and we start at 1 again\\n\\n\\n\\nI\'m happy to say that we love the Punnett Square and it\'s for keeps, but have a look at the scrapped ideas as a little walk down memory lane:\\n\\n\\n\\n![logo graveyard](/img/logo_graveyard.png)"}]}')}}]);