"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[4750],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,d=c["".concat(s,".").concat(m)]||c[m]||f[m]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3460:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"baypass",title:"Baypass",sidebar_label:"Baypass"},s=void 0,p={unversionedId:"io/baypass",id:"io/baypass",title:"Baypass",description:"The Baypass software is an increasingly common method to use to identify putative outlier loci in population datasets. The input file format is a matrix of loci (rows) x allele counts per population (columns). This format is not suitable for most other applications, so it cannot be read into PopGen.jl, but we offer a convenience function to write PopData into this format so you can use Baypass externally.",source:"@site/docs/io/baypass.md",sourceDirName:"io",slug:"/io/baypass",permalink:"/PopGen.jl/docs/io/baypass",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/io/baypass.md",tags:[],version:"current",lastUpdatedAt:1659107319,formattedLastUpdatedAt:"Jul 29, 2022",frontMatter:{id:"baypass",title:"Baypass",sidebar_label:"Baypass"},sidebar:"docs",previous:{title:"Read/Write data",permalink:"/PopGen.jl/docs/io/readwrite"},next:{title:"Delimited",permalink:"/PopGen.jl/docs/io/delimited"}},u={},c=[{value:"baypass",id:"baypass",level:2},{value:"Keyword arguments",id:"keyword-arguments",level:3}],f={toc:c},m="wrapper";function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://www1.montpellier.inra.fr/CBGP/software/baypass/"},"The Baypass software")," is an increasingly common method to use to identify putative outlier loci in population datasets. The input file format is a matrix of loci (rows) x allele counts per population (columns). This format is not suitable for most other applications, so it cannot be read into PopGen.jl, but we offer a convenience function to write PopData into this format so you can use Baypass externally."),(0,o.kt)("h2",{id:"baypass"},"baypass"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"baypass(data::PopData; filename::Union{String, Nothing} = nothing)\n")),(0,o.kt)("p",null,"Convert a ",(0,o.kt)("inlineCode",{parentName:"p"},"PopData")," object into a Baypass-format matrix. The input format for the Baypass software\nrequires biallelic data. By default, it returns just the Baypass-format matrix; use the keyword argument ",(0,o.kt)("inlineCode",{parentName:"p"},"filename")," to specify a file to write the matrix to.\nThis function ",(0,o.kt)("strong",{parentName:"p"},"does not perform a Baypass analysis"),", but instead creates the input matrix necessary for it."),(0,o.kt)("p",null,"The matrix specification is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"rows = loci",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"each row is a different locus"))),(0,o.kt)("li",{parentName:"ul"},"columns = allele counts per population",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"each pair of columns correspond to the alleles' counts (2 alleles, 2 columns) for a population"),(0,o.kt)("li",{parentName:"ul"},"as a result, there should be 2 \xd7 n_populations columns"),(0,o.kt)("li",{parentName:"ul"},"e.g. row 1, columns 1:2 are the allele counts for locus 1 in population 1")))),(0,o.kt)("h3",{id:"keyword-arguments"},"Keyword arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"filename"),": a ",(0,o.kt)("inlineCode",{parentName:"li"},"String")," of the name of the output file. If ",(0,o.kt)("inlineCode",{parentName:"li"},"nothing"),", then this function just returns the Baypass input matrix without writing to a file. (default: ",(0,o.kt)("inlineCode",{parentName:"li"},"nothing"),")")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-julia"},'julia> sharks = @gulfsharks;\n\njulia> dropmultiallelic!(sharks)\n\njulia> baypass(sharks, filename = "gulfsharks.baypass") ;\n')))}d.isMDXComponent=!0}}]);