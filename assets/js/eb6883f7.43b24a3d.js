"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[9816],{3905:function(e,n,i){i.d(n,{Zo:function(){return d},kt:function(){return c}});var t=i(7294);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function l(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function r(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?l(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)i=l[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)i=l[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=t.createContext({}),p=function(e){var n=t.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):r(r({},n),e)),i},d=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(i),c=a,f=u["".concat(s,".").concat(c)]||u[c]||m[c]||l;return i?t.createElement(f,r(r({ref:n},d),{},{components:i})):t.createElement(f,r({ref:n},d))}));function c(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=i.length,r=new Array(l);r[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var p=2;p<l;p++)r[p]=i[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}u.displayName="MDXCreateElement"},9975:function(e,n,i){i.r(n),i.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return d},toc:function(){return m},default:function(){return c}});var t=i(7462),a=i(3366),l=(i(7294),i(3905)),r=["components"],o={id:"sibship_simulations",title:"Simulate Sibling Pairs",sidebar_label:"Sibling Pairs"},s=void 0,p={unversionedId:"simulations/sibship_simulations",id:"simulations/sibship_simulations",title:"Simulate Sibling Pairs",description:"To perfom simulations, you will need add and import the package PopGenSims.jl (available here).",source:"@site/docs/simulations/sibship.md",sourceDirName:"simulations",slug:"/simulations/sibship_simulations",permalink:"/PopGen.jl/docs/simulations/sibship_simulations",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/simulations/sibship.md",tags:[],version:"current",lastUpdatedAt:1646327686,formattedLastUpdatedAt:"3/3/2022",frontMatter:{id:"sibship_simulations",title:"Simulate Sibling Pairs",sidebar_label:"Sibling Pairs"},sidebar:"docs",previous:{title:"Breeding Crosses",permalink:"/PopGen.jl/docs/simulations/breedingcrosses"},next:{title:"API (start here)",permalink:"/PopGen.jl/docs/api/"}},d={},m=[{value:"Relationship",id:"relationship",level:3},{value:"Identifying pairs",id:"identifying-pairs",level:3},{value:"Ploidy",id:"ploidy",level:3},{value:"Odd ploidy",id:"odd-ploidy",level:4},{value:"Example",id:"example",level:3}],u={toc:m};function c(e){var n=e.components,i=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,t.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Requires PopGenSims.jl")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"To perfom simulations, you will need add and import the package ",(0,l.kt)("inlineCode",{parentName:"p"},"PopGenSims.jl")," (available ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pdimens/PopGenSims.jl"},"here"),")."))),(0,l.kt)("p",null,"It's good practice to use your data to simulate sibling pairs and perform\nrelatedness analyses on the simulations to understand the validity/strength\nof relatedness estimators on your data. To do this, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"simulatekin"),"\nand specify the relationship you want to simulate and how many pairs to create for\nthat relationship."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"simulatekin(data::PopData; fullsib::Int, halfsib::Int, unrelated::Int, parentoffspring::Int, ploidy::Int)\n")),(0,l.kt)("p",null,"This function will simulate mating crosses to generate sample pairs with any combination of\nthe specified relationships, returning a ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," object. The simulations will first\ngenerate parents of a given ",(0,l.kt)("inlineCode",{parentName:"p"},"ploidy")," (inferred or specified) by drawing alleles from\na global allele pool derived from the given ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," (i.e. weighted by their frequencies)."),(0,l.kt)("h3",{id:"relationship"},"Relationship"),(0,l.kt)("p",null,"Simulated parents will be crossed to generate offspring depending on the ",(0,l.kt)("inlineCode",{parentName:"p"},"relationship"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fullsib")," : 2 parents generate 2 full-sibling offspring, returns 2 offspring"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"halfsib")," : 3 parents generate 2 half-sibling offspring, returns 2 offspring"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"unrelated")," : returns 2 randomly generated individuals from the global allele pools"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parentoffspring")," : 2 parents generate 1 offspring, returns 1 offspring and 1 parent")),(0,l.kt)("h3",{id:"identifying-pairs"},"Identifying pairs"),(0,l.kt)("p",null,"The relationship between the newly generated samples can be identified by:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Sample names will specify their simulation number, relationship, and whether parent or offspring",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Naming convention: ",(0,l.kt)("inlineCode",{parentName:"li"},"[simulation #]_[relationship]_[offspring #]")),(0,l.kt)("li",{parentName:"ul"},"example: ",(0,l.kt)("inlineCode",{parentName:"li"},"sim005_fullsib_1")," = ",(0,l.kt)("inlineCode",{parentName:"li"},"[simulation 005]_[full sibling]_[offspring 1]")))),(0,l.kt)("li",{parentName:"ul"},"Their ",(0,l.kt)("inlineCode",{parentName:"li"},"population"),' name will be that of their relationship (e.g. "fullsib")')),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"plugging into relatedness")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"relatedness")," function will recognize the population names output from simulating siblingship\nand only estimate relatedness for the appropriate pairs. If you need this functionality, you are\nstrongly discouraged from manually editing the resulting ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"simulatekin"),"."))),(0,l.kt)("h3",{id:"ploidy"},"Ploidy"),(0,l.kt)("p",null,"By default, the ploidy of the simulated parents and offspring are inferred from the supplied ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),"."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"adjusting ploidy")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If you have mixed-ploidy data or wish to generate parents and offspring of a ploidy different than the source\n",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," you can specify the ploidy with which to simulate parents and offspring. For example, if your ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData"),"\nis diploid, but you wish to generate triploid or octoploid parents and offspring, you would specify ",(0,l.kt)("inlineCode",{parentName:"p"},"ploidy = 3"),"\nor ",(0,l.kt)("inlineCode",{parentName:"p"},"ploidy = 8")," repectively."))),(0,l.kt)("h4",{id:"odd-ploidy"},"Odd ploidy"),(0,l.kt)("p",null,"If trying to create offspring with an odd ploidy (3, 5, etc.), each parent has a 50% chance of\ncontributing (\xbd \xd7 ploidy) + 1 alleles for all loci to the offspring. In other words, if ploidy = 3,\nthere's a 50% chance parent_1 will give 2 alleles for every locus for that simulated cross."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"julia> cats = @nanycats ;\n\njulia> cat_sims = simulatekin(cats, fullsib = 10, halfsib = 50)\nPopData{Diploid, 9 Microsatellite loci}\n  Samples: 120\n  Populations: 2\n\njulia> cat_sims.sampleinfo\n120\xd73 DataFrame\n Row \u2502 name             population  ploidy \n     \u2502 String           String      Int64  \n\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u2502 sim01_fullsib_1  fullsib          2\n   2 \u2502 sim01_fullsib_2  fullsib          2\n   3 \u2502 sim02_fullsib_1  fullsib          2\n   4 \u2502 sim02_fullsib_2  fullsib          2\n   5 \u2502 sim03_fullsib_1  fullsib          2\n   6 \u2502 sim03_fullsib_2  fullsib          2\n  \u22ee  \u2502        \u22ee             \u22ee         \u22ee\n 115 \u2502 sim48_halfsib_1  halfsib          2\n 116 \u2502 sim48_halfsib_2  halfsib          2\n 117 \u2502 sim49_halfsib_1  halfsib          2\n 118 \u2502 sim49_halfsib_2  halfsib          2\n 119 \u2502 sim50_halfsib_1  halfsib          2\n 120 \u2502 sim50_halfsib_2  halfsib          2\n                           108 rows omitted\n")))}c.isMDXComponent=!0}}]);