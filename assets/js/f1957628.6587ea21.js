"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[2973],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return t?i.createElement(h,r(r({ref:n},c),{},{components:t})):i.createElement(h,r({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,r[1]=a;for(var p=2;p<l;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9741:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return c},toc:function(){return u},default:function(){return m}});var i=t(7462),o=t(3366),l=(t(7294),t(3905)),r=["components"],a={id:"conditionals",title:"Conditionals.jl",sidebar_label:"Conditionals.jl"},s=void 0,p={unversionedId:"api/PopGenCore/conditionals",id:"api/PopGenCore/conditionals",title:"Conditionals.jl",description:"PopGenCore.jl/src/Conditionals.jl",source:"@site/docs/api/PopGenCore/Conditionals.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/conditionals",permalink:"/PopGen.jl/docs/api/PopGenCore/conditionals",editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/Conditionals.md",tags:[],version:"current",lastUpdatedAt:1636029729,formattedLastUpdatedAt:"11/4/2021",frontMatter:{id:"conditionals",title:"Conditionals.jl",sidebar_label:"Conditionals.jl"},sidebar:"docs",previous:{title:"AlleleFreq.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/allelefreq"},next:{title:"Datasets.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/datasets"}},c={},u=[{value:"PopGenCore.jl/src/Conditionals.jl",id:"popgencorejlsrcconditionalsjl",level:2},{value:"\ud83d\udfea\ud83d\udd35 isbiallelic",id:"-isbiallelic",level:3},{value:"\ud83d\udfea\ud83d\udd35 ishom",id:"-ishom",level:3},{value:"\ud83d\udfea _ishom",id:"-_ishom",level:3},{value:"\ud83d\udfea\ud83d\udd35 ishet",id:"-ishet",level:3},{value:"\ud83d\udfea _ishet",id:"-_ishet",level:3}],d={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"popgencorejlsrcconditionalsjl"},"PopGenCore.jl/src/Conditionals.jl"),(0,l.kt)("p",null,"\ud83d\udce6  => not exported |\n\ud83d\udfea => exported by PopGenCore.jl |\n\ud83d\udd35 => exported by PopGen.jl"),(0,l.kt)("h3",{id:"-isbiallelic"},"\ud83d\udfea\ud83d\udd35 isbiallelic"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"isbiallelic(data::GenoArray)\n")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the ",(0,l.kt)("inlineCode",{parentName:"p"},"GenoArray")," is biallelic, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," if not."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"isbiallelic(data::DataFrame)\n")),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"isbiallelic(data::PopData)\n")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," all the loci in the ",(0,l.kt)("inlineCode",{parentName:"p"},"PopData")," are biallelic, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," if not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"-ishom"},"\ud83d\udfea\ud83d\udd35 ishom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"ishom(locus::T) where T <: GenoArray\nishom(locus::Genotype)\nishom(locus::Missing)\n")),(0,l.kt)("p",null,"A series of methods to test if a locus or loci are homozygous and return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if\nit is, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," if it isn't (or missing). For calculations, we recommend using ",(0,l.kt)("inlineCode",{parentName:"p"},"_ishom()"),",\nwhich returns ",(0,l.kt)("inlineCode",{parentName:"p"},"missing")," if the genotype is ",(0,l.kt)("inlineCode",{parentName:"p"},"missing"),". The vector version\nsimply maps the function over the elements."),(0,l.kt)("hr",null),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"ishom(locus::Genotype, allele::Signed)\nishom(loci::GenoArray, allele::Signed)\nishom(geno::Missing, allele::Signed)\n")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the ",(0,l.kt)("inlineCode",{parentName:"p"},"locus"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"loci")," is/are homozygous for the specified ",(0,l.kt)("inlineCode",{parentName:"p"},"allele"),"."),(0,l.kt)("h3",{id:"-_ishom"},"\ud83d\udfea _ishom"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"_ishom(locus::T) where T <: GenoArray\n_ishom(locus::Genotype)\n_ishom(locus::Missing)\n")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the ",(0,l.kt)("inlineCode",{parentName:"p"},"locus"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"loci")," is/are homozygous for the specified ",(0,l.kt)("inlineCode",{parentName:"p"},"allele")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"missing")," if the genotype is ",(0,l.kt)("inlineCode",{parentName:"p"},"missing"),"."),(0,l.kt)("h3",{id:"-ishet"},"\ud83d\udfea\ud83d\udd35 ishet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"ishet(locus::T) where T <: GenoArray\nishet(locus::Genotype)\nishet(locus::Missing)\n")),(0,l.kt)("p",null,"A series of methods to test if a locus or loci are heterozygous and return ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if\nit is, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," if it isn't. The vector version simply broadcasts the function over the\nelements. Under the hood, this function is simply ",(0,l.kt)("inlineCode",{parentName:"p"},"!ishom"),".\nfunction ishet(locus::Genotype)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-julia"},"ishet(locus::Genotype, allele::Signed)\nishet(loci::GenoArray, allele::Signed)\n")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the ",(0,l.kt)("inlineCode",{parentName:"p"},"locus"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"loci")," is/are heterozygous for the specified ",(0,l.kt)("inlineCode",{parentName:"p"},"allele"),". "),(0,l.kt)("h3",{id:"-_ishet"},"\ud83d\udfea _ishet"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"_ishet(locus::T) where T <: GenoArray\n_ishet(locus::Genotype)\n_ishet(locus::Missing)\n")),(0,l.kt)("p",null,"Returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the ",(0,l.kt)("inlineCode",{parentName:"p"},"locus"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"loci")," is/are heterozygous for the specified ",(0,l.kt)("inlineCode",{parentName:"p"},"allele")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"missing")," if the genotype is ",(0,l.kt)("inlineCode",{parentName:"p"},"missing"),"."))}m.isMDXComponent=!0}}]);