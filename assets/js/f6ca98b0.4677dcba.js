"use strict";(self.webpackChunkpop_gen_jl=self.webpackChunkpop_gen_jl||[]).push([[9535],{3905:function(e,l,t){t.d(l,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function a(e,l,t){return l in e?Object.defineProperty(e,l,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[l]=t,e}function r(e,l){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);l&&(n=n.filter((function(l){return Object.getOwnPropertyDescriptor(e,l).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var l=1;l<arguments.length;l++){var t=null!=arguments[l]?arguments[l]:{};l%2?r(Object(t),!0).forEach((function(l){a(e,l,t[l])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(l){Object.defineProperty(e,l,Object.getOwnPropertyDescriptor(t,l))}))}return e}function p(e,l){if(null==e)return{};var t,n,a=function(e,l){if(null==e)return{};var t,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],l.indexOf(t)>=0||(a[t]=e[t]);return a}(e,l);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],l.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),c=function(e){var l=n.useContext(i),t=l;return e&&(t="function"==typeof e?e(l):o(o({},l),e)),t},u=function(e){var l=c(e.components);return n.createElement(i.Provider,{value:l},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var l=e.children;return n.createElement(n.Fragment,{},l)}},d=n.forwardRef((function(e,l){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),s=c(t),d=a,m=s["".concat(i,".").concat(d)]||s[d]||f[d]||r;return t?n.createElement(m,o(o({ref:l},u),{},{components:t})):n.createElement(m,o({ref:l},u))}));function m(e,l){var t=arguments,a=l&&l.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var p={};for(var i in l)hasOwnProperty.call(l,i)&&(p[i]=l[i]);p.originalType=e,p[s]="string"==typeof e?e:a,o[1]=p;for(var c=2;c<r;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2844:function(e,l,t){t.r(l),t.d(l,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return s}});var n=t(7462),a=t(3366),r=(t(7294),t(3905)),o=["components"],p={id:"allelefreq",title:"AlleleFreq.jl",sidebar_label:"AlleleFreq.jl"},i=void 0,c={unversionedId:"api/PopGenCore/allelefreq",id:"api/PopGenCore/allelefreq",title:"AlleleFreq.jl",description:"PopGenCore.jl/src/AlleleFreq.jl",source:"@site/docs/api/PopGenCore/AlleleFreq.md",sourceDirName:"api/PopGenCore",slug:"/api/PopGenCore/allelefreq",permalink:"/PopGen.jl/docs/api/PopGenCore/allelefreq",draft:!1,editUrl:"https://github.com/BioJulia/PopGen.jl/edit/documentation/docs/api/PopGenCore/AlleleFreq.md",tags:[],version:"current",lastUpdatedAt:1653415002,formattedLastUpdatedAt:"May 24, 2022",frontMatter:{id:"allelefreq",title:"AlleleFreq.jl",sidebar_label:"AlleleFreq.jl"},sidebar:"docs",previous:{title:"Utils.jl",permalink:"/PopGen.jl/docs/api/PopGen/utils"},next:{title:"AlleleMatrices.jl",permalink:"/PopGen.jl/docs/api/PopGenCore/allelematrices"}},u={},s=[{value:"PopGenCore.jl/src/AlleleFreq.jl",id:"popgencorejlsrcallelefreqjl",level:2},{value:"\ud83d\udfea allelefreq",id:"-allelefreq",level:3},{value:"\ud83d\udfea avg_allelefreq",id:"-avg_allelefreq",level:3},{value:"\ud83d\udfea allelefreq_vec",id:"-allelefreq_vec",level:3}],f={toc:s},d="wrapper";function m(e){var l=e.components,t=(0,a.Z)(e,o);return(0,r.kt)(d,(0,n.Z)({},f,t,{components:l,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"popgencorejlsrcallelefreqjl"},"PopGenCore.jl/src/AlleleFreq.jl"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udce6  not exported"),(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udfea  exported by PopGenCore.jl"),(0,r.kt)("th",{parentName:"tr",align:"center"},"\ud83d\udd35  exported by PopGen.jl")))),(0,r.kt)("h3",{id:"-allelefreq"},"\ud83d\udfea allelefreq"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"allelefreq(genos::GenoArray, allele::Int)\n")),(0,r.kt)("p",null,"Return the frequency of a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"allele")," from a vector of Genotypes ",(0,r.kt)("inlineCode",{parentName:"p"},"genos"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'ncats = @nancycats;\nncats_sub = ncats[(ncats.genodata.locus .== "fca8") .& (ncats.genodata.genotype .!== missing)] \npop_grp = groupby(ncats_sub, :population)\nDataFrames.combine(pop_grp, :genotype => (geno -> allelefreq(137, geno)) => :freq_137)\n')),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"allelefreq(geno::Genotype)\n")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dict")," of allele frequencies of the alleles within a single Genotype in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData"),"\nobject."),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"allelefreq(locus::T) where T<:GenotypeArray\n")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dict")," of allele frequencies of a single locus in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData"),"\nobject."),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"allelefreq(data::PopData, locus::String; population::Bool = false)\n")),(0,r.kt)("p",null,"Return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dict")," of allele frequencies of a single locus in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData"),"\nobject. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"population = true")," to return a table of allele frequencies\nof that locus per population."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},'cats = @nancycats\nallelefreq(cats, "fca8")\nallelefreq(cats, "fca8", population = true)\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-avg_allelefreq"},"\ud83d\udfea avg_allelefreq"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"avg_allelefreq(allele_dicts::AbstractVector{Dict{T, Float64}}, power::Int = 1) where T<:Signed  \n")),(0,r.kt)("p",null,"Takes a Vector of Dicts generated by ",(0,r.kt)("inlineCode",{parentName:"p"},"allelefreq")," and returns a Dict of the average\nallele frequencies raised to the ",(0,r.kt)("inlineCode",{parentName:"p"},"power")," (exponent) specified (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),").\nThis is typically done to calculate average allele frequencies across populations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cats = @nancycats;\nalleles_df = DataFrames.combine(\n    groupby(cats.genodata, [:locus, :population]),\n    :genotype => allelefreq => :alleles\n);\nDataFrames.combine(\n    groupby(alleles_df, :locus),\n    :alleles => (i -> sum(avg_allelefreq(i, 2))) => :avg_freq\n)\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-allelefreq_vec"},"\ud83d\udfea allelefreq_vec"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-julia"},"allelefreq_vec(locus::T) where T<:GenotypeArray\n")),(0,r.kt)("p",null,"Return a Vector of allele frequencies of a single locus in a ",(0,r.kt)("inlineCode",{parentName:"p"},"PopData")," object. Similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"allelefreq()"),", except it returns only the frequencies, without the allele names, meaning they can be in any order. This can be useful for getting the expected genotype frequencies."))}m.isMDXComponent=!0}}]);